{{>licenseInfo}}
{{#models}}{{#model}}defmodule {{moduleName}}.Model.{{classname}} do
  @moduledoc """
  {{description}}

  ## Attributes

  {{#vars}}
  - {{baseName}} ({{datatype}}): {{description}}{{#defaultValue}} Defaults to: `{{defaultValue}}`.{{/defaultValue}}
{{#isEnum}}
    - Enum - one of {{_enum}}
{{/isEnum}}
  {{/vars}}
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
    {{#vars}}{{baseName}}: {{#isPrimitiveType}}any(){{/isPrimitiveType}}{{^isPrimitiveType}}{{#isListContainer}}list({{#items.datatype}}{{moduleName}}.Model.{{items.datatype}}.t(){{/items.datatype}}{{^items.datatype}}any(){{/items.datatype}}){{/isListContainer}}{{^isListContainer}}{{#isMapContainer}}map(){{/isMapContainer}}{{^isMapContainer}}{{#isDate}}Date.t{{/isDate}}{{^isDate}}{{moduleName}}.Model.{{datatype}}.t(){{/isDate}}{{/isMapContainer}}{{/isListContainer}}{{/isPrimitiveType}}{{#hasMore}},
    {{/hasMore}}{{/vars}}
  }

  {{#vars}}
  field(:"{{baseName}}"{{^isPrimitiveType}}, as: {{#isDate}}Date{{/isDate}}{{#isDateTime}}Date{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{moduleName}}.Model.{{#isContainer}}{{items.datatype}}{{/isContainer}}{{^isContainer}}{{datatype}}{{/isContainer}}{{/isDateTime}}{{/isDate}}{{/isPrimitiveType}}{{#isListContainer}}, type: :list{{/isListContainer}})
  {{/vars}}
end

defimpl Poison.Decoder, for: {{moduleName}}.Model.{{classname}} do
  def decode(value, options) do
    {{moduleName}}.Model.{{classname}}.decode(value, options)
  end
end

{{/model}}{{/models}}
