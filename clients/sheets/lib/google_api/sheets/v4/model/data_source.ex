# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Sheets.V4.Model.DataSource do
  @moduledoc """
  Information about an external data source in the spreadsheet.

  ## Attributes

  *   `calculatedColumns` (*type:* `list(GoogleApi.Sheets.V4.Model.DataSourceColumn.t)`, *default:* `nil`) - All calculated columns in the data source.
  *   `dataSourceId` (*type:* `String.t`, *default:* `nil`) - The spreadsheet-scoped unique ID that identifies the data source.
  *   `sheetId` (*type:* `integer()`, *default:* `nil`) - The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated SheetType.DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
  *   `spec` (*type:* `GoogleApi.Sheets.V4.Model.DataSourceSpec.t`, *default:* `nil`) - The DataSourceSpec.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :calculatedColumns => list(GoogleApi.Sheets.V4.Model.DataSourceColumn.t()),
          :dataSourceId => String.t(),
          :sheetId => integer(),
          :spec => GoogleApi.Sheets.V4.Model.DataSourceSpec.t()
        }

  field(:calculatedColumns, as: GoogleApi.Sheets.V4.Model.DataSourceColumn, type: :list)
  field(:dataSourceId)
  field(:sheetId)
  field(:spec, as: GoogleApi.Sheets.V4.Model.DataSourceSpec)
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.DataSource do
  def decode(value, options) do
    GoogleApi.Sheets.V4.Model.DataSource.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.DataSource do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
