# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Sheets.V4.Model.Sheet do
  @moduledoc """
  A sheet in a spreadsheet.

  ## Attributes

  - bandedRanges (list(GoogleApi.Sheets.V4.Model.BandedRange.t)): The banded (alternating colors) ranges on this sheet. Defaults to `nil`.
  - basicFilter (GoogleApi.Sheets.V4.Model.BasicFilter.t): The filter on this sheet, if any. Defaults to `nil`.
  - charts (list(GoogleApi.Sheets.V4.Model.EmbeddedChart.t)): The specifications of every chart on this sheet. Defaults to `nil`.
  - columnGroups (list(GoogleApi.Sheets.V4.Model.DimensionGroup.t)): All column groups on this sheet, ordered by increasing range start index,
  then by group depth. Defaults to `nil`.
  - conditionalFormats (list(GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t)): The conditional format rules in this sheet. Defaults to `nil`.
  - data (list(GoogleApi.Sheets.V4.Model.GridData.t)): Data in the grid, if this is a grid sheet.
  The number of GridData objects returned is dependent on the number of
  ranges requested on this sheet. For example, if this is representing
  `Sheet1`, and the spreadsheet was requested with ranges
  `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a
  startRow/startColumn of `0`,
  while the second one will have `startRow 14` (zero-based row 15),
  and `startColumn 3` (zero-based column D). Defaults to `nil`.
  - developerMetadata (list(GoogleApi.Sheets.V4.Model.DeveloperMetadata.t)): The developer metadata associated with a sheet. Defaults to `nil`.
  - filterViews (list(GoogleApi.Sheets.V4.Model.FilterView.t)): The filter views in this sheet. Defaults to `nil`.
  - merges (list(GoogleApi.Sheets.V4.Model.GridRange.t)): The ranges that are merged together. Defaults to `nil`.
  - properties (GoogleApi.Sheets.V4.Model.SheetProperties.t): The properties of the sheet. Defaults to `nil`.
  - protectedRanges (list(GoogleApi.Sheets.V4.Model.ProtectedRange.t)): The protected ranges in this sheet. Defaults to `nil`.
  - rowGroups (list(GoogleApi.Sheets.V4.Model.DimensionGroup.t)): All row groups on this sheet, ordered by increasing range start index, then
  by group depth. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bandedRanges => list(GoogleApi.Sheets.V4.Model.BandedRange.t()),
          :basicFilter => GoogleApi.Sheets.V4.Model.BasicFilter.t(),
          :charts => list(GoogleApi.Sheets.V4.Model.EmbeddedChart.t()),
          :columnGroups => list(GoogleApi.Sheets.V4.Model.DimensionGroup.t()),
          :conditionalFormats => list(GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t()),
          :data => list(GoogleApi.Sheets.V4.Model.GridData.t()),
          :developerMetadata => list(GoogleApi.Sheets.V4.Model.DeveloperMetadata.t()),
          :filterViews => list(GoogleApi.Sheets.V4.Model.FilterView.t()),
          :merges => list(GoogleApi.Sheets.V4.Model.GridRange.t()),
          :properties => GoogleApi.Sheets.V4.Model.SheetProperties.t(),
          :protectedRanges => list(GoogleApi.Sheets.V4.Model.ProtectedRange.t()),
          :rowGroups => list(GoogleApi.Sheets.V4.Model.DimensionGroup.t())
        }

  field(:bandedRanges, as: GoogleApi.Sheets.V4.Model.BandedRange, type: :list)
  field(:basicFilter, as: GoogleApi.Sheets.V4.Model.BasicFilter)
  field(:charts, as: GoogleApi.Sheets.V4.Model.EmbeddedChart, type: :list)
  field(:columnGroups, as: GoogleApi.Sheets.V4.Model.DimensionGroup, type: :list)
  field(:conditionalFormats, as: GoogleApi.Sheets.V4.Model.ConditionalFormatRule, type: :list)
  field(:data, as: GoogleApi.Sheets.V4.Model.GridData, type: :list)
  field(:developerMetadata, as: GoogleApi.Sheets.V4.Model.DeveloperMetadata, type: :list)
  field(:filterViews, as: GoogleApi.Sheets.V4.Model.FilterView, type: :list)
  field(:merges, as: GoogleApi.Sheets.V4.Model.GridRange, type: :list)
  field(:properties, as: GoogleApi.Sheets.V4.Model.SheetProperties)
  field(:protectedRanges, as: GoogleApi.Sheets.V4.Model.ProtectedRange, type: :list)
  field(:rowGroups, as: GoogleApi.Sheets.V4.Model.DimensionGroup, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.Sheet do
  def decode(value, options) do
    GoogleApi.Sheets.V4.Model.Sheet.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.Sheet do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
