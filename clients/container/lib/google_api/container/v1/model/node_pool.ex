# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Container.V1.Model.NodePool do
  @moduledoc """
  NodePool contains the name and configuration for a cluster's node pool.
  Node pools are a set of nodes (i.e. VM's), with a common configuration and
  specification, under the control of the cluster master. They may have a set
  of Kubernetes labels applied to them, which may be used to reference them
  during pod scheduling. They may also be resized up or down, to accommodate
  the workload.

  ## Attributes

  - autoscaling (GoogleApi.Container.V1.Model.NodePoolAutoscaling.t): Autoscaler configuration for this NodePool. Autoscaler is enabled
  only if a valid configuration is present. Defaults to `nil`.
  - conditions (list(GoogleApi.Container.V1.Model.StatusCondition.t)): Which conditions caused the current node pool state. Defaults to `nil`.
  - config (GoogleApi.Container.V1.Model.NodeConfig.t): The node configuration of the pool. Defaults to `nil`.
  - initialNodeCount (integer()): The initial node count for the pool. You must ensure that your
  Compute Engine <a href="/compute/docs/resource-quotas">resource quota</a>
  is sufficient for this number of instances. You must also have available
  firewall and routes quota. Defaults to `nil`.
  - instanceGroupUrls (list(String.t)): [Output only] The resource URLs of the [managed instance
  groups](/compute/docs/instance-groups/creating-groups-of-managed-instances)
  associated with this node pool. Defaults to `nil`.
  - management (GoogleApi.Container.V1.Model.NodeManagement.t): NodeManagement configuration for this NodePool. Defaults to `nil`.
  - maxPodsConstraint (GoogleApi.Container.V1.Model.MaxPodsConstraint.t): The constraint on the maximum number of pods that can be run
  simultaneously on a node in the node pool. Defaults to `nil`.
  - name (String.t): The name of the node pool. Defaults to `nil`.
  - podIpv4CidrSize (integer()): [Output only] The pod CIDR block size per node in this node pool. Defaults to `nil`.
  - selfLink (String.t): [Output only] Server-defined URL for the resource. Defaults to `nil`.
  - status (String.t): [Output only] The status of the nodes in this pool instance. Defaults to `nil`.
  - statusMessage (String.t): [Output only] Additional information about the current status of this
  node pool instance, if available. Defaults to `nil`.
  - version (String.t): The version of the Kubernetes of this node. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :autoscaling => GoogleApi.Container.V1.Model.NodePoolAutoscaling.t(),
          :conditions => list(GoogleApi.Container.V1.Model.StatusCondition.t()),
          :config => GoogleApi.Container.V1.Model.NodeConfig.t(),
          :initialNodeCount => integer(),
          :instanceGroupUrls => list(String.t()),
          :management => GoogleApi.Container.V1.Model.NodeManagement.t(),
          :maxPodsConstraint => GoogleApi.Container.V1.Model.MaxPodsConstraint.t(),
          :name => String.t(),
          :podIpv4CidrSize => integer(),
          :selfLink => String.t(),
          :status => String.t(),
          :statusMessage => String.t(),
          :version => String.t()
        }

  field(:autoscaling, as: GoogleApi.Container.V1.Model.NodePoolAutoscaling)
  field(:conditions, as: GoogleApi.Container.V1.Model.StatusCondition, type: :list)
  field(:config, as: GoogleApi.Container.V1.Model.NodeConfig)
  field(:initialNodeCount)
  field(:instanceGroupUrls, type: :list)
  field(:management, as: GoogleApi.Container.V1.Model.NodeManagement)
  field(:maxPodsConstraint, as: GoogleApi.Container.V1.Model.MaxPodsConstraint)
  field(:name)
  field(:podIpv4CidrSize)
  field(:selfLink)
  field(:status)
  field(:statusMessage)
  field(:version)
end

defimpl Poison.Decoder, for: GoogleApi.Container.V1.Model.NodePool do
  def decode(value, options) do
    GoogleApi.Container.V1.Model.NodePool.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Container.V1.Model.NodePool do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
