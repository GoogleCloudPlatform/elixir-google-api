# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1DebugSessionTransaction do
  @moduledoc """
  A transaction contains all of the debug information of the entire message flow of an API call processed by the runtime plane. The information is collected and recorded at critical points of the message flow in the runtime apiproxy.

  ## Attributes

  *   `completed` (*type:* `boolean()`, *default:* `nil`) - Flag indicating whether a transaction is completed or not
  *   `point` (*type:* `list(GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1Point.t)`, *default:* `nil`) - List of debug data collected by runtime plane at various defined points in the flow.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :completed => boolean() | nil,
          :point => list(GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1Point.t()) | nil
        }

  field(:completed)
  field(:point, as: GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1Point, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1DebugSessionTransaction do
  def decode(value, options) do
    GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1DebugSessionTransaction.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Apigee.V1.Model.GoogleCloudApigeeV1DebugSessionTransaction do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
