# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firebase.V1beta1.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.Firebase.V1beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Adds Firebase resources to the specified existing
  [Google Cloud Platform (GCP) `Project`]
  (https://cloud.google.com/resource-manager/reference/rest/v1/projects).
  <br>
  <br>Since a FirebaseProject is actually also a GCP `Project`, a
  `FirebaseProject` uses underlying GCP identifiers (most importantly,
  the `projectId`) as its own for easy interop with GCP APIs.
  <br>
  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
  Poll the `Operation` to track the provisioning process by calling
  GetOperation until
  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
  `done` is `true`, the `Operation` has either succeeded or failed. If the
  `Operation` succeeded, its
  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
  a FirebaseProject; if the `Operation` failed, its
  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
  google.rpc.Status. The `Operation` is automatically deleted after
  completion, so there is no need to call
  DeleteOperation.
  <br>
  <br>This method does not modify any billing account information on the
  underlying GCP `Project`.
  <br>
  <br>To call `AddFirebase`, a member must be an Editor or Owner for the
  existing GCP `Project`. Service accounts cannot call `AddFirebase`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `project` (*type:* `String.t`) - The resource name of the GCP `Project` to which Firebase resources will be
      added, in the format:
      <br><code>projects/<var>projectId</var></code>
      After calling `AddFirebase`, the
      [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)
      of the GCP `Project` is also the `projectId` of the FirebaseProject.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.AddFirebaseRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_add_firebase(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_add_firebase(connection, project, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+project}:addFirebase", %{
        "project" => URI.encode(project, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Links a FirebaseProject with an existing
  [Google Analytics account](http://www.google.com/analytics/).
  <br>
  <br>Using this call, you can either:
  <ul>
  <li>Specify an `analyticsAccountId` to provision a new Google Analytics
  property within the specified account and associate the new property with
  your `FirebaseProject`.</li>
  <li>Specify an existing `analyticsPropertyId` to associate the property
  with your `FirebaseProject`.</li>
  </ul>
  <br>
  Note that when you call `AddGoogleAnalytics`:
  <ol>
  <li>The first check determines if any existing data streams in the
  Google Analytics property correspond to any existing Firebase Apps in your
  `FirebaseProject` (based on the `packageName` or `bundleId` associated with
  the data stream). Then, as applicable, the data streams and apps are
  linked. Note that this auto-linking only applies to Android Apps and iOS
  Apps.</li>
  <li>If no corresponding data streams are found for your Firebase Apps,
  new data streams are provisioned in the Google Analytics property
  for each of your Firebase Apps. Note that a new data stream is always
  provisioned for a Web App even if it was previously associated with a
  data stream in your Analytics property.</li>
  </ol>
  Learn more about the hierarchy and structure of Google Analytics
  accounts in the
  [Analytics
  documentation](https://support.google.com/analytics/answer/9303323).
  <br>
  <br>The result of this call is an [`Operation`](../../v1beta1/operations).
  Poll the `Operation` to track the provisioning process by calling
  GetOperation until
  [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When
  `done` is `true`, the `Operation` has either succeeded or failed. If the
  `Operation` succeeded, its
  [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to
  an AnalyticsDetails; if the `Operation` failed, its
  [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a
  google.rpc.Status.
  <br>
  <br>To call `AddGoogleAnalytics`, a member must be an Owner for
  the existing `FirebaseProject` and have the
  [`Edit` permission](https://support.google.com/analytics/answer/2884495)
  for the Google Analytics account.
  <br>
  <br>If a `FirebaseProject` already has Google Analytics enabled, and you
  call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different
  from the currently associated property, then the call will fail. Analytics
  may have already been enabled in the Firebase console or by specifying
  `timeZone` and `regionCode` in the call to
  [`AddFirebase`](../../v1beta1/projects/addFirebase).

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent `FirebaseProject` to link to an existing Google Analytics
      account, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.AddGoogleAnalyticsRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_add_google_analytics(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_add_google_analytics(
        connection,
        parent,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}:addGoogleAnalytics", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Gets the FirebaseProject identified by the specified resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the Project, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.FirebaseProject{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_get(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.FirebaseProject.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.FirebaseProject{}])
  end

  @doc """
  Gets the configuration artifact used by servers to simplify initialization.
  <br>
  <br>Typically, this configuration is used with the Firebase Admin SDK
  [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
  command.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the Project, in the format:
      <br><code>projects/<var>projectId</var>/adminSdkConfig</code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_get_admin_sdk_config(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_get_admin_sdk_config(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig{}])
  end

  @doc """
  Gets the Google Analytics details currently associated with a
  FirebaseProject.
  <br>
  <br>If the `FirebaseProject` is not yet linked to Google Analytics, then
  the response to `GetAnalyticsDetails` is NOT_FOUND.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name, in the format:
      <br><code>projects/<var>projectId</var>/analyticsDetails</code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.AnalyticsDetails{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_get_analytics_details(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.AnalyticsDetails.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_get_analytics_details(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.AnalyticsDetails{}])
  end

  @doc """
  Lists each FirebaseProject accessible to the caller.
  <br>
  <br>The elements are returned in no particular order, but they will be a
  consistent view of the Projects when additional requests are made with a
  `pageToken`.
  <br>
  <br>This method is eventually consistent with Project mutations, which
  means newly provisioned Projects and recent modifications to existing
  Projects might not be reflected in the set of Projects. The list will
  include only ACTIVE Projects.
  <br>
  <br>Use
  GetFirebaseProject
  for consistent reads as well as for additional Project details.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Projects to return in the response.
          <br>
          <br>The server may return fewer than this at its discretion.
          If no value is specified (or too large a value is specified), the server
          will impose its own limit.
          <br>
          <br>This value cannot be negative.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `ListFirebaseProjects` indicating
          where in the set of Projects to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListFirebaseProjectsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_list(Tesla.Env.client(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListFirebaseProjectsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_list(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/projects", %{})
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListFirebaseProjectsResponse{}]
    )
  end

  @doc """
  Updates the attributes of the FirebaseProject identified by the
  specified resource name.
  <br>
  <br>All [query parameters](#query-parameters) are required.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the Project, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - Specifies which fields to update.
          <br>
          <br>If this list is empty, then no state will be updated.
          <br>Note that the fields `name`, `project_id`, and `project_number` are all
          immutable.
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.FirebaseProject.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.FirebaseProject{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_patch(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.FirebaseProject.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_patch(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.FirebaseProject{}])
  end

  @doc """
  Unlinks the specified `FirebaseProject` from its Google Analytics account.
  <br>
  <br>This call removes the association of the specified `FirebaseProject`
  with its current Google Analytics property. However, this call does not
  delete the Google Analytics resources, such as the Google Analytics
  property or any data streams.
  <br>
  <br>These resources may be re-associated later to the `FirebaseProject` by
  calling
  [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and
  specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps,
  this call re-links data streams with their corresponding apps. However,
  for Web Apps, this call provisions a <em>new</em> data stream for each Web
  App.
  <br>
  <br>To call `RemoveAnalytics`, a member must be an Owner for
  the `FirebaseProject`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent `FirebaseProject` to unlink from its Google Analytics account,
      in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.RemoveAnalyticsRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_remove_analytics(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_remove_analytics(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}:removeAnalytics", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Empty{}])
  end

  @doc """
  A convenience method that lists all available Apps for the specified
  FirebaseProject.
  <br>
  <br>Typically, interaction with an App should be done using the
  platform-specific service, but some tool use-cases require a summary of all
  known Apps (such as for App selector interfaces).

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project for which to list Apps, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Apps to return in the response.
          <br>
          <br>The server may return fewer than this value at its discretion.
          If no value is specified (or too large a value is specified), then the
          server will impose its own limit.
          <br>
          <br>This value cannot be negative.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `SearchFirebaseApps` indicating
          where in the set of Apps to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.SearchFirebaseAppsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_search_apps(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.SearchFirebaseAppsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_search_apps(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}:searchApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.SearchFirebaseAppsResponse{}]
    )
  end

  @doc """
  Requests that a new AndroidApp be created.
  <br>
  <br>The result of this call is an `Operation` which can be used to track
  the provisioning process. The `Operation` is automatically deleted after
  completion, so there is no need to call `DeleteOperation`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project in which to create an App, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.AndroidApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_create(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}/androidApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Gets the AndroidApp identified by the specified resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/androidApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.AndroidApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_get(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.AndroidApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.AndroidApp{}])
  end

  @doc """
  Gets the configuration artifact associated with the specified
  AndroidApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The resource name of the App configuration to download, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/config</code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/androidApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.AndroidAppConfig{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_get_config(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.AndroidAppConfig.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_get_config(
        connection,
        name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.AndroidAppConfig{}])
  end

  @doc """
  Lists each AndroidApp associated with the specified parent Project.
  <br>
  <br>The elements are returned in no particular order, but will be a
  consistent view of the Apps when additional requests are made with a
  `pageToken`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project for which to list Apps, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Apps to return in the response.
          <br>
          <br>The server may return fewer than this at its discretion.
          If no value is specified (or too large a value is specified), then the
          server will impose its own limit.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `ListAndroidApps` indicating where
          in the set of Apps to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListAndroidAppsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListAndroidAppsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_list(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}/androidApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListAndroidAppsResponse{}]
    )
  end

  @doc """
  Updates the attributes of the AndroidApp identified by the specified
  resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - Specifies which fields to update.
          <br>Note that the fields `name`, `appId`, `projectId`, and `packageName`
          are all immutable.
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.AndroidApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.AndroidApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_patch(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.AndroidApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_patch(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.AndroidApp{}])
  end

  @doc """
  Adds a SHA certificate to the specified AndroidApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent App to which a SHA certificate will be added, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/androidApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.ShaCertificate.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ShaCertificate{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_sha_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ShaCertificate.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_sha_create(
        connection,
        parent,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}/sha", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ShaCertificate{}])
  end

  @doc """
  Removes a SHA certificate from the specified AndroidApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the `sha-key`, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var>/sha/<var>shaId</var></code>
      <br>You can obtain the full name from the response of
      [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
      [`CreateShaCertificate`](../projects.androidApps.sha/create).
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_sha_delete(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_sha_delete(
        connection,
        name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Empty{}])
  end

  @doc """
  Returns the list of SHA-1 and SHA-256 certificates for the specified
  AndroidApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent App for which to list SHA certificates, in the format:
      <br><code>projects/<var>projectId</var>/androidApps/<var>appId</var></code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/androidApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListShaCertificatesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_android_apps_sha_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListShaCertificatesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_android_apps_sha_list(
        connection,
        parent,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}/sha", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListShaCertificatesResponse{}]
    )
  end

  @doc """
  Returns a list of valid Google Cloud Platform (GCP) resource locations for
  the specified Project (including a FirebaseProject).
  <br>
  <br>One of these locations can be selected as the Project's [_default_ GCP
  resource location](https://firebase.google.com/docs/projects/locations),
  which is the geographical location where project resources, such as Cloud
  Firestore, will be provisioned by default. However, if the default GCP
  resource location has already been set for the Project, then this setting
  cannot be changed.
  <br>
  <br>This call checks for any possible
  [location
  restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations)
  for the specified Project and, thus, might return a subset of all possible
  GCP resource locations. To list all GCP resource locations (regardless of
  any restrictions), call the endpoint without specifying a `projectId` (that
  is, `/v1beta1/{parent=projects/-}/listAvailableLocations`).
  <br>
  <br>To call `ListAvailableLocations` with a specified project, a member
  must be at minimum a Viewer of the project. Calls without a specified
  project do not require any specific project permissions.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The Project for which to list GCP resource locations, in the format:
      <br><code>projects/<var>projectId</var></code>
      <br>If no project is specified (that is, `projects/-`), the returned list
      does not take into account org-specific or project-specific location
      restrictions.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of locations to return in the response.
          <br>
          <br>The server may return fewer than this value at its discretion.
          If no value is specified (or too large a value is specified), then the
          server will impose its own limit.
          <br>
          <br>This value cannot be negative.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `ListAvailableLocations` indicating
          where in the list of locations to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListAvailableLocationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_available_locations_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListAvailableLocationsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_available_locations_list(
        connection,
        parent,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}/availableLocations", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListAvailableLocationsResponse{}]
    )
  end

  @doc """
  Sets the default Google Cloud Platform (GCP) resource location for the
  specified FirebaseProject.
  <br>
  <br>This method creates an App Engine application with a
  [default Cloud Storage
  bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket),
  located in the specified
  [`location_id`](#body.request_body.FIELDS.location_id).
  This location must be one of the available
  [GCP resource
  locations](https://firebase.google.com/docs/projects/locations). <br>
  <br>After the default GCP resource location is finalized, or if it was
  already set, it cannot be changed. The default GCP resource location for
  the specified FirebaseProject might already be set because either the
  GCP `Project` already has an App Engine application or
  `FinalizeDefaultLocation` was previously called with a specified
  `location_id`. Any new calls to `FinalizeDefaultLocation` with a
  <em>different</em> specified `location_id` will return a 409 error.
  <br>
  <br>The result of this call is an [`Operation`](../../v1beta1/operations),
  which can be used to track the provisioning process. The
  [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of
  the `Operation` is google.protobuf.Empty.
  <br>
  <br>The `Operation` can be polled by its `name` using
  GetOperation until `done` is
  true. When `done` is true, the `Operation` has either succeeded or failed.
  If the `Operation` has succeeded, its
  [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be
  set to a google.protobuf.Empty; if the `Operation` has failed, its
  `error` will be set to a google.rpc.Status. The `Operation` is
  automatically deleted after completion, so there is no need to call
  DeleteOperation.
  <br>
  <br>All fields listed in the [request body](#request-body) are required.
  <br>
  <br>To call `FinalizeDefaultLocation`, a member must be an Owner
  of the project.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The resource name of the Project for which the default GCP resource
      location will be set, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.FinalizeDefaultLocationRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_default_location_finalize(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_default_location_finalize(
        connection,
        parent,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}/defaultLocation:finalize", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Requests that a new IosApp be created.
  <br>
  <br>The result of this call is an `Operation` which can be used to track
  the provisioning process. The `Operation` is automatically deleted after
  completion, so there is no need to call `DeleteOperation`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project in which to create an App, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.IosApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_ios_apps_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_ios_apps_create(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}/iosApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Gets the IosApp identified by the specified resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, in the format:
      <code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/iosApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.IosApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_ios_apps_get(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.IosApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_ios_apps_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.IosApp{}])
  end

  @doc """
  Gets the configuration artifact associated with the specified IosApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The resource name of the App configuration to download, in the format:
      <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var>/config</code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/iosApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.IosAppConfig{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_ios_apps_get_config(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.IosAppConfig.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_ios_apps_get_config(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.IosAppConfig{}])
  end

  @doc """
  Lists each IosApp associated with the specified parent Project.
  <br>
  <br>The elements are returned in no particular order, but will be a
  consistent view of the Apps when additional requests are made with a
  `pageToken`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project for which to list Apps, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Apps to return in the response.
          <br>
          <br>The server may return fewer than this at its discretion.
          If no value is specified (or too large a value is specified), the server
          will impose its own limit.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `ListIosApps` indicating where in
          the set of Apps to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListIosAppsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_ios_apps_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListIosAppsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_ios_apps_list(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}/iosApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListIosAppsResponse{}])
  end

  @doc """
  Updates the attributes of the IosApp identified by the specified
  resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, in the format:
      <br><code>projects/<var>projectId</var>/iosApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - Specifies which fields to update.
          <br>Note that the fields `name`, `appId`, `projectId`, and `bundleId`
          are all immutable.
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.IosApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.IosApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_ios_apps_patch(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.IosApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_ios_apps_patch(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.IosApp{}])
  end

  @doc """
  Requests that a new WebApp be created.
  <br>
  <br>The result of this call is an `Operation` which can be used to track
  the provisioning process. The `Operation` is automatically deleted after
  completion, so there is no need to call `DeleteOperation`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project in which to create an App, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.WebApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_web_apps_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.Operation.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_web_apps_create(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/{+parent}/webApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.Operation{}])
  end

  @doc """
  Gets the WebApp identified by the specified resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, in the format:
      <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/webApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.WebApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_web_apps_get(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.WebApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_web_apps_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.WebApp{}])
  end

  @doc """
  Gets the configuration artifact associated with the specified WebApp.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The resource name of the App configuration to download, in the format:
      <br><code>projects/<var>projectId</var>/webApps/<var>appId</var>/config</code>
      <br>As an <var>appId</var> is a unique identifier, the Unique Resource
      from Sub-Collection access pattern may be used here, in the format:
      <br><code>projects/-/webApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.WebAppConfig{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_web_apps_get_config(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.WebAppConfig.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_web_apps_get_config(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.WebAppConfig{}])
  end

  @doc """
  Lists each WebApp associated with the specified parent Project.
  <br>
  <br>The elements are returned in no particular order, but will be a
  consistent view of the Apps when additional requests are made with a
  `pageToken`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - The parent Project for which to list Apps, in the format:
      <br><code>projects/<var>projectId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Apps to return in the response.
          <br>
          <br>The server may return fewer than this value at its discretion.
          If no value is specified (or too large a value is specified), then the
          server will impose its own limit.
      *   `:pageToken` (*type:* `String.t`) - Token returned from a previous call to `ListWebApps` indicating where in
          the set of Apps to resume listing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.ListWebAppsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_web_apps_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.ListWebAppsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_web_apps_list(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+parent}/webApps", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.ListWebAppsResponse{}])
  end

  @doc """
  Updates the attributes of the WebApp identified by the specified
  resource name.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Firebase.V1beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The fully qualified resource name of the App, for example:
      <br><code>projects/<var>projectId</var>/webApps/<var>appId</var></code>
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:updateMask` (*type:* `String.t`) - Specifies which fields to update.
          <br>Note that the fields `name`, `appId`, and `projectId` are all
          immutable.
      *   `:body` (*type:* `GoogleApi.Firebase.V1beta1.Model.WebApp.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Firebase.V1beta1.Model.WebApp{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebase_projects_web_apps_patch(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Firebase.V1beta1.Model.WebApp.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, Tesla.Env.t()}
  def firebase_projects_web_apps_patch(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :updateMask => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:patch)
      |> Request.url("/v1beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Firebase.V1beta1.Model.WebApp{}])
  end
end
