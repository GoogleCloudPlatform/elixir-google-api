# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firebase.V1beta1.Model.TypedMessage do
  @moduledoc """
  Message that groups a protocol type_id (as defined by MessageSet),
  with an encoded message of that type.  Its use is similar to
  MessageSet, except it represents a single (type, encoded message)
  instead of a set.

  To fill for known protocol type:
    MyProtocolMsg proto;
    TypedMessage typed_msg;
    typed_msg.set_type_id(MyProtocolMsg::MESSAGE_TYPE_ID);
    proto.AppendToCord(typed_msg.mutable_message());

  To fill for unknown protocol type:
    ProtocolMessage proto;
    TypedMessage typed_msg;
    typed_msg.set_type_id(proto.GetMapper()->type_id());
    proto.AppendToCord(typed_msg.mutable_message());

  ## Attributes

  *   `message` (*type:* `String.t`, *default:* `nil`) - Message bytes.
  *   `typeId` (*type:* `integer()`, *default:* `nil`) - Identifier for the type.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :message => String.t(),
          :typeId => integer()
        }

  field(:message)
  field(:typeId)
end

defimpl Poison.Decoder, for: GoogleApi.Firebase.V1beta1.Model.TypedMessage do
  def decode(value, options) do
    GoogleApi.Firebase.V1beta1.Model.TypedMessage.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firebase.V1beta1.Model.TypedMessage do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
