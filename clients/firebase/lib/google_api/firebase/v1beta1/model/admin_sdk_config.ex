# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig do
  @moduledoc """


  ## Attributes

  *   `databaseURL` (*type:* `String.t`, *default:* `nil`) - The default Firebase Realtime Database URL.
  *   `locationId` (*type:* `String.t`, *default:* `nil`) - The ID of the project's default GCP resource location. The location is one
      of the available
      [GCP resource
      locations](https://firebase.google.com/docs/projects/locations). <br>
      <br>This field is omitted if the default GCP resource location has not been
      finalized yet. To set your project's default GCP resource location,
      call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize)
      after you add Firebase services to your project.
  *   `projectId` (*type:* `String.t`, *default:* `nil`) - Immutable. The globally unique, user-assigned project ID of the parent
      Project.
  *   `storageBucket` (*type:* `String.t`, *default:* `nil`) - The default Cloud Storage for Firebase storage bucket name.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :databaseURL => String.t(),
          :locationId => String.t(),
          :projectId => String.t(),
          :storageBucket => String.t()
        }

  field(:databaseURL)
  field(:locationId)
  field(:projectId)
  field(:storageBucket)
end

defimpl Poison.Decoder, for: GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig do
  def decode(value, options) do
    GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firebase.V1beta1.Model.AdminSdkConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
