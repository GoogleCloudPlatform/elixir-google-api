# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Genomics.V1.Model.Exon do
  @moduledoc """


  ## Attributes

  - end (String.t): The end position of the exon on this annotation&#39;s reference sequence, 0-based exclusive. Note that this is relative to the reference start, and *not* the containing annotation start. Defaults to: `null`.
  - frame (integer()): The frame of this exon. Contains a value of 0, 1, or 2, which indicates the offset of the first coding base of the exon within the reading frame of the coding DNA sequence, if any. This field is dependent on the strandedness of this annotation (see Annotation.reverse_strand). For forward stranded annotations, this offset is relative to the exon.start. For reverse strand annotations, this offset is relative to the exon.end &#x60;- 1&#x60;.  Unset if this exon does not intersect the coding sequence. Upon creation of a transcript, the frame must be populated for all or none of the coding exons. Defaults to: `null`.
  - start (String.t): The start position of the exon on this annotation&#39;s reference sequence, 0-based inclusive. Note that this is relative to the reference start, and **not** the containing annotation start. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :end => any(),
          :frame => any(),
          :start => any()
        }

  field(:end)
  field(:frame)
  field(:start)
end

defimpl Poison.Decoder, for: GoogleApi.Genomics.V1.Model.Exon do
  def decode(value, options) do
    GoogleApi.Genomics.V1.Model.Exon.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Genomics.V1.Model.Exon do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
