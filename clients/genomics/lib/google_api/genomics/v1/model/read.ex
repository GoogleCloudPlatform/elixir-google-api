# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Genomics.V1.Model.Read do
  @moduledoc """
  A read alignment describes a linear alignment of a string of DNA to a reference sequence, in addition to metadata about the fragment (the molecule of DNA sequenced) and the read (the bases which were read by the sequencer). A read is equivalent to a line in a SAM file. A read belongs to exactly one read group and exactly one read group set.  For more genomics resource definitions, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)  ### Reverse-stranded reads  Mapped reads (reads having a non-null &#x60;alignment&#x60;) can be aligned to either the forward or the reverse strand of their associated reference. Strandedness of a mapped read is encoded by &#x60;alignment.position.reverseStrand&#x60;.  If we consider the reference to be a forward-stranded coordinate space of &#x60;[0, reference.length)&#x60; with &#x60;0&#x60; as the left-most position and &#x60;reference.length&#x60; as the right-most position, reads are always aligned left to right. That is, &#x60;alignment.position.position&#x60; always refers to the left-most reference coordinate and &#x60;alignment.cigar&#x60; describes the alignment of this read to the reference from left to right. All per-base fields such as &#x60;alignedSequence&#x60; and &#x60;alignedQuality&#x60; share this same left-to-right orientation; this is true of reads which are aligned to either strand. For reverse-stranded reads, this means that &#x60;alignedSequence&#x60; is the reverse complement of the bases that were originally reported by the sequencing machine.  ### Generating a reference-aligned sequence string  When interacting with mapped reads, it&#39;s often useful to produce a string representing the local alignment of the read to reference. The following pseudocode demonstrates one way of doing this:      out &#x3D; \&quot;\&quot;     offset &#x3D; 0     for c in read.alignment.cigar {       switch c.operation {       case \&quot;ALIGNMENT_MATCH\&quot;, \&quot;SEQUENCE_MATCH\&quot;, \&quot;SEQUENCE_MISMATCH\&quot;:         out +&#x3D; read.alignedSequence[offset:offset+c.operationLength]         offset +&#x3D; c.operationLength         break       case \&quot;CLIP_SOFT\&quot;, \&quot;INSERT\&quot;:         offset +&#x3D; c.operationLength         break       case \&quot;PAD\&quot;:         out +&#x3D; repeat(\&quot;*\&quot;, c.operationLength)         break       case \&quot;DELETE\&quot;:         out +&#x3D; repeat(\&quot;-\&quot;, c.operationLength)         break       case \&quot;SKIP\&quot;:         out +&#x3D; repeat(\&quot; \&quot;, c.operationLength)         break       case \&quot;CLIP_HARD\&quot;:         break       }     }     return out  ### Converting to SAM&#39;s CIGAR string  The following pseudocode generates a SAM CIGAR string from the &#x60;cigar&#x60; field. Note that this is a lossy conversion (&#x60;cigar.referenceSequence&#x60; is lost).      cigarMap &#x3D; {       \&quot;ALIGNMENT_MATCH\&quot;: \&quot;M\&quot;,       \&quot;INSERT\&quot;: \&quot;I\&quot;,       \&quot;DELETE\&quot;: \&quot;D\&quot;,       \&quot;SKIP\&quot;: \&quot;N\&quot;,       \&quot;CLIP_SOFT\&quot;: \&quot;S\&quot;,       \&quot;CLIP_HARD\&quot;: \&quot;H\&quot;,       \&quot;PAD\&quot;: \&quot;P\&quot;,       \&quot;SEQUENCE_MATCH\&quot;: \&quot;&#x3D;\&quot;,       \&quot;SEQUENCE_MISMATCH\&quot;: \&quot;X\&quot;,     }     cigarStr &#x3D; \&quot;\&quot;     for c in read.alignment.cigar {       cigarStr +&#x3D; c.operationLength + cigarMap[c.operation]     }     return cigarStr

  ## Attributes

  - info (Map[String, List[ErrorUnknown]]): A map of additional read alignment information. This must be of the form map&lt;string, string[]&gt; (string key mapping to a list of string values). Defaults to: `null`.
  - alignedQuality (List[Integer]): The quality of the read sequence contained in this alignment record (equivalent to QUAL in SAM). &#x60;alignedSequence&#x60; and &#x60;alignedQuality&#x60; may be shorter than the full read sequence and quality. This will occur if the alignment is part of a chimeric alignment, or if the read was trimmed. When this occurs, the CIGAR for this read will begin/end with a hard clip operator that will indicate the length of the excised sequence. Defaults to: `null`.
  - alignedSequence (String): The bases of the read sequence contained in this alignment record, **without CIGAR operations applied** (equivalent to SEQ in SAM). &#x60;alignedSequence&#x60; and &#x60;alignedQuality&#x60; may be shorter than the full read sequence and quality. This will occur if the alignment is part of a chimeric alignment, or if the read was trimmed. When this occurs, the CIGAR for this read will begin/end with a hard clip operator that will indicate the length of the excised sequence. Defaults to: `null`.
  - alignment (LinearAlignment): The linear alignment for this alignment record. This field is null for unmapped reads. Defaults to: `null`.
  - duplicateFragment (Boolean): The fragment is a PCR or optical duplicate (SAM flag 0x400). Defaults to: `null`.
  - failedVendorQualityChecks (Boolean): Whether this read did not pass filters, such as platform or vendor quality controls (SAM flag 0x200). Defaults to: `null`.
  - fragmentLength (Integer): The observed length of the fragment, equivalent to TLEN in SAM. Defaults to: `null`.
  - fragmentName (String): The fragment name. Equivalent to QNAME (query template name) in SAM. Defaults to: `null`.
  - id (String): The server-generated read ID, unique across all reads. This is different from the &#x60;fragmentName&#x60;. Defaults to: `null`.
  - nextMatePosition (Position): The mapping of the primary alignment of the &#x60;(readNumber+1)%numberReads&#x60; read in the fragment. It replaces mate position and mate strand in SAM. Defaults to: `null`.
  - numberReads (Integer): The number of reads in the fragment (extension to SAM flag 0x1). Defaults to: `null`.
  - properPlacement (Boolean): The orientation and the distance between reads from the fragment are consistent with the sequencing protocol (SAM flag 0x2). Defaults to: `null`.
  - readGroupId (String): The ID of the read group this read belongs to. A read belongs to exactly one read group. This is a server-generated ID which is distinct from SAM&#39;s RG tag (for that value, see ReadGroup.name). Defaults to: `null`.
  - readGroupSetId (String): The ID of the read group set this read belongs to. A read belongs to exactly one read group set. Defaults to: `null`.
  - readNumber (Integer): The read number in sequencing. 0-based and less than numberReads. This field replaces SAM flag 0x40 and 0x80. Defaults to: `null`.
  - secondaryAlignment (Boolean): Whether this alignment is secondary. Equivalent to SAM flag 0x100. A secondary alignment represents an alternative to the primary alignment for this read. Aligners may return secondary alignments if a read can map ambiguously to multiple coordinates in the genome. By convention, each read has one and only one alignment where both &#x60;secondaryAlignment&#x60; and &#x60;supplementaryAlignment&#x60; are false. Defaults to: `null`.
  - supplementaryAlignment (Boolean): Whether this alignment is supplementary. Equivalent to SAM flag 0x800. Supplementary alignments are used in the representation of a chimeric alignment. In a chimeric alignment, a read is split into multiple linear alignments that map to different reference contigs. The first linear alignment in the read will be designated as the representative alignment; the remaining linear alignments will be designated as supplementary alignments. These alignments may have different mapping quality scores. In each linear alignment in a chimeric alignment, the read will be hard clipped. The &#x60;alignedSequence&#x60; and &#x60;alignedQuality&#x60; fields in the alignment record will only represent the bases for its respective linear alignment. Defaults to: `null`.
  """

  defstruct [
    :"info",
    :"alignedQuality",
    :"alignedSequence",
    :"alignment",
    :"duplicateFragment",
    :"failedVendorQualityChecks",
    :"fragmentLength",
    :"fragmentName",
    :"id",
    :"nextMatePosition",
    :"numberReads",
    :"properPlacement",
    :"readGroupId",
    :"readGroupSetId",
    :"readNumber",
    :"secondaryAlignment",
    :"supplementaryAlignment"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Genomics.V1.Model.Read do
  import GoogleApi.Genomics.V1.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"alignment", :struct, GoogleApi.Genomics.V1.Model.LinearAlignment, options)
    |> deserialize(:"nextMatePosition", :struct, GoogleApi.Genomics.V1.Model.Position, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Genomics.V1.Model.Read do
  def encode(value, options) do
    GoogleApi.Genomics.V1.Deserializer.serialize_non_nil(value, options)
  end
end

