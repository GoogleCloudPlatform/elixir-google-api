# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Genomics.V1.Api.References do
  @moduledoc """
  API calls for all endpoints tagged `References`.
  """

  alias GoogleApi.Genomics.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Lists the bases in a reference, optionally restricted to a range.  Implements [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - reference_id (String.t): The ID of the reference.
  - opts (KeywordList): [optional] Optional parameters
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of &#x60;nextPageToken&#x60; from the previous response.
    - :pageSize (integer()): The maximum number of bases to return in a single page. If unspecified, defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base pairs).
    - :start (String.t): The start position (0-based) of this query. Defaults to 0.
    - :end (String.t): The end position (0-based, exclusive) of this query. Defaults to the length of this reference.

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.ListBasesResponse{}} on success
  {:error, info} on failure
  """
  @spec genomics_references_bases_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.ListBasesResponse.t()} | {:error, Tesla.Env.t()}
  def genomics_references_bases_list(connection, reference_id, opts \\ []) do
    optional_params = %{
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :pageToken => :query,
      :pageSize => :query,
      :start => :query,
      :end => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/references/{referenceId}/bases", %{
        "referenceId" => URI.encode_www_form(reference_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.Genomics.V1.Model.ListBasesResponse{})
  end

  @doc """
  Gets a reference.  Implements [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - reference_id (String.t): The ID of the reference.
  - opts (KeywordList): [optional] Optional parameters
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.Reference{}} on success
  {:error, info} on failure
  """
  @spec genomics_references_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.Reference.t()} | {:error, Tesla.Env.t()}
  def genomics_references_get(connection, reference_id, opts \\ []) do
    optional_params = %{
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/references/{referenceId}", %{
        "referenceId" => URI.encode_www_form(reference_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.Genomics.V1.Model.Reference{})
  end

  @doc """
  Searches for references which match the given criteria.  Implements [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).

  ## Parameters

  - connection (GoogleApi.Genomics.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (SearchReferencesRequest): 

  ## Returns

  {:ok, %GoogleApi.Genomics.V1.Model.SearchReferencesResponse{}} on success
  {:error, info} on failure
  """
  @spec genomics_references_search(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Genomics.V1.Model.SearchReferencesResponse.t()}
          | {:error, Tesla.Env.t()}
  def genomics_references_search(connection, opts \\ []) do
    optional_params = %{
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/references/search")
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.Genomics.V1.Model.SearchReferencesResponse{})
  end
end
