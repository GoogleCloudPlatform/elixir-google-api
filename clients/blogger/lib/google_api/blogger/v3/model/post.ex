# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Blogger.V3.Model.Post do
  @moduledoc """


  ## Attributes

  - author (GoogleApi.Blogger.V3.Model.PostAuthor.t): The author of this Post. Defaults to `nil`.
  - blog (GoogleApi.Blogger.V3.Model.PostBlog.t): Data about the blog containing this Post. Defaults to `nil`.
  - content (String.t): The content of the Post. May contain HTML markup. Defaults to `nil`.
  - customMetaData (String.t): The JSON meta-data for the Post. Defaults to `nil`.
  - etag (String.t): Etag of the resource. Defaults to `nil`.
  - id (String.t): The identifier of this Post. Defaults to `nil`.
  - images (list(GoogleApi.Blogger.V3.Model.PostImages.t)): Display image for the Post. Defaults to `nil`.
  - kind (String.t): The kind of this entity. Always blogger#post Defaults to `blogger#post`.
  - labels (list(String.t)): The list of labels this Post was tagged with. Defaults to `nil`.
  - location (GoogleApi.Blogger.V3.Model.PostLocation.t): The location for geotagged posts. Defaults to `nil`.
  - published (DateTime.t): RFC 3339 date-time when this Post was published. Defaults to `nil`.
  - readerComments (String.t): Comment control and display setting for readers of this post. Defaults to `nil`.
  - replies (GoogleApi.Blogger.V3.Model.PostReplies.t): The container of comments on this Post. Defaults to `nil`.
  - selfLink (String.t): The API REST URL to fetch this resource from. Defaults to `nil`.
  - status (String.t): Status of the post. Only set for admin-level requests Defaults to `nil`.
  - title (String.t): The title of the Post. Defaults to `nil`.
  - titleLink (String.t): The title link URL, similar to atom's related link. Defaults to `nil`.
  - updated (DateTime.t): RFC 3339 date-time when this Post was last updated. Defaults to `nil`.
  - url (String.t): The URL where this Post is displayed. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :author => GoogleApi.Blogger.V3.Model.PostAuthor.t(),
          :blog => GoogleApi.Blogger.V3.Model.PostBlog.t(),
          :content => String.t(),
          :customMetaData => String.t(),
          :etag => String.t(),
          :id => String.t(),
          :images => list(GoogleApi.Blogger.V3.Model.PostImages.t()),
          :kind => String.t(),
          :labels => list(String.t()),
          :location => GoogleApi.Blogger.V3.Model.PostLocation.t(),
          :published => DateTime.t(),
          :readerComments => String.t(),
          :replies => GoogleApi.Blogger.V3.Model.PostReplies.t(),
          :selfLink => String.t(),
          :status => String.t(),
          :title => String.t(),
          :titleLink => String.t(),
          :updated => DateTime.t(),
          :url => String.t()
        }

  field(:author, as: GoogleApi.Blogger.V3.Model.PostAuthor)
  field(:blog, as: GoogleApi.Blogger.V3.Model.PostBlog)
  field(:content)
  field(:customMetaData)
  field(:etag)
  field(:id)
  field(:images, as: GoogleApi.Blogger.V3.Model.PostImages, type: :list)
  field(:kind)
  field(:labels, type: :list)
  field(:location, as: GoogleApi.Blogger.V3.Model.PostLocation)
  field(:published, as: DateTime)
  field(:readerComments)
  field(:replies, as: GoogleApi.Blogger.V3.Model.PostReplies)
  field(:selfLink)
  field(:status)
  field(:title)
  field(:titleLink)
  field(:updated, as: DateTime)
  field(:url)
end

defimpl Poison.Decoder, for: GoogleApi.Blogger.V3.Model.Post do
  def decode(value, options) do
    GoogleApi.Blogger.V3.Model.Post.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Blogger.V3.Model.Post do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
