# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.HealthCare.V1beta1.Model.AnnotationConfig do
  @moduledoc """
  Specifies how to store annotations during de-identification operation.

  ## Attributes

  *   `annotationStoreName` (*type:* `String.t`, *default:* `nil`) - The name of the annotation store, in the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`). * The destination annotation store must be in the same project as the source data. De-identifying data across multiple projects is not supported. * The destination annotation store must exist when using DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset automatically creates the destination annotation store.
  *   `storeQuote` (*type:* `boolean()`, *default:* `nil`) - If set to true, the sensitive texts are included in SensitiveTextAnnotation of Annotation.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotationStoreName => String.t() | nil,
          :storeQuote => boolean() | nil
        }

  field(:annotationStoreName)
  field(:storeQuote)
end

defimpl Poison.Decoder, for: GoogleApi.HealthCare.V1beta1.Model.AnnotationConfig do
  def decode(value, options) do
    GoogleApi.HealthCare.V1beta1.Model.AnnotationConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.HealthCare.V1beta1.Model.AnnotationConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
