# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.RealTimeBidding.V1.Model.HttpCookieEvidence do
  @moduledoc """
  Evidence for HTTP cookie-related policy violations.

  ## Attributes

  *   `cookieNames` (*type:* `list(String.t)`, *default:* `nil`) - Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.
  *   `maxCookieCount` (*type:* `integer()`, *default:* `nil`) - The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cookieNames => list(String.t()) | nil,
          :maxCookieCount => integer() | nil
        }

  field(:cookieNames, type: :list)
  field(:maxCookieCount)
end

defimpl Poison.Decoder, for: GoogleApi.RealTimeBidding.V1.Model.HttpCookieEvidence do
  def decode(value, options) do
    GoogleApi.RealTimeBidding.V1.Model.HttpCookieEvidence.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.RealTimeBidding.V1.Model.HttpCookieEvidence do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
