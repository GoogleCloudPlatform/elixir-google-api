# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.OAuth2.V2.Model.Tokeninfo do
  @moduledoc """


  ## Attributes

  - access_type (String.t): The access type granted with this token. It can be offline or online. Defaults to: `null`.
  - audience (String.t): Who is the intended audience for this token. In general the same as issued_to. Defaults to: `null`.
  - email (String.t): The email address of the user. Present only if the email scope is present in the request. Defaults to: `null`.
  - expires_in (integer()): The expiry time of the token, as number of seconds left until expiry. Defaults to: `null`.
  - issued_to (String.t): To whom was the token issued to. In general the same as audience. Defaults to: `null`.
  - scope (String.t): The space separated list of scopes granted to this token. Defaults to: `null`.
  - token_handle (String.t): The token handle associated with this token. Defaults to: `null`.
  - user_id (String.t): The obfuscated user id. Defaults to: `null`.
  - verified_email (boolean()): Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :access_type => any(),
          :audience => any(),
          :email => any(),
          :expires_in => any(),
          :issued_to => any(),
          :scope => any(),
          :token_handle => any(),
          :user_id => any(),
          :verified_email => any()
        }

  field(:access_type)
  field(:audience)
  field(:email)
  field(:expires_in)
  field(:issued_to)
  field(:scope)
  field(:token_handle)
  field(:user_id)
  field(:verified_email)
end

defimpl Poison.Decoder, for: GoogleApi.OAuth2.V2.Model.Tokeninfo do
  def decode(value, options) do
    GoogleApi.OAuth2.V2.Model.Tokeninfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.OAuth2.V2.Model.Tokeninfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
