# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudDebugger.V2.Api.Debugger do
  @moduledoc """
  API calls for all endpoints tagged `Debugger`.
  """

  alias GoogleApi.CloudDebugger.V2.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Deletes the breakpoint from the debuggee.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String.t): ID of the debuggee whose breakpoint to delete.
  - breakpoint_id (String.t): ID of the breakpoint to delete.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :clientVersion (String.t): The client version making the call. Schema: &#x60;domain/type/version&#x60; (e.g., &#x60;google.com/intellij/v1&#x60;).

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_debugger_debuggees_breakpoints_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudDebugger.V2.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def clouddebugger_debugger_debuggees_breakpoints_delete(
        connection,
        debuggee_id,
        breakpoint_id,
        opts \\ []
      ) do
    optional_params = %{
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :clientVersion => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}", %{
        "debuggeeId" => URI.encode_www_form(debuggee_id),
        "breakpointId" => URI.encode_www_form(breakpoint_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudDebugger.V2.Model.Empty{})
  end

  @doc """
  Gets breakpoint information.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String.t): ID of the debuggee whose breakpoint to get.
  - breakpoint_id (String.t): ID of the breakpoint to get.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :clientVersion (String.t): The client version making the call. Schema: &#x60;domain/type/version&#x60; (e.g., &#x60;google.com/intellij/v1&#x60;).

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.GetBreakpointResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_debugger_debuggees_breakpoints_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudDebugger.V2.Model.GetBreakpointResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouddebugger_debugger_debuggees_breakpoints_get(
        connection,
        debuggee_id,
        breakpoint_id,
        opts \\ []
      ) do
    optional_params = %{
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :clientVersion => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}", %{
        "debuggeeId" => URI.encode_www_form(debuggee_id),
        "breakpointId" => URI.encode_www_form(breakpoint_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudDebugger.V2.Model.GetBreakpointResponse{})
  end

  @doc """
  Lists all breakpoints for the debuggee.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String.t): ID of the debuggee whose breakpoints to list.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :waitToken (String.t): A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired.  The value should be set from the last response. The error code &#x60;google.rpc.Code.ABORTED&#x60; (RPC) is returned on wait timeout, which should be called again with the same &#x60;wait_token&#x60;.
    - :clientVersion (String.t): The client version making the call. Schema: &#x60;domain/type/version&#x60; (e.g., &#x60;google.com/intellij/v1&#x60;).
    - :action.value (String.t): Only breakpoints with the specified action will pass the filter.
    - :includeInactive (boolean()): When set to &#x60;true&#x60;, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.
    - :includeAllUsers (boolean()): When set to &#x60;true&#x60;, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.
    - :stripResults (boolean()): This field is deprecated. The following fields are always stripped out of the result: &#x60;stack_frames&#x60;, &#x60;evaluated_expressions&#x60; and &#x60;variable_table&#x60;.

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.ListBreakpointsResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_debugger_debuggees_breakpoints_list(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudDebugger.V2.Model.ListBreakpointsResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouddebugger_debugger_debuggees_breakpoints_list(connection, debuggee_id, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :waitToken => :query,
      :clientVersion => :query,
      :"action.value" => :query,
      :includeInactive => :query,
      :includeAllUsers => :query,
      :stripResults => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2/debugger/debuggees/{debuggeeId}/breakpoints", %{
        "debuggeeId" => URI.encode_www_form(debuggee_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudDebugger.V2.Model.ListBreakpointsResponse{})
  end

  @doc """
  Sets the breakpoint to the debuggee.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String.t): ID of the debuggee where the breakpoint is to be set.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :clientVersion (String.t): The client version making the call. Schema: &#x60;domain/type/version&#x60; (e.g., &#x60;google.com/intellij/v1&#x60;).
    - :body (Breakpoint): 

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.SetBreakpointResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_debugger_debuggees_breakpoints_set(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudDebugger.V2.Model.SetBreakpointResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouddebugger_debugger_debuggees_breakpoints_set(connection, debuggee_id, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :clientVersion => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2/debugger/debuggees/{debuggeeId}/breakpoints/set", %{
        "debuggeeId" => URI.encode_www_form(debuggee_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudDebugger.V2.Model.SetBreakpointResponse{})
  end

  @doc """
  Lists all the debuggees that the user has access to.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :clientVersion (String.t): The client version making the call. Schema: &#x60;domain/type/version&#x60; (e.g., &#x60;google.com/intellij/v1&#x60;).
    - :includeInactive (boolean()): When set to &#x60;true&#x60;, the result includes all debuggees. Otherwise, the result includes only debuggees that are active.
    - :project (String.t): Project number of a Google Cloud project whose debuggees to list.

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.ListDebuggeesResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_debugger_debuggees_list(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.CloudDebugger.V2.Model.ListDebuggeesResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouddebugger_debugger_debuggees_list(connection, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :clientVersion => :query,
      :includeInactive => :query,
      :project => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2/debugger/debuggees")
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.CloudDebugger.V2.Model.ListDebuggeesResponse{})
  end
end
