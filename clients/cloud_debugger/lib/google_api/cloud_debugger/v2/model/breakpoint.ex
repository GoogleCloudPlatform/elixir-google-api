# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudDebugger.V2.Model.Breakpoint do
  @moduledoc """
  Represents the breakpoint specification, status and results.

  ## Attributes

  - action (String.t): Action that the agent should perform when the code at the breakpoint location is hit. Defaults to: `null`.
    - Enum - one of [CAPTURE, LOG]
  - condition (String.t): Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location. Defaults to: `null`.
  - createTime (DateTime.t): Time this breakpoint was created by the server in seconds resolution. Defaults to: `null`.
  - evaluatedExpressions ([Variable]): Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the &#x60;expressions&#x60; field. The &#x60;name&#x60; field holds the original expression text, the &#x60;value&#x60; or &#x60;members&#x60; field holds the result of the evaluated expression. If the expression cannot be evaluated, the &#x60;status&#x60; inside the &#x60;Variable&#x60; will indicate an error and contain the error text. Defaults to: `null`.
  - expressions ([String.t]): List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is &#x60;LOG&#x60;, the evaluated expressions are included in log statements. Defaults to: `null`.
  - finalTime (DateTime.t): Time this breakpoint was finalized as seen by the server in seconds resolution. Defaults to: `null`.
  - id (String.t): Breakpoint identifier, unique in the scope of the debuggee. Defaults to: `null`.
  - isFinalState (boolean()): When true, indicates that this is a final result and the breakpoint state will not change from here on. Defaults to: `null`.
  - labels (%{optional(String.t) &#x3D;&gt; String.t}): A set of custom breakpoint properties, populated by the agent, to be displayed to the user. Defaults to: `null`.
  - location (SourceLocation): Breakpoint source location. Defaults to: `null`.
  - logLevel (String.t): Indicates the severity of the log. Only relevant when action is &#x60;LOG&#x60;. Defaults to: `null`.
    - Enum - one of [INFO, WARNING, ERROR]
  - logMessageFormat (String.t): Only relevant when action is &#x60;LOG&#x60;. Defines the message to log when the breakpoint hits. The message may include parameter placeholders &#x60;$0&#x60;, &#x60;$1&#x60;, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in &#x60;log_message_format&#x60; are not logged.  Example: &#x60;Message received, id &#x3D; $0, count &#x3D; $1&#x60; with &#x60;expressions&#x60; &#x3D; &#x60;[ message.id, message.count ]&#x60;. Defaults to: `null`.
  - stackFrames ([StackFrame]): The stack at breakpoint time, where stack_frames[0] represents the most recently entered function. Defaults to: `null`.
  - status (StatusMessage): Breakpoint status.  The status includes an error flag and a human readable message. This field is usually unset. The message can be either informational or an error message. Regardless, clients should always display the text message back to the user.  Error status indicates complete failure of the breakpoint.  Example (non-final state): &#x60;Still loading symbols...&#x60;  Examples (final state):  *   &#x60;Invalid line number&#x60; referring to location *   &#x60;Field f not found in class C&#x60; referring to condition Defaults to: `null`.
  - userEmail (String.t): E-mail address of the user that created this breakpoint Defaults to: `null`.
  - variableTable ([Variable]): The &#x60;variable_table&#x60; exists to aid with computation, memory and network traffic optimization.  It enables storing a variable once and reference it from multiple variables, including variables stored in the &#x60;variable_table&#x60; itself. For example, the same &#x60;this&#x60; object, which may appear at many levels of the stack, can have all of its data stored once in this table.  The stack frame variables then would hold only a reference to it.  The variable &#x60;var_table_index&#x60; field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => any(),
          :condition => any(),
          :createTime => DateTime.t(),
          :evaluatedExpressions => list(GoogleApi.CloudDebugger.V2.Model.Variable.t()),
          :expressions => list(any()),
          :finalTime => DateTime.t(),
          :id => any(),
          :isFinalState => any(),
          :labels => map(),
          :location => GoogleApi.CloudDebugger.V2.Model.SourceLocation.t(),
          :logLevel => any(),
          :logMessageFormat => any(),
          :stackFrames => list(GoogleApi.CloudDebugger.V2.Model.StackFrame.t()),
          :status => GoogleApi.CloudDebugger.V2.Model.StatusMessage.t(),
          :userEmail => any(),
          :variableTable => list(GoogleApi.CloudDebugger.V2.Model.Variable.t())
        }

  field(:action)
  field(:condition)
  field(:createTime, as: DateTime)
  field(:evaluatedExpressions, as: GoogleApi.CloudDebugger.V2.Model.Variable, type: :list)
  field(:expressions, type: :list)
  field(:finalTime, as: DateTime)
  field(:id)
  field(:isFinalState)
  field(:labels, type: :map)
  field(:location, as: GoogleApi.CloudDebugger.V2.Model.SourceLocation)
  field(:logLevel)
  field(:logMessageFormat)
  field(:stackFrames, as: GoogleApi.CloudDebugger.V2.Model.StackFrame, type: :list)
  field(:status, as: GoogleApi.CloudDebugger.V2.Model.StatusMessage)
  field(:userEmail)
  field(:variableTable, as: GoogleApi.CloudDebugger.V2.Model.Variable, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.CloudDebugger.V2.Model.Breakpoint do
  def decode(value, options) do
    GoogleApi.CloudDebugger.V2.Model.Breakpoint.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudDebugger.V2.Model.Breakpoint do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
