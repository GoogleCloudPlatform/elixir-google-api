# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.AndroidDeviceProvisioning.V1.Model.FindDevicesByOwnerRequest do
  @moduledoc """
  Request to find devices by customers.

  ## Attributes

  - customerId (list(String.t)): Required. The list of customer IDs to search for. Defaults to `nil`.
  - limit (String.t): Required. The maximum number of devices to show in a page of results. Must
  be between 1 and 100 inclusive. Defaults to `nil`.
  - pageToken (String.t): A token specifying which result page to return. Defaults to `nil`.
  - sectionType (String.t): Required. The section type of the device's provisioning record. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :customerId => list(String.t()),
          :limit => String.t(),
          :pageToken => String.t(),
          :sectionType => String.t()
        }

  field(:customerId, type: :list)
  field(:limit)
  field(:pageToken)
  field(:sectionType)
end

defimpl Poison.Decoder,
  for: GoogleApi.AndroidDeviceProvisioning.V1.Model.FindDevicesByOwnerRequest do
  def decode(value, options) do
    GoogleApi.AndroidDeviceProvisioning.V1.Model.FindDevicesByOwnerRequest.decode(value, options)
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.AndroidDeviceProvisioning.V1.Model.FindDevicesByOwnerRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
