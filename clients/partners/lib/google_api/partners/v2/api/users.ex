# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Partners.V2.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias GoogleApi.Partners.V2.Connection
  import GoogleApi.Partners.V2.RequestBuilder


  @doc """
  Creates a user&#39;s company relation. Affiliates the user to a company.

  ## Parameters

  - connection (GoogleApi.Partners.V2.Connection): Connection to server
  - user_id (String): The ID of the user. Can be set to &lt;code&gt;me&lt;/code&gt; to mean the currently authenticated user.
  - opts (KeywordList): [optional] Optional parameters
    - :__/xgafv (String): V1 error format.
    - :callback (String): JSONP
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :pp (Boolean): Pretty-print response.
    - :bearer_token (String): OAuth bearer token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :request_metadata/user_overrides/ip_address (String): IP address to use instead of the user&#39;s geo-located IP address.
    - :request_metadata/experiment_ids (List[String]): Experiment IDs the current request belongs to.
    - :request_metadata/traffic_source/traffic_sub_id (String): Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/user_overrides/user_id (String): Logged-in user ID to impersonate instead of the user&#39;s ID.
    - :request_metadata/partners_session_id (String): Google Partners session ID.
    - :request_metadata/traffic_source/traffic_source_id (String): Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/locale (String): Locale to use for the current request.
    - :body (CompanyRelation): 

  ## Returns

  {:ok, %GoogleApi.Partners.V2.Model.CompanyRelation{}} on success
  {:error, info} on failure
  """
  @spec partners_users_create_company_relation(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.Partners.V2.Model.CompanyRelation.t} | {:error, Tesla.Env.t}
  def partners_users_create_company_relation(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$.xgafv" => :query,
      :"callback" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"pp" => :query,
      :"bearer_token" => :query,
      :"oauth_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"requestMetadata.userOverrides.ipAddress" => :query,
      :"requestMetadata.experimentIds" => :query,
      :"requestMetadata.trafficSource.trafficSubId" => :query,
      :"requestMetadata.userOverrides.userId" => :query,
      :"requestMetadata.partnersSessionId" => :query,
      :"requestMetadata.trafficSource.trafficSourceId" => :query,
      :"requestMetadata.locale" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/v2/users/{userId}/companyRelation", %{
         "userId" => URI.encode_www_form(user_id)
       })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Partners.V2.Model.CompanyRelation{})
  end

  @doc """
  Deletes a user&#39;s company relation. Unaffiliaites the user from a company.

  ## Parameters

  - connection (GoogleApi.Partners.V2.Connection): Connection to server
  - user_id (String): The ID of the user. Can be set to &lt;code&gt;me&lt;/code&gt; to mean the currently authenticated user.
  - opts (KeywordList): [optional] Optional parameters
    - :__/xgafv (String): V1 error format.
    - :callback (String): JSONP
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :pp (Boolean): Pretty-print response.
    - :bearer_token (String): OAuth bearer token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :request_metadata/traffic_source/traffic_source_id (String): Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/locale (String): Locale to use for the current request.
    - :request_metadata/user_overrides/ip_address (String): IP address to use instead of the user&#39;s geo-located IP address.
    - :request_metadata/experiment_ids (List[String]): Experiment IDs the current request belongs to.
    - :request_metadata/traffic_source/traffic_sub_id (String): Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/user_overrides/user_id (String): Logged-in user ID to impersonate instead of the user&#39;s ID.
    - :request_metadata/partners_session_id (String): Google Partners session ID.

  ## Returns

  {:ok, %GoogleApi.Partners.V2.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec partners_users_delete_company_relation(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.Partners.V2.Model.Empty.t} | {:error, Tesla.Env.t}
  def partners_users_delete_company_relation(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$.xgafv" => :query,
      :"callback" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"pp" => :query,
      :"bearer_token" => :query,
      :"oauth_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"requestMetadata.trafficSource.trafficSourceId" => :query,
      :"requestMetadata.locale" => :query,
      :"requestMetadata.userOverrides.ipAddress" => :query,
      :"requestMetadata.experimentIds" => :query,
      :"requestMetadata.trafficSource.trafficSubId" => :query,
      :"requestMetadata.userOverrides.userId" => :query,
      :"requestMetadata.partnersSessionId" => :query
    }
    %{}
    |> method(:delete)
    |> url("/v2/users/{userId}/companyRelation", %{
         "userId" => URI.encode_www_form(user_id)
       })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Partners.V2.Model.Empty{})
  end

  @doc """
  Gets a user.

  ## Parameters

  - connection (GoogleApi.Partners.V2.Connection): Connection to server
  - user_id (String): Identifier of the user. Can be set to &lt;code&gt;me&lt;/code&gt; to mean the currently authenticated user.
  - opts (KeywordList): [optional] Optional parameters
    - :__/xgafv (String): V1 error format.
    - :callback (String): JSONP
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :pp (Boolean): Pretty-print response.
    - :bearer_token (String): OAuth bearer token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :request_metadata/partners_session_id (String): Google Partners session ID.
    - :request_metadata/user_overrides/user_id (String): Logged-in user ID to impersonate instead of the user&#39;s ID.
    - :user_view (String): Specifies what parts of the user information to return.
    - :request_metadata/traffic_source/traffic_source_id (String): Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/locale (String): Locale to use for the current request.
    - :request_metadata/user_overrides/ip_address (String): IP address to use instead of the user&#39;s geo-located IP address.
    - :request_metadata/experiment_ids (List[String]): Experiment IDs the current request belongs to.
    - :request_metadata/traffic_source/traffic_sub_id (String): Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.

  ## Returns

  {:ok, %GoogleApi.Partners.V2.Model.User{}} on success
  {:error, info} on failure
  """
  @spec partners_users_get(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.Partners.V2.Model.User.t} | {:error, Tesla.Env.t}
  def partners_users_get(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$.xgafv" => :query,
      :"callback" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"pp" => :query,
      :"bearer_token" => :query,
      :"oauth_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"requestMetadata.partnersSessionId" => :query,
      :"requestMetadata.userOverrides.userId" => :query,
      :"userView" => :query,
      :"requestMetadata.trafficSource.trafficSourceId" => :query,
      :"requestMetadata.locale" => :query,
      :"requestMetadata.userOverrides.ipAddress" => :query,
      :"requestMetadata.experimentIds" => :query,
      :"requestMetadata.trafficSource.trafficSubId" => :query
    }
    %{}
    |> method(:get)
    |> url("/v2/users/{userId}", %{
         "userId" => URI.encode_www_form(user_id)
       })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Partners.V2.Model.User{})
  end

  @doc """
  Updates a user&#39;s profile. A user can only update their own profile and should only be called within the context of a logged in user.

  ## Parameters

  - connection (GoogleApi.Partners.V2.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :__/xgafv (String): V1 error format.
    - :callback (String): JSONP
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :pp (Boolean): Pretty-print response.
    - :bearer_token (String): OAuth bearer token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :request_metadata/partners_session_id (String): Google Partners session ID.
    - :request_metadata/user_overrides/user_id (String): Logged-in user ID to impersonate instead of the user&#39;s ID.
    - :request_metadata/traffic_source/traffic_source_id (String): Identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :request_metadata/locale (String): Locale to use for the current request.
    - :request_metadata/user_overrides/ip_address (String): IP address to use instead of the user&#39;s geo-located IP address.
    - :request_metadata/experiment_ids (List[String]): Experiment IDs the current request belongs to.
    - :request_metadata/traffic_source/traffic_sub_id (String): Second level identifier to indicate where the traffic comes from. An identifier has multiple letters created by a team which redirected the traffic to us.
    - :body (UserProfile): 

  ## Returns

  {:ok, %GoogleApi.Partners.V2.Model.UserProfile{}} on success
  {:error, info} on failure
  """
  @spec partners_users_update_profile(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.Partners.V2.Model.UserProfile.t} | {:error, Tesla.Env.t}
  def partners_users_update_profile(connection, opts \\ []) do
    optional_params = %{
      :"$.xgafv" => :query,
      :"callback" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"pp" => :query,
      :"bearer_token" => :query,
      :"oauth_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"requestMetadata.partnersSessionId" => :query,
      :"requestMetadata.userOverrides.userId" => :query,
      :"requestMetadata.trafficSource.trafficSourceId" => :query,
      :"requestMetadata.locale" => :query,
      :"requestMetadata.userOverrides.ipAddress" => :query,
      :"requestMetadata.experimentIds" => :query,
      :"requestMetadata.trafficSource.trafficSubId" => :query,
      :"body" => :body
    }
    %{}
    |> method(:patch)
    |> url("/v2/users/profile")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Partners.V2.Model.UserProfile{})
  end
end
