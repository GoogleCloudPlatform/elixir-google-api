# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ServiceControl.V1.Model.Distribution do
  @moduledoc """
  Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information:    - the arithmetic mean of the samples   - the minimum and maximum of the samples   - the sum-squared-deviation of the samples, used to compute variance   - a histogram of the values of the sample points

  ## Attributes

  - bucketCounts ([String.t]): The number of samples in each histogram bucket. &#x60;bucket_counts&#x60; are optional. If present, they must sum to the &#x60;count&#x60; value.  The buckets are defined below in &#x60;bucket_option&#x60;. There are N buckets. &#x60;bucket_counts[0]&#x60; is the number of samples in the underflow bucket. &#x60;bucket_counts[1]&#x60; to &#x60;bucket_counts[N-1]&#x60; are the numbers of samples in each of the finite buckets. And &#x60;bucket_counts[N] is the number of samples in the overflow bucket. See the comments of &#x60;bucket_option&#x60; below for more details.  Any suffix of trailing zeros may be omitted. Defaults to: `null`.
  - count (String.t): The total number of samples in the distribution. Must be &gt;&#x3D; 0. Defaults to: `null`.
  - explicitBuckets (ExplicitBuckets): Buckets with arbitrary user-provided width. Defaults to: `null`.
  - exponentialBuckets (ExponentialBuckets): Buckets with exponentially growing width. Defaults to: `null`.
  - linearBuckets (LinearBuckets): Buckets with constant width. Defaults to: `null`.
  - maximum (float()): The maximum of the population of values. Ignored if &#x60;count&#x60; is zero. Defaults to: `null`.
  - mean (float()): The arithmetic mean of the samples in the distribution. If &#x60;count&#x60; is zero then this field must be zero. Defaults to: `null`.
  - minimum (float()): The minimum of the population of values. Ignored if &#x60;count&#x60; is zero. Defaults to: `null`.
  - sumOfSquaredDeviation (float()): The sum of squared deviations from the mean:   Sum[i&#x3D;1..count]((x_i - mean)^2) where each x_i is a sample values. If &#x60;count&#x60; is zero then this field must be zero, otherwise validation of the request fails. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bucketCounts => list(any()),
          :count => any(),
          :explicitBuckets => GoogleApi.ServiceControl.V1.Model.ExplicitBuckets.t(),
          :exponentialBuckets => GoogleApi.ServiceControl.V1.Model.ExponentialBuckets.t(),
          :linearBuckets => GoogleApi.ServiceControl.V1.Model.LinearBuckets.t(),
          :maximum => any(),
          :mean => any(),
          :minimum => any(),
          :sumOfSquaredDeviation => any()
        }

  field(:bucketCounts, type: :list)
  field(:count)
  field(:explicitBuckets, as: GoogleApi.ServiceControl.V1.Model.ExplicitBuckets)
  field(:exponentialBuckets, as: GoogleApi.ServiceControl.V1.Model.ExponentialBuckets)
  field(:linearBuckets, as: GoogleApi.ServiceControl.V1.Model.LinearBuckets)
  field(:maximum)
  field(:mean)
  field(:minimum)
  field(:sumOfSquaredDeviation)
end

defimpl Poison.Decoder, for: GoogleApi.ServiceControl.V1.Model.Distribution do
  def decode(value, options) do
    GoogleApi.ServiceControl.V1.Model.Distribution.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ServiceControl.V1.Model.Distribution do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
