# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ServiceControl.V1.Api.Services do
  @moduledoc """
  API calls for all endpoints tagged `Services`.
  """

  alias GoogleApi.ServiceControl.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Attempts to allocate quota for the specified consumer. It should be called before the operation is executed.  This method requires the &#x60;servicemanagement.services.quota&#x60; permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).  **NOTE:** The client **must** fail-open on server errors &#x60;INTERNAL&#x60;, &#x60;UNKNOWN&#x60;, &#x60;DEADLINE_EXCEEDED&#x60;, and &#x60;UNAVAILABLE&#x60;. To ensure system reliability, the server may inject these errors to prohibit any hard dependency on the quota functionality.

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): Name of the service as specified in the service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See google.api.Service for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (AllocateQuotaRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.AllocateQuotaResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_allocate_quota(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.AllocateQuotaResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicecontrol_services_allocate_quota(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:allocateQuota", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.AllocateQuotaResponse{})
  end

  @doc """
  Checks whether an operation on a service should be allowed to proceed based on the configuration of the service and related policies. It must be called before the operation is executed.  If feasible, the client should cache the check results and reuse them for 60 seconds. In case of any server errors, the client should rely on the cached results for much longer time to avoid outage. WARNING: There is general 60s delay for the configuration and policy propagation, therefore callers MUST NOT depend on the &#x60;Check&#x60; method having the latest policy information.  NOTE: the CheckRequest has the size limit of 64KB.  This method requires the &#x60;servicemanagement.services.check&#x60; permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): The service name as specified in its service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (CheckRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.CheckResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_check(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.CheckResponse.t()} | {:error, Tesla.Env.t()}
  def servicecontrol_services_check(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:check", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.CheckResponse{})
  end

  @doc """
  Signals the quota controller that service ends the ongoing usage reconciliation.  This method requires the &#x60;servicemanagement.services.quota&#x60; permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): Name of the service as specified in the service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See google.api.Service for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (EndReconciliationRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.EndReconciliationResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_end_reconciliation(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.EndReconciliationResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicecontrol_services_end_reconciliation(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:endReconciliation", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.EndReconciliationResponse{})
  end

  @doc """
  Releases previously allocated quota done through AllocateQuota method.  This method requires the &#x60;servicemanagement.services.quota&#x60; permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).   **NOTE:** The client **must** fail-open on server errors &#x60;INTERNAL&#x60;, &#x60;UNKNOWN&#x60;, &#x60;DEADLINE_EXCEEDED&#x60;, and &#x60;UNAVAILABLE&#x60;. To ensure system reliability, the server may inject these errors to prohibit any hard dependency on the quota functionality.

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): Name of the service as specified in the service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See google.api.Service for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ReleaseQuotaRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.ReleaseQuotaResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_release_quota(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.ReleaseQuotaResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicecontrol_services_release_quota(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:releaseQuota", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.ReleaseQuotaResponse{})
  end

  @doc """
  Reports operation results to Google Service Control, such as logs and metrics. It should be called after an operation is completed.  If feasible, the client should aggregate reporting data for up to 5 seconds to reduce API traffic. Limiting aggregation to 5 seconds is to reduce data loss during client crashes. Clients should carefully choose the aggregation time window to avoid data loss risk more than 0.01% for business and compliance reasons.  NOTE: the ReportRequest has the size limit of 1MB.  This method requires the &#x60;servicemanagement.services.report&#x60; permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): The service name as specified in its service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (ReportRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.ReportResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_report(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.ReportResponse.t()} | {:error, Tesla.Env.t()}
  def servicecontrol_services_report(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:report", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.ReportResponse{})
  end

  @doc """
  Unlike rate quota, allocation quota does not get refilled periodically. So, it is possible that the quota usage as seen by the service differs from what the One Platform considers the usage is. This is expected to happen only rarely, but over time this can accumulate. Services can invoke StartReconciliation and EndReconciliation to correct this usage drift, as described below: 1. Service sends StartReconciliation with a timestamp in future for each    metric that needs to be reconciled. The timestamp being in future allows    to account for in-flight AllocateQuota and ReleaseQuota requests for the    same metric. 2. One Platform records this timestamp and starts tracking subsequent    AllocateQuota and ReleaseQuota requests until EndReconciliation is    called. 3. At or after the time specified in the StartReconciliation, service    sends EndReconciliation with the usage that needs to be reconciled to. 4. One Platform adjusts its own record of usage for that metric to the    value specified in EndReconciliation by taking in to account any    allocation or release between StartReconciliation and EndReconciliation.  Signals the quota controller that the service wants to perform a usage reconciliation as specified in the request.  This method requires the &#x60;servicemanagement.services.quota&#x60; permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).

  ## Parameters

  - connection (GoogleApi.ServiceControl.V1.Connection): Connection to server
  - service_name (String.t): Name of the service as specified in the service configuration. For example, &#x60;\&quot;pubsub.googleapis.com\&quot;&#x60;.  See google.api.Service for the definition of a service name.
  - opts (KeywordList): [optional] Optional parameters
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :body (StartReconciliationRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceControl.V1.Model.StartReconciliationResponse{}} on success
  {:error, info} on failure
  """
  @spec servicecontrol_services_start_reconciliation(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceControl.V1.Model.StartReconciliationResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicecontrol_services_start_reconciliation(connection, service_name, opts \\ []) do
    optional_params = %{
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:startReconciliation", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceControl.V1.Model.StartReconciliationResponse{})
  end
end
