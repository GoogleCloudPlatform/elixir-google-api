# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Spanner.V1.Model.VisualizationData do
  @moduledoc """


  ## Attributes

  *   `dataSourceEndToken` (*type:* `String.t`, *default:* `nil`) - The token signifying the end of a data_source.
  *   `dataSourceSeparatorToken` (*type:* `String.t`, *default:* `nil`) - The token delimiting a datasource name from the rest of a key in a data_source.
  *   `diagnosticMessages` (*type:* `list(GoogleApi.Spanner.V1.Model.DiagnosticMessage.t)`, *default:* `nil`) - The list of messages (info, alerts, ...)
  *   `endKeyStrings` (*type:* `list(String.t)`, *default:* `nil`) - We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys
  *   `hasPii` (*type:* `boolean()`, *default:* `nil`) - Whether this scan contains PII.
  *   `indexedKeys` (*type:* `list(String.t)`, *default:* `nil`) - Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.
  *   `keySeparator` (*type:* `String.t`, *default:* `nil`) - The token delimiting the key prefixes.
  *   `keyUnit` (*type:* `String.t`, *default:* `nil`) - The unit for the key: e.g. 'key' or 'chunk'.
  *   `metrics` (*type:* `list(GoogleApi.Spanner.V1.Model.Metric.t)`, *default:* `nil`) - The list of data objects for each metric.
  *   `prefixNodes` (*type:* `list(GoogleApi.Spanner.V1.Model.PrefixNode.t)`, *default:* `nil`) - The list of extracted key prefix nodes used in the key prefix hierarchy.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dataSourceEndToken => String.t() | nil,
          :dataSourceSeparatorToken => String.t() | nil,
          :diagnosticMessages => list(GoogleApi.Spanner.V1.Model.DiagnosticMessage.t()) | nil,
          :endKeyStrings => list(String.t()) | nil,
          :hasPii => boolean() | nil,
          :indexedKeys => list(String.t()) | nil,
          :keySeparator => String.t() | nil,
          :keyUnit => String.t() | nil,
          :metrics => list(GoogleApi.Spanner.V1.Model.Metric.t()) | nil,
          :prefixNodes => list(GoogleApi.Spanner.V1.Model.PrefixNode.t()) | nil
        }

  field(:dataSourceEndToken)
  field(:dataSourceSeparatorToken)
  field(:diagnosticMessages, as: GoogleApi.Spanner.V1.Model.DiagnosticMessage, type: :list)
  field(:endKeyStrings, type: :list)
  field(:hasPii)
  field(:indexedKeys, type: :list)
  field(:keySeparator)
  field(:keyUnit)
  field(:metrics, as: GoogleApi.Spanner.V1.Model.Metric, type: :list)
  field(:prefixNodes, as: GoogleApi.Spanner.V1.Model.PrefixNode, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.VisualizationData do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.VisualizationData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.VisualizationData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
