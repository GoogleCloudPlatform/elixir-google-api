# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Spanner.V1.Model.UpdateDatabaseDdlMetadata do
  @moduledoc """
  Metadata type for the operation returned by UpdateDatabaseDdl.

  ## Attributes

  - commitTimestamps ([String.t]): Reports the commit timestamps of all statements that have succeeded so far, where &#x60;commit_timestamps[i]&#x60; is the commit timestamp for the statement &#x60;statements[i]&#x60;. Defaults to: `null`.
  - database (String.t): The database being modified. Defaults to: `null`.
  - statements ([String.t]): For an update this list contains all the statements. For an individual statement, this list contains only that statement. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :commitTimestamps => list(any()),
          :database => any(),
          :statements => list(any())
        }

  field(:commitTimestamps, type: :list)
  field(:database)
  field(:statements, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.UpdateDatabaseDdlMetadata do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.UpdateDatabaseDdlMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.UpdateDatabaseDdlMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
