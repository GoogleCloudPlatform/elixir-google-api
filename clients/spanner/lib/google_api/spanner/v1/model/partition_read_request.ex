# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Spanner.V1.Model.PartitionReadRequest do
  @moduledoc """
  The request for PartitionRead

  ## Attributes

  - columns (list(String.t)): The columns of table to be returned for each row matching
  this request. Defaults to `nil`.
  - index (String.t): If non-empty, the name of an index on table. This index is
  used instead of the table primary key when interpreting key_set
  and sorting result rows. See key_set for further information. Defaults to `nil`.
  - keySet (GoogleApi.Spanner.V1.Model.KeySet.t): Required. `key_set` identifies the rows to be yielded. `key_set` names the
  primary keys of the rows in table to be yielded, unless index
  is present. If index is present, then key_set instead names
  index keys in index.

  It is not an error for the `key_set` to name rows that do not
  exist in the database. Read yields nothing for nonexistent rows. Defaults to `nil`.
  - partitionOptions (GoogleApi.Spanner.V1.Model.PartitionOptions.t): Additional options that affect how many partitions are created. Defaults to `nil`.
  - table (String.t): Required. The name of the table in the database to be read. Defaults to `nil`.
  - transaction (GoogleApi.Spanner.V1.Model.TransactionSelector.t): Read only snapshot transactions are supported, read/write and single use
  transactions are not. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :columns => list(String.t()),
          :index => String.t(),
          :keySet => GoogleApi.Spanner.V1.Model.KeySet.t(),
          :partitionOptions => GoogleApi.Spanner.V1.Model.PartitionOptions.t(),
          :table => String.t(),
          :transaction => GoogleApi.Spanner.V1.Model.TransactionSelector.t()
        }

  field(:columns, type: :list)
  field(:index)
  field(:keySet, as: GoogleApi.Spanner.V1.Model.KeySet)
  field(:partitionOptions, as: GoogleApi.Spanner.V1.Model.PartitionOptions)
  field(:table)
  field(:transaction, as: GoogleApi.Spanner.V1.Model.TransactionSelector)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.PartitionReadRequest do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.PartitionReadRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.PartitionReadRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
