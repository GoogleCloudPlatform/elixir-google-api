# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Run.V1.Model.Namespace do
  @moduledoc """
  Cloud Run fully managed: not supported

  Cloud Run on GKE: supported

  Namespace provides a scope for Names.
  Use of multiple namespaces is optional.

  ## Attributes

  *   `metadata` (*type:* `GoogleApi.Run.V1.Model.ObjectMeta.t`, *default:* `nil`) - Standard object's metadata.
      More info:
      https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  *   `spec` (*type:* `GoogleApi.Run.V1.Model.NamespaceSpec.t`, *default:* `nil`) - Spec defines the behavior of the Namespace.
      More info:
      https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  *   `status` (*type:* `GoogleApi.Run.V1.Model.NamespaceStatus.t`, *default:* `nil`) - Status describes the current status of a Namespace.
      More info:
      https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :metadata => GoogleApi.Run.V1.Model.ObjectMeta.t(),
          :spec => GoogleApi.Run.V1.Model.NamespaceSpec.t(),
          :status => GoogleApi.Run.V1.Model.NamespaceStatus.t()
        }

  field(:metadata, as: GoogleApi.Run.V1.Model.ObjectMeta)
  field(:spec, as: GoogleApi.Run.V1.Model.NamespaceSpec)
  field(:status, as: GoogleApi.Run.V1.Model.NamespaceStatus)
end

defimpl Poison.Decoder, for: GoogleApi.Run.V1.Model.Namespace do
  def decode(value, options) do
    GoogleApi.Run.V1.Model.Namespace.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Run.V1.Model.Namespace do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
