# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Run.V1.Model.Secret do
  @moduledoc """
  Cloud Run fully managed: not supported

  Cloud Run on GKE: supported

  Secret holds secret data of a certain type. The total bytes of the values in
  the Data field must be less than MaxSecretSize bytes.

  ## Attributes

  *   `data` (*type:* `map()`, *default:* `nil`) - Data contains the secret data. Each key must consist of alphanumeric
      characters, '-', '_' or '.'. The serialized form of the secret data is a
      base64 encoded string, representing the arbitrary (possibly non-string)
      data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  *   `metadata` (*type:* `GoogleApi.Run.V1.Model.ObjectMeta.t`, *default:* `nil`) - Standard object's metadata.
      More info:
      https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  *   `stringData` (*type:* `map()`, *default:* `nil`) - stringData allows specifying non-binary secret data in string form.
      It is provided as a write-only convenience method.
      All keys and values are merged into the data field on write, overwriting
      any existing values. It is never output when reading from the API.
      +k8s:conversion-gen=false
  *   `type` (*type:* `String.t`, *default:* `nil`) - Used to facilitate programmatic handling of secret data.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :data => map(),
          :metadata => GoogleApi.Run.V1.Model.ObjectMeta.t(),
          :stringData => map(),
          :type => String.t()
        }

  field(:data, type: :map)
  field(:metadata, as: GoogleApi.Run.V1.Model.ObjectMeta)
  field(:stringData, type: :map)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.Run.V1.Model.Secret do
  def decode(value, options) do
    GoogleApi.Run.V1.Model.Secret.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Run.V1.Model.Secret do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
