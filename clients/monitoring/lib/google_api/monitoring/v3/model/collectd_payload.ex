# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Monitoring.V3.Model.CollectdPayload do
  @moduledoc """
  A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information.

  ## Attributes

  - endTime (DateTime.t): The end time of the interval. Defaults to: `null`.
  - metadata (%{optional(String.t) &#x3D;&gt; TypedValue}): The measurement metadata. Example: \&quot;process_id\&quot; -&gt; 12345 Defaults to: `null`.
  - plugin (String.t): The name of the plugin. Example: \&quot;disk\&quot;. Defaults to: `null`.
  - pluginInstance (String.t): The instance name of the plugin Example: \&quot;hdcl\&quot;. Defaults to: `null`.
  - startTime (DateTime.t): The start time of the interval. Defaults to: `null`.
  - type (String.t): The measurement type. Example: \&quot;memory\&quot;. Defaults to: `null`.
  - typeInstance (String.t): The measurement type instance. Example: \&quot;used\&quot;. Defaults to: `null`.
  - values ([CollectdValue]): The measured values during this time interval. Each value must have a different dataSourceName. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :endTime => DateTime.t(),
          :metadata => map(),
          :plugin => any(),
          :pluginInstance => any(),
          :startTime => DateTime.t(),
          :type => any(),
          :typeInstance => any(),
          :values => list(GoogleApi.Monitoring.V3.Model.CollectdValue.t())
        }

  field(:endTime, as: DateTime)
  field(:metadata, as: GoogleApi.Monitoring.V3.Model.TypedValue, type: :map)
  field(:plugin)
  field(:pluginInstance)
  field(:startTime, as: DateTime)
  field(:type)
  field(:typeInstance)
  field(:values, as: GoogleApi.Monitoring.V3.Model.CollectdValue, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.CollectdPayload do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.CollectdPayload.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.CollectdPayload do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
