# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Monitoring.V3.Model.HttpCheck do
  @moduledoc """
  Information involved in an HTTP/HTTPS uptime check request.

  ## Attributes

  *   `authInfo` (*type:* `GoogleApi.Monitoring.V3.Model.BasicAuthentication.t`, *default:* `nil`) - The authentication information. Optional when creating an HTTP check; defaults to empty.
  *   `headers` (*type:* `map()`, *default:* `nil`) - The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
  *   `maskHeaders` (*type:* `boolean()`, *default:* `nil`) - Boolean specifiying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to True then the headers will be obscured with ******.
  *   `path` (*type:* `String.t`, *default:* `nil`) - The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. Optional (defaults to "/"). If the provided path does not begin with "/", it will be prepended automatically.
  *   `port` (*type:* `integer()`, *default:* `nil`) - The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) and path to construct the full URL. Optional (defaults to 80 without SSL, or 443 with SSL).
  *   `useSsl` (*type:* `boolean()`, *default:* `nil`) - If true, use HTTPS instead of HTTP to run the check.
  *   `validateSsl` (*type:* `boolean()`, *default:* `nil`) - Boolean specifying whether to validate SSL certificates. Only applies to uptime_url checks. If use_ssl is false, setting this to true has no effect.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :authInfo => GoogleApi.Monitoring.V3.Model.BasicAuthentication.t(),
          :headers => map(),
          :maskHeaders => boolean(),
          :path => String.t(),
          :port => integer(),
          :useSsl => boolean(),
          :validateSsl => boolean()
        }

  field(:authInfo, as: GoogleApi.Monitoring.V3.Model.BasicAuthentication)
  field(:headers, type: :map)
  field(:maskHeaders)
  field(:path)
  field(:port)
  field(:useSsl)
  field(:validateSsl)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.HttpCheck do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.HttpCheck.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.HttpCheck do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
