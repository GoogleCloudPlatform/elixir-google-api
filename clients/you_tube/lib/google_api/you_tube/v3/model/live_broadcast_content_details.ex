# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.YouTube.V3.Model.LiveBroadcastContentDetails do
  @moduledoc """
  Detailed settings of a broadcast.

  ## Attributes

  *   `boundStreamId` (*type:* `String.t`, *default:* `nil`) - This value uniquely identifies the
      <code><a href="/youtube/v3/live/docs/liveStreams">live stream</a></code>
      bound to the broadcast.
  *   `boundStreamLastUpdateTimeMs` (*type:* `String.t`, *default:* `nil`) - The date and time that the live stream referenced by
      <code>boundStreamId</code> was last updated.
  *   `closedCaptionsType` (*type:* `String.t`, *default:* `nil`) - 
  *   `enableAutoStart` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether auto start is enabled for this broadcast.
       The default value for this property is <code>false</code>.<br><br>
       This setting can only be used by Events.
  *   `enableAutoStop` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether auto stop is enabled for this broadcast.
      The default value for this property is <code>false</code>.<br><br>
      This setting can only be used by Events.
  *   `enableClosedCaptions` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether HTTP POST closed captioning is enabled for
      this broadcast. The ingestion URL of the closed captions is returned
      through the liveStreams API.  This is mutually exclusive with using the
      <code>closed_captions_type</code> property, and is equivalent to setting
      <code>closed_captions_type</code> to CLOSED_CAPTIONS_HTTP_POST.
  *   `enableContentEncryption` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether YouTube should enable content encryption
      for the broadcast.
  *   `enableDvr` (*type:* `boolean()`, *default:* `nil`) - This setting determines whether viewers can access DVR controls while
      watching the video. DVR controls enable the viewer to control the video
      playback experience by pausing, rewinding, or fast forwarding content.
      The default value for this property is <code>true</code>.<br><br>

      <strong>Important:</strong> You must set the value to <code>true</code>
      and also set the <code>enableArchive</code> property's value to
      <code>true</code> if you want to make playback available immediately
      after the broadcast ends.
  *   `enableEmbed` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether the broadcast video can be played in an
      embedded player. If you choose to archive the video (using the
      <code>enableArchive</code> property), this setting will also apply to
      the archived video.
  *   `enableLowLatency` (*type:* `boolean()`, *default:* `nil`) - Indicates whether this broadcast has low latency enabled.
  *   `latencyPreference` (*type:* `String.t`, *default:* `nil`) - If both this and enable_low_latency are set, they must match.
      LATENCY_NORMAL should match enable_low_latency=false
      LATENCY_LOW should match enable_low_latency=true
      LATENCY_ULTRA_LOW should have enable_low_latency omitted.
  *   `mesh` (*type:* `String.t`, *default:* `nil`) - The mesh for projecting the video if <code>projection</code> is
      <code>mesh</code>. The mesh value must be a UTF-8 string containing the
      base-64 encoding of 3D mesh data that follows the <a
      href="https://github.com/google/spatial-media/blob/master/docs/spherical-video-v2-rfc.md">
      Spherical Video V2 RFC specification</a> for an mshp box, excluding the box
      size and type but including the following four reserved zero bytes for the
      version and flags.
  *   `monitorStream` (*type:* `GoogleApi.YouTube.V3.Model.MonitorStreamInfo.t`, *default:* `nil`) - The <code>monitorStream</code> object contains information about the
      monitor stream, which the broadcaster can use to review the event
      content before the broadcast stream is shown publicly.
  *   `projection` (*type:* `String.t`, *default:* `nil`) - The projection format of this broadcast. This defaults to
      <code>rectangular</code>.
  *   `recordFromStart` (*type:* `boolean()`, *default:* `nil`) - Automatically start recording after the event goes live.
      The default value for this property is <code>true</code>.<br><br>

      <strong>Important:</strong> You must also set the <code>enableDvr</code>
      property's value to
      <code>true</code> if you want the playback to be available immediately
      after the broadcast ends. If you set this property's value to
      <code>true</code> but do not also set the <code>enableDvr</code> property
      to <code>true</code>, there may be a delay of around one day before the
      archived video will be available for playback.
  *   `startWithSlate` (*type:* `boolean()`, *default:* `nil`) - This setting indicates whether the broadcast should automatically begin
      with an <a
      href="/youtube/v3/live/getting-started#Displaying_Slates">in-stream
      slate</a> when you update the broadcast's status to <code>live</code>.
      After updating the status, you then need to send a
      <code><a
      href="/youtube/v3/live/docs/liveCuepoints/insert">liveCuepoints.insert</a></code>
      request that sets the cuepoint's <code>eventState</code> to
      <code>end</code> to remove the in-stream slate and make your broadcast
      stream visible to viewers.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :boundStreamId => String.t(),
          :boundStreamLastUpdateTimeMs => String.t(),
          :closedCaptionsType => String.t(),
          :enableAutoStart => boolean(),
          :enableAutoStop => boolean(),
          :enableClosedCaptions => boolean(),
          :enableContentEncryption => boolean(),
          :enableDvr => boolean(),
          :enableEmbed => boolean(),
          :enableLowLatency => boolean(),
          :latencyPreference => String.t(),
          :mesh => String.t(),
          :monitorStream => GoogleApi.YouTube.V3.Model.MonitorStreamInfo.t(),
          :projection => String.t(),
          :recordFromStart => boolean(),
          :startWithSlate => boolean()
        }

  field(:boundStreamId)
  field(:boundStreamLastUpdateTimeMs)
  field(:closedCaptionsType)
  field(:enableAutoStart)
  field(:enableAutoStop)
  field(:enableClosedCaptions)
  field(:enableContentEncryption)
  field(:enableDvr)
  field(:enableEmbed)
  field(:enableLowLatency)
  field(:latencyPreference)
  field(:mesh)
  field(:monitorStream, as: GoogleApi.YouTube.V3.Model.MonitorStreamInfo)
  field(:projection)
  field(:recordFromStart)
  field(:startWithSlate)
end

defimpl Poison.Decoder, for: GoogleApi.YouTube.V3.Model.LiveBroadcastContentDetails do
  def decode(value, options) do
    GoogleApi.YouTube.V3.Model.LiveBroadcastContentDetails.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.YouTube.V3.Model.LiveBroadcastContentDetails do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
