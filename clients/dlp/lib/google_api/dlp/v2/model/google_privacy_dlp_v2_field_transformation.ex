# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldTransformation do
  @moduledoc """
  The transformation to apply to the field.

  ## Attributes

  - condition (GooglePrivacyDlpV2RecordCondition): Only apply the transformation if the condition evaluates to true for the given &#x60;RecordCondition&#x60;. The conditions are allowed to reference fields that are not used in the actual transformation. [optional]  Example Use Cases:  - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85. Defaults to: `null`.
  - fields ([GooglePrivacyDlpV2FieldId]): Input field(s) to apply the transformation to. [required] Defaults to: `null`.
  - infoTypeTransformations (GooglePrivacyDlpV2InfoTypeTransformations): Treat the contents of the field as free text, and selectively transform content that matches an &#x60;InfoType&#x60;. Defaults to: `null`.
  - primitiveTransformation (GooglePrivacyDlpV2PrimitiveTransformation): Apply the transformation to the entire field. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :condition => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2RecordCondition.t(),
          :fields => list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId.t()),
          :infoTypeTransformations =>
            GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoTypeTransformations.t(),
          :primitiveTransformation =>
            GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PrimitiveTransformation.t()
        }

  field(:condition, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2RecordCondition)
  field(:fields, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId, type: :list)

  field(
    :infoTypeTransformations,
    as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoTypeTransformations
  )

  field(
    :primitiveTransformation,
    as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2PrimitiveTransformation
  )
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldTransformation do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldTransformation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldTransformation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
