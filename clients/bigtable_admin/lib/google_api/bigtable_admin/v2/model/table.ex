# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigtableAdmin.V2.Model.Table do
  @moduledoc """
  A collection of user data indexed by row, column, and timestamp.
  Each table is served using the resources of its parent cluster.

  ## Attributes

  *   `clusterStates` (*type:* `%{optional(String.t) => GoogleApi.BigtableAdmin.V2.Model.ClusterState.t}`, *default:* `nil`) - Output only. Map from cluster ID to per-cluster table state.
      If it could not be determined whether or not the table has data in a
      particular cluster (for example, if its zone is unavailable), then
      there will be an entry for the cluster with UNKNOWN `replication_status`.
      Views: `REPLICATION_VIEW`, `FULL`
  *   `columnFamilies` (*type:* `%{optional(String.t) => GoogleApi.BigtableAdmin.V2.Model.ColumnFamily.t}`, *default:* `nil`) - The column families configured for this table, mapped by column family ID.
      Views: `SCHEMA_VIEW`, `FULL`
  *   `granularity` (*type:* `String.t`, *default:* `nil`) - Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this
      table. Timestamps not matching the granularity will be rejected.
      If unspecified at creation time, the value will be set to `MILLIS`.
      Views: `SCHEMA_VIEW`, `FULL`.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The unique name of the table. Values are of the form
      `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`.
      Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterStates => %{
            optional(String.t()) => GoogleApi.BigtableAdmin.V2.Model.ClusterState.t()
          },
          :columnFamilies => %{
            optional(String.t()) => GoogleApi.BigtableAdmin.V2.Model.ColumnFamily.t()
          },
          :granularity => String.t(),
          :name => String.t()
        }

  field(:clusterStates, as: GoogleApi.BigtableAdmin.V2.Model.ClusterState, type: :map)
  field(:columnFamilies, as: GoogleApi.BigtableAdmin.V2.Model.ColumnFamily, type: :map)
  field(:granularity)
  field(:name)
end

defimpl Poison.Decoder, for: GoogleApi.BigtableAdmin.V2.Model.Table do
  def decode(value, options) do
    GoogleApi.BigtableAdmin.V2.Model.Table.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigtableAdmin.V2.Model.Table do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
