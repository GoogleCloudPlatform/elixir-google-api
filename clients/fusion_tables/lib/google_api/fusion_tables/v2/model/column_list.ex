# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.FusionTables.V2.Model.ColumnList do
  @moduledoc """
  Represents a list of columns in a table.

  ## Attributes

  - items (list(GoogleApi.FusionTables.V2.Model.Column.t)): List of all requested columns. Defaults to `nil`.
  - kind (String.t): The kind of item this is. For a column list, this is always fusiontables#columnList. Defaults to `fusiontables#columnList`.
  - nextPageToken (String.t): Token used to access the next page of this result. No token is displayed if there are no more pages left. Defaults to `nil`.
  - totalItems (integer()): Total number of columns for the table. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :items => list(GoogleApi.FusionTables.V2.Model.Column.t()),
          :kind => String.t(),
          :nextPageToken => String.t(),
          :totalItems => integer()
        }

  field(:items, as: GoogleApi.FusionTables.V2.Model.Column, type: :list)
  field(:kind)
  field(:nextPageToken)
  field(:totalItems)
end

defimpl Poison.Decoder, for: GoogleApi.FusionTables.V2.Model.ColumnList do
  def decode(value, options) do
    GoogleApi.FusionTables.V2.Model.ColumnList.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.FusionTables.V2.Model.ColumnList do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
