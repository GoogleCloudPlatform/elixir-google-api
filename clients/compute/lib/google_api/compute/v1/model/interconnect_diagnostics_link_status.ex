# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus do
  @moduledoc """


  ## Attributes

  - arpCaches (list(GoogleApi.Compute.V1.Model.InterconnectDiagnosticsARPEntry.t)): A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled Defaults to `nil`.
  - circuitId (String.t): The unique ID for this link assigned during turn up by Google. Defaults to `nil`.
  - googleDemarc (String.t): The Demarc address assigned by Google and provided in the LoA. Defaults to `nil`.
  - lacpStatus (GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkLACPStatus.t):  Defaults to `nil`.
  - receivingOpticalPower (GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower.t): An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level. Defaults to `nil`.
  - transmittingOpticalPower (GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower.t): An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :arpCaches => list(GoogleApi.Compute.V1.Model.InterconnectDiagnosticsARPEntry.t()),
          :circuitId => String.t(),
          :googleDemarc => String.t(),
          :lacpStatus => GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkLACPStatus.t(),
          :receivingOpticalPower =>
            GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower.t(),
          :transmittingOpticalPower =>
            GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower.t()
        }

  field(:arpCaches, as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsARPEntry, type: :list)
  field(:circuitId)
  field(:googleDemarc)
  field(:lacpStatus, as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkLACPStatus)

  field(
    :receivingOpticalPower,
    as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower
  )

  field(
    :transmittingOpticalPower,
    as: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkOpticalPower
  )
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.InterconnectDiagnosticsLinkStatus do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
