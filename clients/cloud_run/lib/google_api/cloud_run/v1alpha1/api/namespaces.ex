# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Api.Namespaces do
  @moduledoc """
  API calls for all endpoints tagged `Namespaces`.
  """

  alias GoogleApi.CloudRun.V1alpha1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  RPC to list authorized domains.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Name of the parent Application resource. Example: `apps/myapp`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - Maximum results to return per page.
      *   `:pageToken` (*type:* `String.t`) - Continuation token for fetching the next page of results.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_authorizeddomains_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_authorizeddomains_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/domains.cloudrun.com/v1alpha1/namespaces/{namespacesId}/authorizeddomains",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse{}]
    )
  end

  @doc """
  Creates a new cloudauditlogssource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number in which this cloudauditlogssource should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudauditlogssources_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudauditlogssources_create(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudauditlogssources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource{}]
    )
  end

  @doc """
  Rpc to delete a cloudauditlogssource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the cloudauditlogssource being deleted. If needed, replace {namespace_id} with the project ID.
  *   `cloudauditlogssources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudauditlogssources_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudauditlogssources_delete(
        connection,
        namespaces_id,
        cloudauditlogssources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudauditlogssources/{cloudauditlogssourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudauditlogssourcesId" =>
            URI.encode(cloudauditlogssources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a cloudauditlogssource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the cloudauditlogssource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudauditlogssources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudauditlogssources_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudauditlogssources_get(
        connection,
        namespaces_id,
        cloudauditlogssources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudauditlogssources/{cloudauditlogssourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudauditlogssourcesId" =>
            URI.encode(cloudauditlogssources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudAuditLogsSource{}]
    )
  end

  @doc """
  Rpc to list cloudauditlogssources.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the cloudauditlogssources should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListCloudAuditLogsSourcesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudauditlogssources_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListCloudAuditLogsSourcesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudauditlogssources_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudauditlogssources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListCloudAuditLogsSourcesResponse{}]
    )
  end

  @doc """
  Creates a new cloudpubsubsource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number in which this cloudpubsubsource should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudpubsubsources_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudpubsubsources_create(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudpubsubsources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource{}])
  end

  @doc """
  Rpc to delete a cloudpubsubsource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the cloudpubsubsource being deleted. If needed, replace {namespace_id} with the project ID.
  *   `cloudpubsubsources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudpubsubsources_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudpubsubsources_delete(
        connection,
        namespaces_id,
        cloudpubsubsources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudpubsubsources/{cloudpubsubsourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudpubsubsourcesId" =>
            URI.encode(cloudpubsubsources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a cloudpubsubsource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the cloudpubsubsource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudpubsubsources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudpubsubsources_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudpubsubsources_get(
        connection,
        namespaces_id,
        cloudpubsubsources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudpubsubsources/{cloudpubsubsourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudpubsubsourcesId" =>
            URI.encode(cloudpubsubsources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudPubSubSource{}])
  end

  @doc """
  Rpc to list cloudpubsubsources.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the cloudpubsubsources should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListCloudPubSubSourcesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudpubsubsources_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListCloudPubSubSourcesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudpubsubsources_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudpubsubsources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListCloudPubSubSourcesResponse{}]
    )
  end

  @doc """
  Creates a new cloudschedulersource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The project ID or project number in which this cloudschedulersource should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudschedulersources_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudschedulersources_create(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudschedulersources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}]
    )
  end

  @doc """
  Rpc to delete a cloudschedulersource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudschedulersource being deleted. If needed, replace {namespace_id} with the project ID.
  *   `cloudschedulersources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudschedulersources_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudschedulersources_delete(
        connection,
        namespaces_id,
        cloudschedulersources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudschedulersources/{cloudschedulersourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudschedulersourcesId" =>
            URI.encode(cloudschedulersources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a cloudschedulersource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudschedulersource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudschedulersources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudschedulersources_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudschedulersources_get(
        connection,
        namespaces_id,
        cloudschedulersources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudschedulersources/{cloudschedulersourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudschedulersourcesId" =>
            URI.encode(cloudschedulersources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}]
    )
  end

  @doc """
  Rpc to list cloudschedulersources.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The project ID or project number from which the cloudschedulersources should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListCloudSchedulerSourcesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudschedulersources_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListCloudSchedulerSourcesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudschedulersources_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudschedulersources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListCloudSchedulerSourcesResponse{}]
    )
  end

  @doc """
  Rpc to replace a cloudschedulersource. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudschedulersource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudschedulersources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudschedulersources_replace_cloud_scheduler_source(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudschedulersources_replace_cloud_scheduler_source(
        connection,
        namespaces_id,
        cloudschedulersources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudschedulersources/{cloudschedulersourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudschedulersourcesId" =>
            URI.encode(cloudschedulersources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudSchedulerSource{}]
    )
  end

  @doc """
  Creates a new cloudstoragesource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The project ID or project number in which this cloudstoragesource should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudstoragesources_create(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudstoragesources_create(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudstoragesources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}])
  end

  @doc """
  Rpc to delete a cloudstoragesource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudstoragesource being deleted. If needed, replace {namespace_id} with the project ID.
  *   `cloudstoragesources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudstoragesources_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudstoragesources_delete(
        connection,
        namespaces_id,
        cloudstoragesources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudstoragesources/{cloudstoragesourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudstoragesourcesId" =>
            URI.encode(cloudstoragesources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a cloudstoragesource.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudstoragesource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudstoragesources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudstoragesources_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudstoragesources_get(
        connection,
        namespaces_id,
        cloudstoragesources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudstoragesources/{cloudstoragesourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudstoragesourcesId" =>
            URI.encode(cloudstoragesources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}])
  end

  @doc """
  Rpc to list cloudstoragesources.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The project ID or project number from which the cloudstoragesources should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListCloudStorageSourcesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudstoragesources_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListCloudStorageSourcesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudstoragesources_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudstoragesources",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListCloudStorageSourcesResponse{}]
    )
  end

  @doc """
  Rpc to replace a cloudstoragesource. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the cloudstoragesource being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `cloudstoragesources_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_cloudstoragesources_replace_cloud_storage_source(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_cloudstoragesources_replace_cloud_storage_source(
        connection,
        namespaces_id,
        cloudstoragesources_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url(
        "/apis/events.cloud.google.com/v1alpha1/namespaces/{namespacesId}/cloudstoragesources/{cloudstoragesourcesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "cloudstoragesourcesId" =>
            URI.encode(cloudstoragesources_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSource{}])
  end

  @doc """
  Rpc to get information about a configuration.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the configuration being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `configurations_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Configuration{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_configurations_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Configuration.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_configurations_get(
        connection,
        namespaces_id,
        configurations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/configurations/{configurationsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "configurationsId" =>
            URI.encode(configurations_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Configuration{}])
  end

  @doc """
  Rpc to list configurations.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the configurations should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_configurations_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_configurations_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/configurations",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse{}]
    )
  end

  @doc """
  Creates a new domain mapping.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number in which this domain mapping should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.DomainMapping.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_domainmappings_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.DomainMapping.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_domainmappings_create(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/apis/domains.cloudrun.com/v1alpha1/namespaces/{namespacesId}/domainmappings",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}])
  end

  @doc """
  Rpc to delete a domain mapping.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the domain mapping being deleted. If needed, replace {namespace_id} with the project ID.
  *   `domainmappings_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:orphanDependents` (*type:* `boolean()`) - Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_domainmappings_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_domainmappings_delete(
        connection,
        namespaces_id,
        domainmappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :orphanDependents => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/domains.cloudrun.com/v1alpha1/namespaces/{namespacesId}/domainmappings/{domainmappingsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "domainmappingsId" =>
            URI.encode(domainmappings_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a domain mapping.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the domain mapping being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `domainmappings_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_domainmappings_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.DomainMapping.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_domainmappings_get(
        connection,
        namespaces_id,
        domainmappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/domains.cloudrun.com/v1alpha1/namespaces/{namespacesId}/domainmappings/{domainmappingsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "domainmappingsId" =>
            URI.encode(domainmappings_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}])
  end

  @doc """
  Rpc to list domain mappings.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the domain mappings should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_domainmappings_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_domainmappings_list(
        connection,
        namespaces_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/domains.cloudrun.com/v1alpha1/namespaces/{namespacesId}/domainmappings",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse{}]
    )
  end

  @doc """
  Create a job.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The namespace in which the job should be created. Replace {namespace_id} with the project ID or number.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Job.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Job{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_jobs_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Job.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_jobs_create(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Job{}])
  end

  @doc """
  Delete a job.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the job to delete. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
  *   `jobs_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Optional. Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Optional. Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Optional. Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_jobs_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_jobs_delete(
        connection,
        namespaces_id,
        jobs_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs/{jobsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "jobsId" => URI.encode(jobs_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Get information about a job.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. Required. The name of the job to retrieve. For Cloud Run (fully managed), replace {namespace_id} with the project ID or number.
  *   `jobs_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Job{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_jobs_get(Tesla.Env.client(), String.t(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Job.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_jobs_get(
        connection,
        namespaces_id,
        jobs_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs/{jobsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "jobsId" => URI.encode(jobs_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Job{}])
  end

  @doc """
  List jobs.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. Required. The namespace from which the jobs should be listed. Replace {namespace_id} with the project ID or number.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional. Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Optional. Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Optional. Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Optional. Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - Optional. The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - Optional. The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Optional. Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListJobsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_jobs_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListJobsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_jobs_list(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListJobsResponse{}])
  end

  @doc """
  Rpc to delete a revision.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the revision being deleted. If needed, replace {namespace_id} with the project ID.
  *   `revisions_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:orphanDependents` (*type:* `boolean()`) - Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_revisions_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_revisions_delete(
        connection,
        namespaces_id,
        revisions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :orphanDependents => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/revisions/{revisionsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "revisionsId" => URI.encode(revisions_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a revision.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the revision being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `revisions_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Revision{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_revisions_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Revision.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_revisions_get(
        connection,
        namespaces_id,
        revisions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/revisions/{revisionsId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "revisionsId" => URI.encode(revisions_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Revision{}])
  end

  @doc """
  Rpc to list revisions.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the revisions should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_revisions_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_revisions_list(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/revisions", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse{}]
    )
  end

  @doc """
  Rpc to get information about a route.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the route being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `routes_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Route{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_routes_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Route.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_routes_get(
        connection,
        namespaces_id,
        routes_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/routes/{routesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "routesId" => URI.encode(routes_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Route{}])
  end

  @doc """
  Rpc to list routes.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the routes should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_routes_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_routes_list(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/routes", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse{}])
  end

  @doc """
  Rpc to create a service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number in which this service should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Service.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_services_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_services_create(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/services", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Rpc to delete a service. This will cause the Service to stop serving traffic and will delete the child entities like Routes, Configurations and Revisions.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the service being deleted. If needed, replace {namespace_id} with the project ID.
  *   `services_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:orphanDependents` (*type:* `boolean()`) - Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_services_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_services_delete(
        connection,
        namespaces_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :orphanDependents => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/services/{servicesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the service being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `services_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_services_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_services_get(
        connection,
        namespaces_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/services/{servicesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Rpc to list services.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the services should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_services_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_services_list(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/services", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse{}]
    )
  end

  @doc """
  Rpc to replace a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the service being replaced. If needed, replace {namespace_id} with the project ID.
  *   `services_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Service.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_services_replace_service(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_services_replace_service(
        connection,
        namespaces_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url(
        "/apis/serving.knative.dev/v1alpha1/namespaces/{namespacesId}/services/{servicesId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Creates a new trigger.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number in which this trigger should be created.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Trigger.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Trigger{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_triggers_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Trigger.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_triggers_create(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/apis/eventing.knative.dev/v1alpha1/namespaces/{namespacesId}/triggers", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Trigger{}])
  end

  @doc """
  Rpc to delete a trigger.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the trigger being deleted. If needed, replace {namespace_id} with the project ID.
  *   `triggers_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:apiVersion` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:kind` (*type:* `String.t`) - Cloud Run currently ignores this parameter.
      *   `:propagationPolicy` (*type:* `String.t`) - Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_triggers_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_triggers_delete(
        connection,
        namespaces_id,
        triggers_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/apis/eventing.knative.dev/v1alpha1/namespaces/{namespacesId}/triggers/{triggersId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "triggersId" => URI.encode(triggers_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a trigger.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `name`. The name of the trigger being retrieved. If needed, replace {namespace_id} with the project ID.
  *   `triggers_id` (*type:* `String.t`) - Part of `name`. See documentation of `namespacesId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.Trigger{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_triggers_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.Trigger.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_triggers_get(
        connection,
        namespaces_id,
        triggers_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/apis/eventing.knative.dev/v1alpha1/namespaces/{namespacesId}/triggers/{triggersId}",
        %{
          "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1),
          "triggersId" => URI.encode(triggers_id, &(URI.char_unreserved?(&1) || &1 == ?/))
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Trigger{}])
  end

  @doc """
  Rpc to list triggers.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudRun.V1alpha1.Connection.t`) - Connection to server
  *   `namespaces_id` (*type:* `String.t`) - Part of `parent`. The project ID or project number from which the triggers should be listed.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:continue` (*type:* `String.t`) - Optional. Encoded string to continue paging.
      *   `:fieldSelector` (*type:* `String.t`) - Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. 'metadata.name%3Dlorem'. Not currently used by Cloud Run.
      *   `:includeUninitialized` (*type:* `boolean()`) - Not currently used by Cloud Run.
      *   `:labelSelector` (*type:* `String.t`) - Allows to filter resources based on a label. Supported operations are =, !=, exists, in, and notIn.
      *   `:limit` (*type:* `integer()`) - The maximum number of records that should be returned.
      *   `:resourceVersion` (*type:* `String.t`) - The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
      *   `:watch` (*type:* `boolean()`) - Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListTriggersResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec run_namespaces_triggers_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListTriggersResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def run_namespaces_triggers_list(connection, namespaces_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :continue => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :labelSelector => :query,
      :limit => :query,
      :resourceVersion => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/apis/eventing.knative.dev/v1alpha1/namespaces/{namespacesId}/triggers", %{
        "namespacesId" => URI.encode(namespaces_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListTriggersResponse{}]
    )
  end
end
