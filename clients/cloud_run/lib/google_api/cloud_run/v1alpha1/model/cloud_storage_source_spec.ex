# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSourceSpec do
  @moduledoc """
  The desired state of the CloudStorageSource.

  ## Attributes

  *   `bucket` (*type:* `String.t`, *default:* `nil`) - Bucket to subscribe to.
  *   `ceOverrides` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.CloudEventOverrides.t`, *default:* `nil`) - CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.
  *   `eventTypes` (*type:* `list(String.t)`, *default:* `nil`) - EventTypes to subscribe to. If unspecified, then subscribe to all events.
  *   `objectNamePrefix` (*type:* `String.t`, *default:* `nil`) - ObjectNamePrefix limits the notifications to objects with this prefix.
  *   `payloadFormat` (*type:* `String.t`, *default:* `nil`) - PayloadFormat specifies the contents of the message payload. See https://cloud.google.com/storage/docs/pubsub-notifications#payload.
  *   `project` (*type:* `String.t`, *default:* `nil`) - Project is the ID of the Google Cloud Project that the PubSub Topic exists in. If omitted, defaults to same as the cluster.
  *   `pubsubSecret` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector.t`, *default:* `nil`) - PubSubSecret is the credential to use to create Topic / PullSubscription resources. If omitted, uses Secret.
  *   `secret` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector.t`, *default:* `nil`) - Secret is the credential to use to create the Scheduler Job. If not specified, defaults to: Name: google-cloud-key Key: key.json
  *   `serviceAccountName` (*type:* `String.t`, *default:* `nil`) - ServiceAccountName holds the name of the Kubernetes service account as which the underlying K8s resources should be run. If unspecified this will default to the "default" service account for the namespace in which the GCS exists.
  *   `sink` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Destination.t`, *default:* `nil`) - Sink is a reference to an object that will resolve to a domain name or a URI directly to use as the sink.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bucket => String.t(),
          :ceOverrides => GoogleApi.CloudRun.V1alpha1.Model.CloudEventOverrides.t(),
          :eventTypes => list(String.t()),
          :objectNamePrefix => String.t(),
          :payloadFormat => String.t(),
          :project => String.t(),
          :pubsubSecret => GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector.t(),
          :secret => GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector.t(),
          :serviceAccountName => String.t(),
          :sink => GoogleApi.CloudRun.V1alpha1.Model.Destination.t()
        }

  field(:bucket)
  field(:ceOverrides, as: GoogleApi.CloudRun.V1alpha1.Model.CloudEventOverrides)
  field(:eventTypes, type: :list)
  field(:objectNamePrefix)
  field(:payloadFormat)
  field(:project)
  field(:pubsubSecret, as: GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector)
  field(:secret, as: GoogleApi.CloudRun.V1alpha1.Model.SecretKeySelector)
  field(:serviceAccountName)
  field(:sink, as: GoogleApi.CloudRun.V1alpha1.Model.Destination)
end

defimpl Poison.Decoder, for: GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSourceSpec do
  def decode(value, options) do
    GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSourceSpec.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudRun.V1alpha1.Model.CloudStorageSourceSpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
