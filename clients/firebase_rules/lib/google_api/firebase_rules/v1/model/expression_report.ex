# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.FirebaseRules.V1.Model.ExpressionReport do
  @moduledoc """
  Describes where in a file an expression is found and what it was evaluated to over the course of its use.

  ## Attributes

  *   `children` (*type:* `list(GoogleApi.FirebaseRules.V1.Model.ExpressionReport.t)`, *default:* `nil`) - Subexpressions
  *   `sourcePosition` (*type:* `GoogleApi.FirebaseRules.V1.Model.SourcePosition.t`, *default:* `nil`) - Position of expression in original rules source.
  *   `values` (*type:* `list(GoogleApi.FirebaseRules.V1.Model.ValueCount.t)`, *default:* `nil`) - Values that this expression evaluated to when encountered.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :children => list(GoogleApi.FirebaseRules.V1.Model.ExpressionReport.t()),
          :sourcePosition => GoogleApi.FirebaseRules.V1.Model.SourcePosition.t(),
          :values => list(GoogleApi.FirebaseRules.V1.Model.ValueCount.t())
        }

  field(:children, as: GoogleApi.FirebaseRules.V1.Model.ExpressionReport, type: :list)
  field(:sourcePosition, as: GoogleApi.FirebaseRules.V1.Model.SourcePosition)
  field(:values, as: GoogleApi.FirebaseRules.V1.Model.ValueCount, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.FirebaseRules.V1.Model.ExpressionReport do
  def decode(value, options) do
    GoogleApi.FirebaseRules.V1.Model.ExpressionReport.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.FirebaseRules.V1.Model.ExpressionReport do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
