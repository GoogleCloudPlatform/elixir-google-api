# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.FirebaseRules.V1.Model.Release do
  @moduledoc """
  &#x60;Release&#x60; is a named reference to a &#x60;Ruleset&#x60;. Once a &#x60;Release&#x60; refers to a &#x60;Ruleset&#x60;, rules-enabled services will be able to enforce the &#x60;Ruleset&#x60;.

  ## Attributes

  - createTime (DateTime.t): Time the release was created. Output only. Defaults to: `null`.
  - name (String.t): Resource name for the &#x60;Release&#x60;.  &#x60;Release&#x60; names may be structured &#x60;app1/prod/v2&#x60; or flat &#x60;app1_prod_v2&#x60; which affords developers a great deal of flexibility in mapping the name to the style that best fits their existing development practices. For example, a name could refer to an environment, an app, a version, or some combination of three.  In the table below, for the project name &#x60;projects/foo&#x60;, the following relative release paths show how flat and structured names might be chosen to match a desired development / deployment strategy.  Use Case     | Flat Name           | Structured Name -------------|---------------------|---------------- Environments | releases/qa         | releases/qa Apps         | releases/app1_qa    | releases/app1/qa Versions     | releases/app1_v2_qa | releases/app1/v2/qa  The delimiter between the release name path elements can be almost anything and it should work equally well with the release name list filter, but in many ways the structured paths provide a clearer picture of the relationship between &#x60;Release&#x60; instances.  Format: &#x60;projects/{project_id}/releases/{release_id}&#x60; Defaults to: `null`.
  - rulesetName (String.t): Name of the &#x60;Ruleset&#x60; referred to by this &#x60;Release&#x60;. The &#x60;Ruleset&#x60; must exist the &#x60;Release&#x60; to be created. Defaults to: `null`.
  - updateTime (DateTime.t): Time the release was updated. Output only. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t(),
          :name => any(),
          :rulesetName => any(),
          :updateTime => DateTime.t()
        }

  field(:createTime, as: DateTime)
  field(:name)
  field(:rulesetName)
  field(:updateTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.FirebaseRules.V1.Model.Release do
  def decode(value, options) do
    GoogleApi.FirebaseRules.V1.Model.Release.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.FirebaseRules.V1.Model.Release do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
