# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudPrivateCatalog.V1beta1.Api.Folders do
  @moduledoc """
  API calls for all endpoints tagged `Folders`.
  """

  alias GoogleApi.CloudPrivateCatalog.V1beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Search Catalog resources that consumers have access to, within the
  scope of the consumer cloud resource hierarchy context.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudPrivateCatalog.V1beta1.Connection.t`) - Connection to server
  *   `resource` (*type:* `String.t`) - Required. The name of the resource context. It can be in following formats:

      * `projects/{project_id}`
      * `folders/{folder_id}`
      * `organizations/{organization_id}`
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of entries that are requested.
      *   `:pageToken` (*type:* `String.t`) - A pagination token returned from a previous call to SearchCatalogs that
          indicates where this listing should continue from.
          This field is optional.
      *   `:query` (*type:* `String.t`) - The query to filter the catalogs. The supported queries are:

          * Get a single catalog: `name=catalogs/{catalog_id}`
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec cloudprivatecatalog_folders_catalogs_search(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok,
           GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudprivatecatalog_folders_catalogs_search(
        connection,
        resource,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+resource}/catalogs:search", %{
        "resource" => URI.encode(resource, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchCatalogsResponse{}
        ]
    )
  end

  @doc """
  Search Product resources that consumers have access to, within the
  scope of the consumer cloud resource hierarchy context.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudPrivateCatalog.V1beta1.Connection.t`) - Connection to server
  *   `resource` (*type:* `String.t`) - Required. The name of the resource context. See
      SearchCatalogsRequest.resource for details.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of entries that are requested.
      *   `:pageToken` (*type:* `String.t`) - A pagination token returned from a previous call to SearchProducts that
          indicates where this listing should continue from.
          This field is optional.
      *   `:query` (*type:* `String.t`) - The query to filter the products.

          The supported queries are:
          * List products of all catalogs: empty
          * List products under a catalog: `parent=catalogs/{catalog_id}`
          * Get a product by name:
          `name=catalogs/{catalog_id}/products/{product_id}`
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec cloudprivatecatalog_folders_products_search(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok,
           GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudprivatecatalog_folders_products_search(
        connection,
        resource,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+resource}/products:search", %{
        "resource" => URI.encode(resource, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchProductsResponse{}
        ]
    )
  end

  @doc """
  Search Version resources that consumers have access to, within the
  scope of the consumer cloud resource hierarchy context.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudPrivateCatalog.V1beta1.Connection.t`) - Connection to server
  *   `resource` (*type:* `String.t`) - Required. The name of the resource context. See
      SearchCatalogsRequest.resource for details.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:pageSize` (*type:* `integer()`) - The maximum number of entries that are requested.
      *   `:pageToken` (*type:* `String.t`) - A pagination token returned from a previous call to SearchVersions
          that indicates where this listing should continue from.
          This field is optional.
      *   `:query` (*type:* `String.t`) - The query to filter the versions. Required.

          The supported queries are:
          * List versions under a product:
          `parent=catalogs/{catalog_id}/products/{product_id}`
          * Get a version by name:
          `name=catalogs/{catalog_id}/products/{product_id}/versions/{version_id}`
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec cloudprivatecatalog_folders_versions_search(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok,
           GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def cloudprivatecatalog_folders_versions_search(
        connection,
        resource,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :pageSize => :query,
      :pageToken => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/{+resource}/versions:search", %{
        "resource" => URI.encode(resource, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++
        [
          struct:
            %GoogleApi.CloudPrivateCatalog.V1beta1.Model.GoogleCloudPrivatecatalogV1beta1SearchVersionsResponse{}
        ]
    )
  end
end
