# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerSpec do
  @moduledoc """
  Specify a custom container to deploy. Our ContainerSpec is a subset of the Kubernetes Container specification. https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#container-v1-core

  ## Attributes

  *   `args` (*type:* `list(String.t)`, *default:* `nil`) - Immutable. Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  *   `command` (*type:* `list(String.t)`, *default:* `nil`) - Immutable. Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
  *   `env` (*type:* `list(GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_EnvVar.t)`, *default:* `nil`) - Immutable. List of environment variables to set in the container.
  *   `image` (*type:* `String.t`, *default:* `nil`) - Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
  *   `ports` (*type:* `list(GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerPort.t)`, *default:* `nil`) - Immutable. List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :args => list(String.t()),
          :command => list(String.t()),
          :env => list(GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_EnvVar.t()),
          :image => String.t(),
          :ports => list(GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerPort.t())
        }

  field(:args, type: :list)
  field(:command, type: :list)
  field(:env, as: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_EnvVar, type: :list)
  field(:image)
  field(:ports, as: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerPort, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerSpec do
  def decode(value, options) do
    GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerSpec.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_ContainerSpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
