# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1__PredictRequest do
  @moduledoc """
  Request for predictions to be issued against a trained model.  The body of the request is a single JSON object with a single top-level field:  &lt;dl&gt;   &lt;dt&gt;instances&lt;/dt&gt;   &lt;dd&gt;A JSON array containing values representing the instances to use for       prediction.&lt;/dd&gt; &lt;/dl&gt;  The structure of each element of the instances list is determined by your model&#39;s input definition. Instances can include named inputs or can contain only unlabeled values.  Not all data includes named inputs. Some instances will be simple JSON values (boolean, number, or string). However, instances are often lists of simple values, or complex nested lists. Here are some examples of request bodies:  CSV data with each row encoded as a string value: &lt;pre&gt; {\&quot;instances\&quot;: [\&quot;1.0,true,\\\\\&quot;x\\\\\&quot;\&quot;, \&quot;-2.0,false,\\\\\&quot;y\\\\\&quot;\&quot;]} &lt;/pre&gt; Plain text: &lt;pre&gt; {\&quot;instances\&quot;: [\&quot;the quick brown fox\&quot;, \&quot;la bruja le dio\&quot;]} &lt;/pre&gt; Sentences encoded as lists of words (vectors of strings): &lt;pre&gt; {   \&quot;instances\&quot;: [     [\&quot;the\&quot;,\&quot;quick\&quot;,\&quot;brown\&quot;],     [\&quot;la\&quot;,\&quot;bruja\&quot;,\&quot;le\&quot;],     ...   ] } &lt;/pre&gt; Floating point scalar values: &lt;pre&gt; {\&quot;instances\&quot;: [0.0, 1.1, 2.2]} &lt;/pre&gt; Vectors of integers: &lt;pre&gt; {   \&quot;instances\&quot;: [     [0, 1, 2],     [3, 4, 5],     ...   ] } &lt;/pre&gt; Tensors (in this case, two-dimensional tensors): &lt;pre&gt; {   \&quot;instances\&quot;: [     [       [0, 1, 2],       [3, 4, 5]     ],     ...   ] } &lt;/pre&gt; Images can be represented different ways. In this encoding scheme the first two dimensions represent the rows and columns of the image, and the third contains lists (vectors) of the R, G, and B values for each pixel. &lt;pre&gt; {   \&quot;instances\&quot;: [     [       [         [138, 30, 66],         [130, 20, 56],         ...       ],       [         [126, 38, 61],         [122, 24, 57],         ...       ],       ...     ],     ...   ] } &lt;/pre&gt; JSON strings must be encoded as UTF-8. To send binary data, you must base64-encode the data and mark it as binary. To mark a JSON string as binary, replace it with a JSON object with a single attribute named &#x60;b64&#x60;: &lt;pre&gt;{\&quot;b64\&quot;: \&quot;...\&quot;} &lt;/pre&gt; For example:  Two Serialized tf.Examples (fake data, for illustrative purposes only): &lt;pre&gt; {\&quot;instances\&quot;: [{\&quot;b64\&quot;: \&quot;X5ad6u\&quot;}, {\&quot;b64\&quot;: \&quot;IA9j4nx\&quot;}]} &lt;/pre&gt; Two JPEG image byte strings (fake data, for illustrative purposes only): &lt;pre&gt; {\&quot;instances\&quot;: [{\&quot;b64\&quot;: \&quot;ASa8asdf\&quot;}, {\&quot;b64\&quot;: \&quot;JLK7ljk3\&quot;}]} &lt;/pre&gt; If your data includes named references, format each instance as a JSON object with the named references as the keys:  JSON input data to be preprocessed: &lt;pre&gt; {   \&quot;instances\&quot;: [     {       \&quot;a\&quot;: 1.0,       \&quot;b\&quot;: true,       \&quot;c\&quot;: \&quot;x\&quot;     },     {       \&quot;a\&quot;: -2.0,       \&quot;b\&quot;: false,       \&quot;c\&quot;: \&quot;y\&quot;     }   ] } &lt;/pre&gt; Some models have an underlying TensorFlow graph that accepts multiple input tensors. In this case, you should use the names of JSON name/value pairs to identify the input tensors, as shown in the following exmaples:  For a graph with input tensor aliases \&quot;tag\&quot; (string) and \&quot;image\&quot; (base64-encoded string): &lt;pre&gt; {   \&quot;instances\&quot;: [     {       \&quot;tag\&quot;: \&quot;beach\&quot;,       \&quot;image\&quot;: {\&quot;b64\&quot;: \&quot;ASa8asdf\&quot;}     },     {       \&quot;tag\&quot;: \&quot;car\&quot;,       \&quot;image\&quot;: {\&quot;b64\&quot;: \&quot;JLK7ljk3\&quot;}     }   ] } &lt;/pre&gt; For a graph with input tensor aliases \&quot;tag\&quot; (string) and \&quot;image\&quot; (3-dimensional array of 8-bit ints): &lt;pre&gt; {   \&quot;instances\&quot;: [     {       \&quot;tag\&quot;: \&quot;beach\&quot;,       \&quot;image\&quot;: [         [           [138, 30, 66],           [130, 20, 56],           ...         ],         [           [126, 38, 61],           [122, 24, 57],           ...         ],         ...       ]     },     {       \&quot;tag\&quot;: \&quot;car\&quot;,       \&quot;image\&quot;: [         [           [255, 0, 102],           [255, 0, 97],           ...         ],         [           [254, 1, 101],           [254, 2, 93],           ...         ],         ...       ]     },     ...   ] } &lt;/pre&gt; If the call is successful, the response body will contain one prediction entry per instance in the request body. If prediction fails for any instance, the response body will contain no predictions and will contian a single error entry instead.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"httpBody"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1__PredictRequest do
  import GoogleApi.MachineLearning.V1.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"httpBody", :struct, GoogleApi.MachineLearning.V1.Model.GoogleApi__HttpBody, options)
  end
end

