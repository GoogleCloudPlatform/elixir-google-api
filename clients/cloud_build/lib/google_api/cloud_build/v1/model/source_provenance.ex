# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudBuild.V1.Model.SourceProvenance do
  @moduledoc """
  Provenance of the source. Ways to find the original source, or verify that some source was used for this build.

  ## Attributes

  - fileHashes (%{optional(String.t) &#x3D;&gt; FileHashes}): Output only. Hash(es) of the build source, which can be used to verify that the originalsource integrity was maintained in the build. Note that &#x60;FileHashes&#x60; willonly be populated if &#x60;BuildOptions&#x60; has requested a &#x60;SourceProvenanceHash&#x60;.  The keys to this map are file paths used as build source and the values contain the hash values for those files.  If the build source came in a single package such as a gzipped tarfile (&#x60;.tar.gz&#x60;), the &#x60;FileHash&#x60; will be for the single path to that file. Defaults to: `null`.
  - resolvedRepoSource (RepoSource): A copy of the build&#39;s &#x60;source.repo_source&#x60;, if exists, with any revisions resolved. Defaults to: `null`.
  - resolvedStorageSource (StorageSource): A copy of the build&#39;s &#x60;source.storage_source&#x60;, if exists, with any generations resolved. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :fileHashes => map(),
          :resolvedRepoSource => GoogleApi.CloudBuild.V1.Model.RepoSource.t(),
          :resolvedStorageSource => GoogleApi.CloudBuild.V1.Model.StorageSource.t()
        }

  field(:fileHashes, as: GoogleApi.CloudBuild.V1.Model.FileHashes, type: :map)
  field(:resolvedRepoSource, as: GoogleApi.CloudBuild.V1.Model.RepoSource)
  field(:resolvedStorageSource, as: GoogleApi.CloudBuild.V1.Model.StorageSource)
end

defimpl Poison.Decoder, for: GoogleApi.CloudBuild.V1.Model.SourceProvenance do
  def decode(value, options) do
    GoogleApi.CloudBuild.V1.Model.SourceProvenance.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudBuild.V1.Model.SourceProvenance do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
