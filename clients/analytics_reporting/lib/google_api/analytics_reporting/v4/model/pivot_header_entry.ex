# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.AnalyticsReporting.V4.Model.PivotHeaderEntry do
  @moduledoc """
  The headers for the each of the metric column corresponding to the metrics requested in the pivots section of the response.

  ## Attributes

  - dimensionNames ([String.t]): The name of the dimensions in the pivot response. Defaults to: `null`.
  - dimensionValues ([String.t]): The values for the dimensions in the pivot. Defaults to: `null`.
  - metric (MetricHeaderEntry): The metric header for the metric in the pivot. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dimensionNames => list(any()),
          :dimensionValues => list(any()),
          :metric => GoogleApi.AnalyticsReporting.V4.Model.MetricHeaderEntry.t()
        }

  field(:dimensionNames, type: :list)
  field(:dimensionValues, type: :list)
  field(:metric, as: GoogleApi.AnalyticsReporting.V4.Model.MetricHeaderEntry)
end

defimpl Poison.Decoder, for: GoogleApi.AnalyticsReporting.V4.Model.PivotHeaderEntry do
  def decode(value, options) do
    GoogleApi.AnalyticsReporting.V4.Model.PivotHeaderEntry.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AnalyticsReporting.V4.Model.PivotHeaderEntry do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
