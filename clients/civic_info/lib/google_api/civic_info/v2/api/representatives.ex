# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CivicInfo.V2.Api.Representatives do
  @moduledoc """
  API calls for all endpoints tagged `Representatives`.
  """

  alias GoogleApi.CivicInfo.V2.Connection
  import GoogleApi.CivicInfo.V2.RequestBuilder


  @doc """
  Looks up political geography and representative information for a single address.

  ## Parameters

  - connection (GoogleApi.CivicInfo.V2.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :address (String): The address to look up. May only be specified if the field ocdId is not given in the URL.
    - :include_offices (Boolean): Whether to return information about offices and officials. If false, only the top-level district information will be returned.
    - :levels (List[String]): A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don&#39;t contain a matching office will not be returned.
    - :roles (List[String]): A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don&#39;t contain a matching office will not be returned.
    - :body (RepresentativeInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.CivicInfo.V2.Model.RepresentativeInfoResponse{}} on success
  {:error, info} on failure
  """
  @spec civicinfo_representatives_representative_info_by_address(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.CivicInfo.V2.Model.RepresentativeInfoResponse.t} | {:error, Tesla.Env.t}
  def civicinfo_representatives_representative_info_by_address(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"address" => :query,
      :"includeOffices" => :query,
      :"levels" => :query,
      :"roles" => :query,
      :"body" => :body
    }
    %{}
    |> method(:get)
    |> url("/representatives")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.CivicInfo.V2.Model.RepresentativeInfoResponse{})
  end

  @doc """
  Looks up representative information for a single geographic division.

  ## Parameters

  - connection (GoogleApi.CivicInfo.V2.Connection): Connection to server
  - ocd_id (String): The Open Civic Data division identifier of the division to look up.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :levels (List[String]): A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don&#39;t contain a matching office will not be returned.
    - :recursive (Boolean): If true, information about all divisions contained in the division requested will be included as well. For example, if querying ocd-division/country:us/district:dc, this would also return all DC&#39;s wards and ANCs.
    - :roles (List[String]): A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don&#39;t contain a matching office will not be returned.
    - :body (DivisionRepresentativeInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.CivicInfo.V2.Model.RepresentativeInfoData{}} on success
  {:error, info} on failure
  """
  @spec civicinfo_representatives_representative_info_by_division(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.CivicInfo.V2.Model.RepresentativeInfoData.t} | {:error, Tesla.Env.t}
  def civicinfo_representatives_representative_info_by_division(connection, ocd_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"levels" => :query,
      :"recursive" => :query,
      :"roles" => :query,
      :"body" => :body
    }
    %{}
    |> method(:get)
    |> url("/representatives/{ocdId}", %{
         "ocdId" => URI.encode_www_form(ocd_id)
       })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.CivicInfo.V2.Model.RepresentativeInfoData{})
  end
end
