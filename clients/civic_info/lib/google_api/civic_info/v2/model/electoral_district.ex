# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CivicInfo.V2.Model.ElectoralDistrict do
  @moduledoc """
  Describes the geographic scope of a contest.

  ## Attributes

  - id (String.t): An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id \&quot;34\&quot; and a scope of stateUpper. Defaults to: `null`.
  - kgForeignKey (String.t):  Defaults to: `null`.
  - name (String.t): The name of the district. Defaults to: `null`.
  - scope (String.t): The geographic scope of this district. If unspecified the district&#39;s geography is not known. One of: national, statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, township, countyCouncil, cityCouncil, ward, special Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :id => any(),
          :kgForeignKey => any(),
          :name => any(),
          :scope => any()
        }

  field(:id)
  field(:kgForeignKey)
  field(:name)
  field(:scope)
end

defimpl Poison.Decoder, for: GoogleApi.CivicInfo.V2.Model.ElectoralDistrict do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.ElectoralDistrict.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CivicInfo.V2.Model.ElectoralDistrict do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
