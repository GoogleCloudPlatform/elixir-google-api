# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.CivicInfo.V2.Model.Candidate do
  @moduledoc """
  Information about a candidate running for elected office.

  ## Attributes

  - candidateUrl (String.t): The URL for the candidate's campaign web site. Defaults to `nil`.
  - channels (list(GoogleApi.CivicInfo.V2.Model.Channel.t)): A list of known (social) media channels for this candidate. Defaults to `nil`.
  - email (String.t): The email address for the candidate's campaign. Defaults to `nil`.
  - name (String.t): The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. "Mitt Romney / Paul Ryan" Defaults to `nil`.
  - orderOnBallot (String.t): The order the candidate appears on the ballot for this contest. Defaults to `nil`.
  - party (String.t): The full name of the party the candidate is a member of. Defaults to `nil`.
  - phone (String.t): The voice phone number for the candidate's campaign office. Defaults to `nil`.
  - photoUrl (String.t): A URL for a photo of the candidate. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :candidateUrl => String.t(),
          :channels => list(GoogleApi.CivicInfo.V2.Model.Channel.t()),
          :email => String.t(),
          :name => String.t(),
          :orderOnBallot => String.t(),
          :party => String.t(),
          :phone => String.t(),
          :photoUrl => String.t()
        }

  field(:candidateUrl)
  field(:channels, as: GoogleApi.CivicInfo.V2.Model.Channel, type: :list)
  field(:email)
  field(:name)
  field(:orderOnBallot)
  field(:party)
  field(:phone)
  field(:photoUrl)
end

defimpl Poison.Decoder, for: GoogleApi.CivicInfo.V2.Model.Candidate do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.Candidate.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CivicInfo.V2.Model.Candidate do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
