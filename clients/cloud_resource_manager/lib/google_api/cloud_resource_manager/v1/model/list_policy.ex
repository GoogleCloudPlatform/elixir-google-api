# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudResourceManager.V1.Model.ListPolicy do
  @moduledoc """
  Used in &#x60;policy_type&#x60; to specify how &#x60;list_policy&#x60; behaves at this resource.  &#x60;ListPolicy&#x60; can define specific values and subtrees of Cloud Resource Manager resource hierarchy (&#x60;Organizations&#x60;, &#x60;Folders&#x60;, &#x60;Projects&#x60;) that are allowed or denied by setting the &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; fields. This is achieved by using the &#x60;under:&#x60; and optional &#x60;is:&#x60; prefixes. The &#x60;under:&#x60; prefix is used to denote resource subtree values. The &#x60;is:&#x60; prefix is used to denote specific values, and is required only if the value contains a \&quot;:\&quot;. Values prefixed with \&quot;is:\&quot; are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats:     - “projects/&lt;project-id&gt;”, e.g. “projects/tokyo-rain-123”     - “folders/&lt;folder-id&gt;”, e.g. “folders/1234”     - “organizations/&lt;organization-id&gt;”, e.g. “organizations/1234” The &#x60;supports_under&#x60; field of the associated &#x60;Constraint&#x60;  defines whether ancestry prefixes can be used. You can set &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; in the same &#x60;Policy&#x60; if &#x60;all_values&#x60; is &#x60;ALL_VALUES_UNSPECIFIED&#x60;. &#x60;ALLOW&#x60; or &#x60;DENY&#x60; are used to allow or deny all values. If &#x60;all_values&#x60; is set to either &#x60;ALLOW&#x60; or &#x60;DENY&#x60;, &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; must be unset.

  ## Attributes

  - allValues (String.t): The policy all_values state. Defaults to: `null`.
    - Enum - one of [ALL_VALUES_UNSPECIFIED, ALLOW, DENY]
  - allowedValues ([String.t]): List of values allowed  at this resource. Can only be set if &#x60;all_values&#x60; is set to &#x60;ALL_VALUES_UNSPECIFIED&#x60;. Defaults to: `null`.
  - deniedValues ([String.t]): List of values denied at this resource. Can only be set if &#x60;all_values&#x60; is set to &#x60;ALL_VALUES_UNSPECIFIED&#x60;. Defaults to: `null`.
  - inheritFromParent (boolean()): Determines the inheritance behavior for this &#x60;Policy&#x60;.  By default, a &#x60;ListPolicy&#x60; set at a resource supercedes any &#x60;Policy&#x60; set anywhere up the resource hierarchy. However, if &#x60;inherit_from_parent&#x60; is set to &#x60;true&#x60;, then the values from the effective &#x60;Policy&#x60; of the parent resource are inherited, meaning the values set in this &#x60;Policy&#x60; are added to the values inherited up the hierarchy.  Setting &#x60;Policy&#x60; hierarchies that inherit both allowed values and denied values isn&#39;t recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a &#x60;Policy&#x60; with &#x60;allowed_values&#x60; set that inherits a &#x60;Policy&#x60; with &#x60;denied_values&#x60; set. In this case, the values that are allowed must be in &#x60;allowed_values&#x60; and not present in &#x60;denied_values&#x60;.  For example, suppose you have a &#x60;Constraint&#x60; &#x60;constraints/serviceuser.services&#x60;, which has a &#x60;constraint_type&#x60; of &#x60;list_constraint&#x60;, and with &#x60;constraint_default&#x60; set to &#x60;ALLOW&#x60;. Suppose that at the Organization level, a &#x60;Policy&#x60; is applied that restricts the allowed API activations to {&#x60;E1&#x60;, &#x60;E2&#x60;}. Then, if a &#x60;Policy&#x60; is applied to a project below the Organization that has &#x60;inherit_from_parent&#x60; set to &#x60;false&#x60; and field all_values set to DENY, then an attempt to activate any API will be denied.  The following examples demonstrate different possible layerings for &#x60;projects/bar&#x60; parented by &#x60;organizations/foo&#x60;:  Example 1 (no inherited values):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: “E1” allowed_values:”E2”}   &#x60;projects/bar&#x60; has &#x60;inherit_from_parent&#x60; &#x60;false&#x60; and values:     {allowed_values: \&quot;E3\&quot; allowed_values: \&quot;E4\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;E3&#x60;, and &#x60;E4&#x60;.  Example 2 (inherited values):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: “E1” allowed_values:”E2”}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with values:     {value: “E3” value: ”E4” inherit_from_parent: true} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;, &#x60;E3&#x60;, and &#x60;E4&#x60;.  Example 3 (inheriting both allowed and denied values):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: \&quot;E1\&quot; allowed_values: \&quot;E2\&quot;}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with:     {denied_values: \&quot;E1\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The value accepted at &#x60;projects/bar&#x60; is &#x60;E2&#x60;.  Example 4 (RestoreDefault):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: “E1” allowed_values:”E2”}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with values:     {RestoreDefault: {}} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are either all or none depending on the value of &#x60;constraint_default&#x60; (if &#x60;ALLOW&#x60;, all; if &#x60;DENY&#x60;, none).  Example 5 (no policy inherits parent policy):   &#x60;organizations/foo&#x60; has no &#x60;Policy&#x60; set.   &#x60;projects/bar&#x60; has no &#x60;Policy&#x60; set. The accepted values at both levels are either all or none depending on the value of &#x60;constraint_default&#x60; (if &#x60;ALLOW&#x60;, all; if &#x60;DENY&#x60;, none).  Example 6 (ListConstraint allowing all):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: “E1” allowed_values: ”E2”}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with:     {all: ALLOW} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, E2&#x60;. Any value is accepted at &#x60;projects/bar&#x60;.  Example 7 (ListConstraint allowing none):   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: “E1” allowed_values: ”E2”}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with:     {all: DENY} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, E2&#x60;. No value is accepted at &#x60;projects/bar&#x60;.  Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy   O1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3},   &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values:     {allowed_values: \&quot;under:organizations/O1\&quot;}   &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with:     {allowed_values: \&quot;under:projects/P3\&quot;}     {denied_values: \&quot;under:folders/F2\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;organizations/O1&#x60;,   &#x60;folders/F1&#x60;, &#x60;folders/F2&#x60;, &#x60;projects/P1&#x60;, &#x60;projects/P2&#x60;,   &#x60;projects/P3&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;organizations/O1&#x60;,   &#x60;folders/F1&#x60;, &#x60;projects/P1&#x60;. Defaults to: `null`.
  - suggestedValue (String.t): Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this &#x60;Policy&#x60;. If &#x60;suggested_value&#x60; is not set, it will inherit the value specified higher in the hierarchy, unless &#x60;inherit_from_parent&#x60; is &#x60;false&#x60;. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allValues => any(),
          :allowedValues => list(any()),
          :deniedValues => list(any()),
          :inheritFromParent => any(),
          :suggestedValue => any()
        }

  field(:allValues)
  field(:allowedValues, type: :list)
  field(:deniedValues, type: :list)
  field(:inheritFromParent)
  field(:suggestedValue)
end

defimpl Poison.Decoder, for: GoogleApi.CloudResourceManager.V1.Model.ListPolicy do
  def decode(value, options) do
    GoogleApi.CloudResourceManager.V1.Model.ListPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudResourceManager.V1.Model.ListPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
