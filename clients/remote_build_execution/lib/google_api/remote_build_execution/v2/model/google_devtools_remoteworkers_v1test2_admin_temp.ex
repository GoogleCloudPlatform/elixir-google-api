# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.RemoteBuildExecution.V2.Model.GoogleDevtoolsRemoteworkersV1test2AdminTemp do
  @moduledoc """
  AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
  because we do not yet know the best way to represent admin tasks; it's
  possible that this will be entirely replaced in later versions of this API.
  If this message proves to be sufficient, it will be renamed in the alpha or
  beta release of this API.

  This message (suitably marshalled into a protobuf.Any) can be used as the
  inline_assignment field in a lease; the lease assignment field should simply
  be `"admin"` in these cases.

  This message is heavily based on Swarming administration tasks from the LUCI
  project (http://github.com/luci/luci-py/appengine/swarming).

  ## Attributes

  *   `arg` (*type:* `String.t`, *default:* `nil`) - The argument to the admin action; see `Command` for semantics.
  *   `command` (*type:* `String.t`, *default:* `nil`) - The admin action; see `Command` for legal values.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :arg => String.t(),
          :command => String.t()
        }

  field(:arg)
  field(:command)
end

defimpl Poison.Decoder,
  for: GoogleApi.RemoteBuildExecution.V2.Model.GoogleDevtoolsRemoteworkersV1test2AdminTemp do
  def decode(value, options) do
    GoogleApi.RemoteBuildExecution.V2.Model.GoogleDevtoolsRemoteworkersV1test2AdminTemp.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.RemoteBuildExecution.V2.Model.GoogleDevtoolsRemoteworkersV1test2AdminTemp do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
