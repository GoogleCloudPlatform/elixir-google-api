# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration do
  @moduledoc """
  Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely registering an Eddystone-EID beacon with the service are supported:  1. Perform an ECDH key exchange via this API, including a previous call    to &#x60;GET /v1beta1/eidparams&#x60;. In this case the fields    &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; should be    populated and &#x60;beacon_identity_key&#x60; should not be populated. This    method ensures that only the two parties in the ECDH key exchange can    compute the identity key, which becomes a secret between them. 2. Derive or obtain the beacon&#39;s identity key via other secure means    (perhaps an ECDH key exchange between the beacon and a mobile device    or any other secure method), and then submit the resulting identity key    to the service. In this case &#x60;beacon_identity_key&#x60; field should be    populated, and neither of &#x60;beacon_ecdh_public_key&#x60; nor    &#x60;service_ecdh_public_key&#x60; fields should be. The security of this method    depends on how securely the parties involved (in particular the    bluetooth client) handle the identity key, and obviously on how    securely the identity key was generated.  See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.

  ## Attributes

  - beaconEcdhPublicKey (binary()): The beacon&#39;s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, &#x60;service_ecdh_public_key&#x60; must also be populated, and &#x60;beacon_identity_key&#x60; must not be. Defaults to: `null`.
  - beaconIdentityKey (binary()): The private key of the beacon. If this field is populated, &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; must not be populated. Defaults to: `null`.
  - initialClockValue (String.t): The initial clock value of the beacon. The beacon&#39;s clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero. Defaults to: `null`.
  - initialEid (binary()): An initial ephemeral ID calculated using the clock value submitted as &#x60;initial_clock_value&#x60;, and the secret key generated by the Diffie-Hellman key exchange using &#x60;service_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60;. This initial EID value will be used by the service to confirm that the key exchange process was successful. Defaults to: `null`.
  - rotationPeriodExponent (integer()): Indicates the nominal period between each rotation of the beacon&#39;s ephemeral ID. \&quot;Nominal\&quot; because the beacon should randomize the actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value corresponds to a power-of-two scaler on the beacon&#39;s clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds. Defaults to: `null`.
  - serviceEcdhPublicKey (binary()): The service&#39;s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, &#x60;beacon_ecdh_public_key&#x60; must also be populated, and &#x60;beacon_identity_key&#x60; must not be. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :beaconEcdhPublicKey => any(),
          :beaconIdentityKey => any(),
          :initialClockValue => any(),
          :initialEid => any(),
          :rotationPeriodExponent => any(),
          :serviceEcdhPublicKey => any()
        }

  field(:beaconEcdhPublicKey)
  field(:beaconIdentityKey)
  field(:initialClockValue)
  field(:initialEid)
  field(:rotationPeriodExponent)
  field(:serviceEcdhPublicKey)
end

defimpl Poison.Decoder, for: GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration do
  def decode(value, options) do
    GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
