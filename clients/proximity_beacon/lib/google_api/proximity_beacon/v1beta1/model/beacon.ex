# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ProximityBeacon.V1beta1.Model.Beacon do
  @moduledoc """
  Details of a beacon device.

  ## Attributes

  - advertisedId (AdvertisedId): The identifier of a beacon as advertised by it. This field must be populated when registering. It may be empty when updating a beacon record because it is ignored in updates.  When registering a beacon that broadcasts Eddystone-EID, this field should contain a \&quot;stable\&quot; Eddystone-UID that identifies the beacon and links it to its attachments. The stable Eddystone-UID is only used for administering the beacon. Defaults to: `null`.
  - beaconName (String.t): Resource name of this beacon. A beacon name has the format \&quot;beacons/N!beaconId\&quot; where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon&#39;s type. Possible values are &#x60;3&#x60; for Eddystone, &#x60;1&#x60; for iBeacon, or &#x60;5&#x60; for AltBeacon.  This field must be left empty when registering. After reading a beacon, clients can use the name for future operations. Defaults to: `null`.
  - description (String.t): Free text used to identify and describe the beacon. Maximum length 140 characters. Optional. Defaults to: `null`.
  - ephemeralIdRegistration (EphemeralIdRegistration): Write-only registration parameters for beacons using Eddystone-EID (remotely resolved ephemeral ID) format. This information will not be populated in API responses. When submitting this data, the &#x60;advertised_id&#x60; field must contain an ID of type Eddystone-UID. Any other ID type will result in an error. Defaults to: `null`.
  - expectedStability (String.t): Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional. Defaults to: `null`.
    - Enum - one of [STABILITY_UNSPECIFIED, STABLE, PORTABLE, MOBILE, ROVING]
  - indoorLevel (IndoorLevel): The indoor level information for this beacon, if known. As returned by the Google Maps API. Optional. Defaults to: `null`.
  - latLng (LatLng): The location of the beacon, expressed as a latitude and longitude pair. This location is given when the beacon is registered or updated. It does not necessarily indicate the actual current location of the beacon. Optional. Defaults to: `null`.
  - placeId (String.t): The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional. Defaults to: `null`.
  - properties (%{optional(String.t) &#x3D;&gt; String.t}): Properties of the beacon device, for example battery type or firmware version. Optional. Defaults to: `null`.
  - provisioningKey (binary()): Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to &#x60;GET /v1beta1/beacons/3!beaconId&#x60; from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon&#39;s confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself. Defaults to: `null`.
  - status (String.t): Current status of the beacon. Required. Defaults to: `null`.
    - Enum - one of [STATUS_UNSPECIFIED, ACTIVE, DECOMMISSIONED, INACTIVE]
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :advertisedId => GoogleApi.ProximityBeacon.V1beta1.Model.AdvertisedId.t(),
          :beaconName => any(),
          :description => any(),
          :ephemeralIdRegistration =>
            GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration.t(),
          :expectedStability => any(),
          :indoorLevel => GoogleApi.ProximityBeacon.V1beta1.Model.IndoorLevel.t(),
          :latLng => GoogleApi.ProximityBeacon.V1beta1.Model.LatLng.t(),
          :placeId => any(),
          :properties => map(),
          :provisioningKey => any(),
          :status => any()
        }

  field(:advertisedId, as: GoogleApi.ProximityBeacon.V1beta1.Model.AdvertisedId)
  field(:beaconName)
  field(:description)

  field(
    :ephemeralIdRegistration,
    as: GoogleApi.ProximityBeacon.V1beta1.Model.EphemeralIdRegistration
  )

  field(:expectedStability)
  field(:indoorLevel, as: GoogleApi.ProximityBeacon.V1beta1.Model.IndoorLevel)
  field(:latLng, as: GoogleApi.ProximityBeacon.V1beta1.Model.LatLng)
  field(:placeId)
  field(:properties, type: :map)
  field(:provisioningKey)
  field(:status)
end

defimpl Poison.Decoder, for: GoogleApi.ProximityBeacon.V1beta1.Model.Beacon do
  def decode(value, options) do
    GoogleApi.ProximityBeacon.V1beta1.Model.Beacon.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ProximityBeacon.V1beta1.Model.Beacon do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
