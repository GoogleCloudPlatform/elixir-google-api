# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Firestore.V1beta1.Model.ListenResponse do
  @moduledoc """
  The response for Firestore.Listen.

  ## Attributes

  - documentChange (DocumentChange): A Document has changed. Defaults to: `null`.
  - documentDelete (DocumentDelete): A Document has been deleted. Defaults to: `null`.
  - documentRemove (DocumentRemove): A Document has been removed from a target (because it is no longer relevant to that target). Defaults to: `null`.
  - filter (ExistenceFilter): A filter to apply to the set of documents previously returned for the given target.  Returned when documents may have been removed from the given target, but the exact documents are unknown. Defaults to: `null`.
  - targetChange (TargetChange): Targets have changed. Defaults to: `null`.
  """

  defstruct [
    :documentChange,
    :documentDelete,
    :documentRemove,
    :filter,
    :targetChange
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Firestore.V1beta1.Model.ListenResponse do
  import GoogleApi.Firestore.V1beta1.Deserializer

  def decode(value, options) do
    value
    |> deserialize(
      :documentChange,
      :struct,
      GoogleApi.Firestore.V1beta1.Model.DocumentChange,
      options
    )
    |> deserialize(
      :documentDelete,
      :struct,
      GoogleApi.Firestore.V1beta1.Model.DocumentDelete,
      options
    )
    |> deserialize(
      :documentRemove,
      :struct,
      GoogleApi.Firestore.V1beta1.Model.DocumentRemove,
      options
    )
    |> deserialize(:filter, :struct, GoogleApi.Firestore.V1beta1.Model.ExistenceFilter, options)
    |> deserialize(
      :targetChange,
      :struct,
      GoogleApi.Firestore.V1beta1.Model.TargetChange,
      options
    )
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firestore.V1beta1.Model.ListenResponse do
  def encode(value, options) do
    GoogleApi.Firestore.V1beta1.Deserializer.serialize_non_nil(value, options)
  end
end
