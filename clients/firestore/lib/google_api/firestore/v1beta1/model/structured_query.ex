# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  @moduledoc """
  A Firestore query.

  ## Attributes

  - endAt (Cursor): A end point for the query results. Defaults to: `null`.
  - from ([CollectionSelector]): The collections to query. Defaults to: `null`.
  - limit (integer()): The maximum number of results to return.  Applies after all other constraints. Must be &gt;&#x3D; 0 if specified. Defaults to: `null`.
  - offset (integer()): The number of results to skip.  Applies before limit, but after all other constraints. Must be &gt;&#x3D; 0 if specified. Defaults to: `null`.
  - orderBy ([Order]): The order to apply to the query results.  Firestore guarantees a stable ordering through the following rules:   * Any field required to appear in &#x60;order_by&#x60;, that is not already    specified in &#x60;order_by&#x60;, is appended to the order in field name order    by default.  * If an order on &#x60;__name__&#x60; is not specified, it is appended by default.  Fields are appended with the same sort direction as the last order specified, or &#39;ASCENDING&#39; if no order was specified. For example:   * &#x60;SELECT * FROM Foo ORDER BY A&#x60; becomes    &#x60;SELECT * FROM Foo ORDER BY A, __name__&#x60;  * &#x60;SELECT * FROM Foo ORDER BY A DESC&#x60; becomes    &#x60;SELECT * FROM Foo ORDER BY A DESC, __name__ DESC&#x60;  * &#x60;SELECT * FROM Foo WHERE A &gt; 1&#x60; becomes    &#x60;SELECT * FROM Foo WHERE A &gt; 1 ORDER BY A, __name__&#x60; Defaults to: `null`.
  - select (Projection): The projection to return. Defaults to: `null`.
  - startAt (Cursor): A starting point for the query results. Defaults to: `null`.
  - where (Filter): The filter to apply. Defaults to: `null`.
  """

  defstruct [
    :endAt,
    :from,
    :limit,
    :offset,
    :orderBy,
    :select,
    :startAt,
    :where
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  import GoogleApi.Firestore.V1beta1.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:endAt, :struct, GoogleApi.Firestore.V1beta1.Model.Cursor, options)
    |> deserialize(:from, :list, GoogleApi.Firestore.V1beta1.Model.CollectionSelector, options)
    |> deserialize(:orderBy, :list, GoogleApi.Firestore.V1beta1.Model.Order, options)
    |> deserialize(:select, :struct, GoogleApi.Firestore.V1beta1.Model.Projection, options)
    |> deserialize(:startAt, :struct, GoogleApi.Firestore.V1beta1.Model.Cursor, options)
    |> deserialize(:where, :struct, GoogleApi.Firestore.V1beta1.Model.Filter, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firestore.V1beta1.Model.StructuredQuery do
  def encode(value, options) do
    GoogleApi.Firestore.V1beta1.Deserializer.serialize_non_nil(value, options)
  end
end
