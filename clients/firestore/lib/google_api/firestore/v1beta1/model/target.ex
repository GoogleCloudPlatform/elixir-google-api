# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Firestore.V1beta1.Model.Target do
  @moduledoc """
  A specification of a set of documents to listen to.

  ## Attributes

  *   `documents` (*type:* `GoogleApi.Firestore.V1beta1.Model.DocumentsTarget.t`, *default:* `nil`) - A target specified by a set of document names.
  *   `once` (*type:* `boolean()`, *default:* `nil`) - If the target should be removed once it is current and consistent.
  *   `query` (*type:* `GoogleApi.Firestore.V1beta1.Model.QueryTarget.t`, *default:* `nil`) - A target specified by a query.
  *   `readTime` (*type:* `DateTime.t`, *default:* `nil`) - Start listening after a specific `read_time`.

      The client must know the state of matching documents at this time.
  *   `resumeToken` (*type:* `String.t`, *default:* `nil`) - A resume token from a prior TargetChange for an identical target.

      Using a resume token with a different target is unsupported and may fail.
  *   `targetId` (*type:* `integer()`, *default:* `nil`) - A client provided target ID.

      If not set, the server will assign an ID for the target.

      Used for resuming a target without changing IDs. The IDs can either be
      client-assigned or be server-assigned in a previous stream. All targets
      with client provided IDs must be added before adding a target that needs
      a server-assigned id.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :documents => GoogleApi.Firestore.V1beta1.Model.DocumentsTarget.t(),
          :once => boolean(),
          :query => GoogleApi.Firestore.V1beta1.Model.QueryTarget.t(),
          :readTime => DateTime.t(),
          :resumeToken => String.t(),
          :targetId => integer()
        }

  field(:documents, as: GoogleApi.Firestore.V1beta1.Model.DocumentsTarget)
  field(:once)
  field(:query, as: GoogleApi.Firestore.V1beta1.Model.QueryTarget)
  field(:readTime, as: DateTime)
  field(:resumeToken)
  field(:targetId)
end

defimpl Poison.Decoder, for: GoogleApi.Firestore.V1beta1.Model.Target do
  def decode(value, options) do
    GoogleApi.Firestore.V1beta1.Model.Target.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firestore.V1beta1.Model.Target do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
