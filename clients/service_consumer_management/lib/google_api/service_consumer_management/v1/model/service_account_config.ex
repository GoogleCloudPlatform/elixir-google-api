# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.ServiceConsumerManagement.V1.Model.ServiceAccountConfig do
  @moduledoc """
  Describes the service account configuration for the tenant project.

  ## Attributes

  - accountId (String.t): ID of the IAM service account to be created in tenant project.
  The email format of the service account is
  "<account-id>@<tenant-project-id>.iam.gserviceaccount.com".
  This account ID must be unique within tenant project and service
  producers have to guarantee it. The ID must be 6-30 characters long, and
  match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`. Defaults to `nil`.
  - tenantProjectRoles (list(String.t)): Roles for the associated service account for the tenant project. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accountId => String.t(),
          :tenantProjectRoles => list(String.t())
        }

  field(:accountId)
  field(:tenantProjectRoles, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ServiceConsumerManagement.V1.Model.ServiceAccountConfig do
  def decode(value, options) do
    GoogleApi.ServiceConsumerManagement.V1.Model.ServiceAccountConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ServiceConsumerManagement.V1.Model.ServiceAccountConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
