# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.CloudKMS.V1.Model.CryptoKey do
  @moduledoc """
  A CryptoKey represents a logical key that can be used for cryptographic
  operations.

  A CryptoKey is made up of one or more versions, which
  represent the actual key material used in cryptographic operations.

  ## Attributes

  - createTime (DateTime.t): Output only. The time at which this CryptoKey was created. Defaults to `nil`.
  - labels (map()): Labels with user-defined metadata. For more information, see
  [Labeling Keys](/kms/docs/labeling-keys). Defaults to `nil`.
  - name (String.t): Output only. The resource name for this CryptoKey in the format
  `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Defaults to `nil`.
  - nextRotationTime (DateTime.t): At next_rotation_time, the Key Management Service will automatically:

  1. Create a new version of this CryptoKey.
  2. Mark the new version as primary.

  Key rotations performed manually via
  CreateCryptoKeyVersion and
  UpdateCryptoKeyPrimaryVersion
  do not affect next_rotation_time.

  Keys with purpose
  ENCRYPT_DECRYPT support
  automatic rotation. For other keys, this field must be omitted. Defaults to `nil`.
  - primary (GoogleApi.CloudKMS.V1.Model.CryptoKeyVersion.t): Output only. A copy of the "primary" CryptoKeyVersion that will be used
  by Encrypt when this CryptoKey is given
  in EncryptRequest.name.

  The CryptoKey's primary version can be updated via
  UpdateCryptoKeyPrimaryVersion.

  All keys with purpose
  ENCRYPT_DECRYPT have a
  primary. For other keys, this field will be omitted. Defaults to `nil`.
  - purpose (String.t): The immutable purpose of this CryptoKey. Defaults to `nil`.
  - rotationPeriod (String.t): next_rotation_time will be advanced by this period when the service
  automatically rotates a key. Must be at least one day.

  If rotation_period is set, next_rotation_time must also be set.

  Keys with purpose
  ENCRYPT_DECRYPT support
  automatic rotation. For other keys, this field must be omitted. Defaults to `nil`.
  - versionTemplate (GoogleApi.CloudKMS.V1.Model.CryptoKeyVersionTemplate.t): A template describing settings for new CryptoKeyVersion instances.
  The properties of new CryptoKeyVersion instances created by either
  CreateCryptoKeyVersion or
  auto-rotation are controlled by this template. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t(),
          :labels => map(),
          :name => String.t(),
          :nextRotationTime => DateTime.t(),
          :primary => GoogleApi.CloudKMS.V1.Model.CryptoKeyVersion.t(),
          :purpose => String.t(),
          :rotationPeriod => String.t(),
          :versionTemplate => GoogleApi.CloudKMS.V1.Model.CryptoKeyVersionTemplate.t()
        }

  field(:createTime, as: DateTime)
  field(:labels, type: :map)
  field(:name)
  field(:nextRotationTime, as: DateTime)
  field(:primary, as: GoogleApi.CloudKMS.V1.Model.CryptoKeyVersion)
  field(:purpose)
  field(:rotationPeriod)
  field(:versionTemplate, as: GoogleApi.CloudKMS.V1.Model.CryptoKeyVersionTemplate)
end

defimpl Poison.Decoder, for: GoogleApi.CloudKMS.V1.Model.CryptoKey do
  def decode(value, options) do
    GoogleApi.CloudKMS.V1.Model.CryptoKey.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudKMS.V1.Model.CryptoKey do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
