# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ToolResults.V1beta3.Api.Histories do
  @moduledoc """
  API calls for all endpoints tagged `Histories`.
  """

  alias GoogleApi.ToolResults.V1beta3.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Creates a History.

  The returned History will have the id set.

  May return any of the following canonical error codes:

  - PERMISSION_DENIED - if the user is not authorized to write to project
  - INVALID_ARGUMENT - if the request is malformed
  - NOT_FOUND - if the containing project does not exist

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ToolResults.V1beta3.Connection.t`) - Connection to server
  *   `project_id` (*type:* `String.t`) - A Project id.

      Required.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:requestId` (*type:* `String.t`) - A unique request ID for server to detect duplicated requests.
          For example, a UUID.

          Optional, but strongly recommended.
      *   `:body` (*type:* `GoogleApi.ToolResults.V1beta3.Model.History.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ToolResults.V1beta3.Model.History{}}` on success
  *   `{:error, info}` on failure
  """
  @spec toolresults_histories_create(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.ToolResults.V1beta3.Model.History.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def toolresults_histories_create(connection, project_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :requestId => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/toolresults/v1beta3/projects/{projectId}/histories", %{
        "projectId" => URI.encode(project_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ToolResults.V1beta3.Model.History{}])
  end

  @doc """
  Gets a History.

  May return any of the following canonical error codes:

  - PERMISSION_DENIED - if the user is not authorized to read project
  - INVALID_ARGUMENT - if the request is malformed
  - NOT_FOUND - if the History does not exist

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ToolResults.V1beta3.Connection.t`) - Connection to server
  *   `project_id` (*type:* `String.t`) - A Project id.

      Required.
  *   `history_id` (*type:* `String.t`) - A History id.

      Required.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ToolResults.V1beta3.Model.History{}}` on success
  *   `{:error, info}` on failure
  """
  @spec toolresults_histories_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.ToolResults.V1beta3.Model.History.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def toolresults_histories_get(
        connection,
        project_id,
        history_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/toolresults/v1beta3/projects/{projectId}/histories/{historyId}", %{
        "projectId" => URI.encode(project_id, &URI.char_unreserved?/1),
        "historyId" => URI.encode(history_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ToolResults.V1beta3.Model.History{}])
  end

  @doc """
  Lists Histories for a given Project.

  The histories are sorted by modification time in descending order. The
  history_id key will be used to order the history with the same
  modification time.

  May return any of the following canonical error codes:

  - PERMISSION_DENIED - if the user is not authorized to read project
  - INVALID_ARGUMENT - if the request is malformed
  - NOT_FOUND - if the History does not exist

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ToolResults.V1beta3.Connection.t`) - Connection to server
  *   `project_id` (*type:* `String.t`) - A Project id.

      Required.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filterByName` (*type:* `String.t`) - If set, only return histories with the given name.

          Optional.
      *   `:pageSize` (*type:* `integer()`) - The maximum number of Histories to fetch.

          Default value: 20. The server will use this default if the field is not set
          or has a value of 0. Any value greater than 100 will be treated as 100.

          Optional.
      *   `:pageToken` (*type:* `String.t`) - A continuation token to resume the query at the next item.

          Optional.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ToolResults.V1beta3.Model.ListHistoriesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec toolresults_histories_list(Tesla.Env.client(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.ToolResults.V1beta3.Model.ListHistoriesResponse.t()}
          | {:ok, Tesla.Env.t()}
          | {:error, any()}
  def toolresults_histories_list(connection, project_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :filterByName => :query,
      :pageSize => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/toolresults/v1beta3/projects/{projectId}/histories", %{
        "projectId" => URI.encode(project_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.ToolResults.V1beta3.Model.ListHistoriesResponse{}]
    )
  end
end
