# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ToolResults.V1beta3.Model.Duration do
  @moduledoc """
  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \&quot;day\&quot; or \&quot;month\&quot;. It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.  # Examples  Example 1: Compute Duration from two Timestamps in pseudo code.  Timestamp start &#x3D; ...; Timestamp end &#x3D; ...; Duration duration &#x3D; ...;  duration.seconds &#x3D; end.seconds - start.seconds; duration.nanos &#x3D; end.nanos - start.nanos;  if (duration.seconds  0) { duration.seconds +&#x3D; 1; duration.nanos -&#x3D; 1000000000; } else if (durations.seconds &gt; 0 &amp;&amp; duration.nanos &lt; 0) { duration.seconds -&#x3D; 1; duration.nanos +&#x3D; 1000000000; }  Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.  Timestamp start &#x3D; ...; Duration duration &#x3D; ...; Timestamp end &#x3D; ...;  end.seconds &#x3D; start.seconds + duration.seconds; end.nanos &#x3D; start.nanos + duration.nanos;  if (end.nanos &#x3D; 1000000000) { end.seconds +&#x3D; 1; end.nanos -&#x3D; 1000000000; }  Example 3: Compute Duration from datetime.timedelta in Python.  td &#x3D; datetime.timedelta(days&#x3D;3, minutes&#x3D;10) duration &#x3D; Duration() duration.FromTimedelta(td)  # JSON Mapping  In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \&quot;s\&quot; (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \&quot;3s\&quot;, while 3 seconds and 1 nanosecond should be expressed in JSON format as \&quot;3.000000001s\&quot;, and 3 seconds and 1 microsecond should be expressed in JSON format as \&quot;3.000001s\&quot;.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"nanos",
    :"seconds"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.ToolResults.V1beta3.Model.Duration do
  def decode(value, _options) do
    value
  end
end

