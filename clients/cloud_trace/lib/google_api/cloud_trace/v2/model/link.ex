# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudTrace.V2.Model.Link do
  @moduledoc """
  A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.

  ## Attributes

  - attributes (Attributes): A set of attributes on the link. You have have up to  32 attributes per link. Defaults to: `null`.
  - spanId (String.t): The [SPAN_ID] for a span within a trace. Defaults to: `null`.
  - traceId (String.t): The [TRACE_ID] for a trace within a project. Defaults to: `null`.
  - type (String.t): The relationship of the current span relative to the linked span. Defaults to: `null`.
    - Enum - one of [TYPE_UNSPECIFIED, CHILD_LINKED_SPAN, PARENT_LINKED_SPAN]
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :attributes => GoogleApi.CloudTrace.V2.Model.Attributes.t(),
          :spanId => any(),
          :traceId => any(),
          :type => any()
        }

  field(:attributes, as: GoogleApi.CloudTrace.V2.Model.Attributes)
  field(:spanId)
  field(:traceId)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.CloudTrace.V2.Model.Link do
  def decode(value, options) do
    GoogleApi.CloudTrace.V2.Model.Link.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudTrace.V2.Model.Link do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
