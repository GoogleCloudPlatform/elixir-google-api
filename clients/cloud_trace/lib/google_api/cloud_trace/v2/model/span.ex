# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudTrace.V2.Model.Span do
  @moduledoc """
  A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous&amp;mdash;there may be gaps or overlaps between spans in a trace.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"attributes",
    :"childSpanCount",
    :"displayName",
    :"endTime",
    :"links",
    :"name",
    :"parentSpanId",
    :"sameProcessAsParentSpan",
    :"spanId",
    :"stackTrace",
    :"startTime",
    :"status",
    :"timeEvents"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.CloudTrace.V2.Model.Span do
  import GoogleApi.CloudTrace.V2.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"attributes", :struct, GoogleApi.CloudTrace.V2.Model.Attributes, options)
    |> deserialize(:"displayName", :struct, GoogleApi.CloudTrace.V2.Model.TruncatableString, options)
    |> deserialize(:"links", :struct, GoogleApi.CloudTrace.V2.Model.Links, options)
    |> deserialize(:"stackTrace", :struct, GoogleApi.CloudTrace.V2.Model.StackTrace, options)
    |> deserialize(:"status", :struct, GoogleApi.CloudTrace.V2.Model.Status, options)
    |> deserialize(:"timeEvents", :struct, GoogleApi.CloudTrace.V2.Model.TimeEvents, options)
  end
end

