# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ServiceManagement.V1.Api.Services do
  @moduledoc """
  API calls for all endpoints tagged `Services`.
  """

  alias GoogleApi.ServiceManagement.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please call CreateServiceRollout.  Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (Service): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_configs_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_configs_create(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}/configs", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Service{})
  end

  @doc """
  Gets a service configuration (version) for a managed service.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - config_id (String.t): The id of the service configuration resource.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :view (String.t): Specifies which parts of the Service Config should be returned in the response.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_configs_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.ServiceManagement.V1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_configs_get(connection, service_name, config_id, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}/configs/{configId}", %{
        "serviceName" => URI.encode_www_form(service_name),
        "configId" => URI.encode_www_form(config_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Service{})
  end

  @doc """
  Lists the history of the service configuration for a managed service, from the newest to the oldest.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :pageToken (String.t): The token of the page to retrieve.
    - :pageSize (integer()): The max number of items to include in the response list.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.ListServiceConfigsResponse{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_configs_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.ListServiceConfigsResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicemanagement_services_configs_list(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}/configs", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.ListServiceConfigsResponse{})
  end

  @doc """
  Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout.  Only the 100 most recent configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually.  Operation&lt;response: SubmitConfigSourceResponse&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (SubmitConfigSourceRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_configs_submit(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_configs_submit(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}/configs:submit", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (GetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_consumers_get_iam_policy(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.ServiceManagement.V1.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_consumers_get_iam_policy(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/{+resource}:getIamPolicy", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Policy{})
  end

  @doc """
  Sets the access control policy on the specified resource. Replaces any existing policy.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_consumers_set_iam_policy(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.ServiceManagement.V1.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_consumers_set_iam_policy(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/{+resource}:setIamPolicy", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Policy{})
  end

  @doc """
  Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - resource (String.t): REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_consumers_test_iam_permissions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.TestIamPermissionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicemanagement_services_consumers_test_iam_permissions(connection, resource, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/{+resource}:testIamPermissions", %{
        "resource" => URI.encode_www_form(resource)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.TestIamPermissionsResponse{})
  end

  @doc """
  Creates a new managed service. Please note one producer project can own no more than 20 services.  Operation&lt;response: ManagedService&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (ManagedService): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_create(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_create(connection, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services")
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Deletes a managed service. This method will change the service to the &#x60;Soft-Delete&#x60; state for 30 days. Within this period, service producers may call UndeleteService to restore the service. After 30 days, the service will be permanently deleted.  Operation&lt;response: google.protobuf.Empty&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_delete(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1/services/{serviceName}", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Disables a service for a project, so it can no longer be be used for the project. It prevents accidental usage that may cause unexpected billing charges or security leaks.  Operation&lt;response: DisableServiceResponse&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): Name of the service to disable. Specifying an unknown service name will cause the request to fail.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (DisableServiceRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_disable(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_disable(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:disable", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Enables a service for a project, so it can be used for the project. See [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for more information.  Operation&lt;response: EnableServiceResponse&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): Name of the service to enable. Specifying an unknown service name will cause the request to fail.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (EnableServiceRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_enable(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_enable(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:enable", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Generates and returns a report (errors, warnings and changes from existing configurations) associated with GenerateConfigReportRequest.new_value  If GenerateConfigReportRequest.old_value is specified, GenerateConfigReportRequest will contain a single ChangeReport based on the comparison between GenerateConfigReportRequest.new_value and GenerateConfigReportRequest.old_value. If GenerateConfigReportRequest.old_value is not specified, this method will compare GenerateConfigReportRequest.new_value with the last pushed service configuration.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (GenerateConfigReportRequest): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.GenerateConfigReportResponse{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_generate_config_report(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.GenerateConfigReportResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicemanagement_services_generate_config_report(connection, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services:generateConfigReport")
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      struct: %GoogleApi.ServiceManagement.V1.Model.GenerateConfigReportResponse{}
    )
  end

  @doc """
  Gets a managed service. Authentication is required unless the service is public.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the &#x60;ServiceManager&#x60; overview for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.ManagedService{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.ManagedService.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_get(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.ManagedService{})
  end

  @doc """
  Gets a service configuration (version) for a managed service.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :view (String.t): Specifies which parts of the Service Config should be returned in the response.
    - :configId (String.t): The id of the service configuration resource.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_get_config(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_get_config(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :view => :query,
      :configId => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}/config", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Service{})
  end

  @doc """
  Lists managed services.  Returns all public services. For authenticated users, also returns all services the calling user has \&quot;servicemanagement.services.get\&quot; permission for.  **BETA:** If the caller specifies the &#x60;consumer_id&#x60;, it returns only the services enabled on the consumer. The &#x60;consumer_id&#x60; must have the format of \&quot;project:{PROJECT-ID}\&quot;.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :consumerId (String.t): Include services consumed by the specified consumer.  The Google Service Management implementation accepts the following forms: - project:&lt;project_id&gt;
    - :pageToken (String.t): Token identifying which result to start with; returned by a previous list call.
    - :pageSize (integer()): Requested size of the next page of data.
    - :producerProjectId (String.t): Include services produced by the specified project.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.ListServicesResponse{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_list(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.ListServicesResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicemanagement_services_list(connection, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :consumerId => :query,
      :pageToken => :query,
      :pageSize => :query,
      :producerProjectId => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services")
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.ListServicesResponse{})
  end

  @doc """
  Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the logging configuration will be pushed to Google Cloud Logging.  Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so that the latest Rollout will not be blocked by previous Rollouts.  Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent) rollouts are kept for each service. The rest will be deleted eventually.  Operation&lt;response: Rollout&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :body (Rollout): 

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_rollouts_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_rollouts_create(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}/rollouts", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end

  @doc """
  Gets a service configuration rollout.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - rollout_id (String.t): The id of the rollout resource.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Rollout{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_rollouts_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.ServiceManagement.V1.Model.Rollout.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_rollouts_get(connection, service_name, rollout_id, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}/rollouts/{rolloutId}", %{
        "serviceName" => URI.encode_www_form(service_name),
        "rolloutId" => URI.encode_www_form(rollout_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Rollout{})
  end

  @doc """
  Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest.

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service.  See the [overview](/service-management/overview) for naming requirements.  For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :filter (String.t): Use &#x60;filter&#x60; to return subset of rollouts. The following filters are supported:   -- To limit the results to only those in      [status](google.api.servicemanagement.v1.RolloutStatus) &#39;SUCCESS&#39;,      use filter&#x3D;&#39;status&#x3D;SUCCESS&#39;   -- To limit the results to those in      [status](google.api.servicemanagement.v1.RolloutStatus) &#39;CANCELLED&#39;      or &#39;FAILED&#39;, use filter&#x3D;&#39;status&#x3D;CANCELLED OR status&#x3D;FAILED&#39;
    - :pageToken (String.t): The token of the page to retrieve.
    - :pageSize (integer()): The max number of items to include in the response list.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.ListServiceRolloutsResponse{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_rollouts_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.ListServiceRolloutsResponse.t()}
          | {:error, Tesla.Env.t()}
  def servicemanagement_services_rollouts_list(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query,
      :filter => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1/services/{serviceName}/rollouts", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      struct: %GoogleApi.ServiceManagement.V1.Model.ListServiceRolloutsResponse{}
    )
  end

  @doc """
  Revives a previously deleted managed service. The method restores the service using the configuration at the time the service was deleted. The target service must exist and must have been deleted within the last 30 days.  Operation&lt;response: UndeleteServiceResponse&gt;

  ## Parameters

  - connection (GoogleApi.ServiceManagement.V1.Connection): Connection to server
  - service_name (String.t): The name of the service. See the [overview](/service-management/overview) for naming requirements. For example: &#x60;example.googleapis.com&#x60;.
  - opts (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :access_token (String.t): OAuth access token.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

  ## Returns

  {:ok, %GoogleApi.ServiceManagement.V1.Model.Operation{}} on success
  {:error, info} on failure
  """
  @spec servicemanagement_services_undelete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.ServiceManagement.V1.Model.Operation.t()} | {:error, Tesla.Env.t()}
  def servicemanagement_services_undelete(connection, service_name, opts \\ []) do
    optional_params = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :fields => :query,
      :uploadType => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :access_token => :query,
      :key => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/services/{serviceName}:undelete", %{
        "serviceName" => URI.encode_www_form(service_name)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.ServiceManagement.V1.Model.Operation{})
  end
end
