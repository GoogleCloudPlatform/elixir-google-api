# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.BigQuery.V2.Model.Routine do
  @moduledoc """
  A user-defined function or a stored procedure.

  ## Attributes

  - arguments ([Argument]): Optional. Defaults to: `null`.
  - creationTime (String.t): Output only. The time when this routine was created, in milliseconds since the epoch. Defaults to: `null`.
  - definitionBody (String.t): Required. The body of the routine. For functions, this is the expression in the AS clause. If language&#x3D;SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement   create function JoinLines(x string, y string) as (concat(x, \&quot;\\n\&quot;, y)) definition_body &#x3D; r&#39;concat(x, \&quot;\\n\&quot;, y)&#39; (\\n is not replaced with linebreak). If language&#x3D;JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement   CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS &#39;return \&quot;\\n\&quot;;\\n&#39; definition_body &#x3D; &#39;return \&quot;\\n\&quot;;\\n&#39; (both \\n are replaced with linebreaks). Defaults to: `null`.
  - etag (String.t): Output only. A hash of this resource. Defaults to: `null`.
  - importedLibraries ([String.t]): Optional. If language &#x3D; \&quot;JAVASCRIPT\&quot;, this field stores the path of the imported JAVASCRIPT libraries. Defaults to: `null`.
  - language (String.t): Optional. Defaults to \&quot;SQL\&quot;. Defaults to: `null`.
    - Enum - one of [LANGUAGE_UNSPECIFIED, SQL, JAVASCRIPT]
  - lastModifiedTime (String.t): Output only. The time when this routine was last modified, in milliseconds since the epoch. Defaults to: `null`.
  - returnType (StandardSqlDataType): Optional if language &#x3D; \&quot;SQL\&quot;; required otherwise. If absent, the return type is inferred from definition_body at query time in each query that references this routine. If present, then the evaluated result will be cast to the specified returned type at query time.  For example, for the functions created with the following statements   CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);   CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));   CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1)); The return_type is {type_kind: \&quot;FLOAT64\&quot;} for Add and Decrement, and is absent for Increment (inferred as FLOAT64 at query time). Suppose the function Add is replaced by   CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y); Then the inferred return type of Increment is automatically changed to INT64 at query time, while the return type of Decrement remains FLOAT64. Defaults to: `null`.
  - routineReference (RoutineReference): Required. Reference describing the ID of this routine. Defaults to: `null`.
  - routineType (String.t): Required. Defaults to: `null`.
    - Enum - one of [ROUTINE_TYPE_UNSPECIFIED, SCALAR_FUNCTION, PROCEDURE]
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :arguments => list(GoogleApi.BigQuery.V2.Model.Argument.t()),
          :creationTime => any(),
          :definitionBody => any(),
          :etag => any(),
          :importedLibraries => list(any()),
          :language => any(),
          :lastModifiedTime => any(),
          :returnType => GoogleApi.BigQuery.V2.Model.StandardSqlDataType.t(),
          :routineReference => GoogleApi.BigQuery.V2.Model.RoutineReference.t(),
          :routineType => any()
        }

  field(:arguments, as: GoogleApi.BigQuery.V2.Model.Argument, type: :list)
  field(:creationTime)
  field(:definitionBody)
  field(:etag)
  field(:importedLibraries, type: :list)
  field(:language)
  field(:lastModifiedTime)
  field(:returnType, as: GoogleApi.BigQuery.V2.Model.StandardSqlDataType)
  field(:routineReference, as: GoogleApi.BigQuery.V2.Model.RoutineReference)
  field(:routineType)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.Routine do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.Routine.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.Routine do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
