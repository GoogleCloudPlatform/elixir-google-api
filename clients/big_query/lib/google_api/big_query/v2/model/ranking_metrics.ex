# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigQuery.V2.Model.RankingMetrics do
  @moduledoc """
  Evaluation metrics used by weighted-ALS models specified by
  feedback_type=implicit.

  ## Attributes

  *   `averageRank` (*type:* `float()`, *default:* `nil`) - Determines the goodness of a ranking by computing the percentile rank
      from the predicted confidence and dividing it by the original rank.
  *   `meanAveragePrecision` (*type:* `float()`, *default:* `nil`) - Calculates a precision per user for all the items by ranking them and
      then averages all the precisions across all the users.
  *   `meanSquaredError` (*type:* `float()`, *default:* `nil`) - Similar to the mean squared error computed in regression and explicit
      recommendation models except instead of computing the rating directly,
      the output from evaluate is computed against a preference which is 1 or 0
      depending on if the rating exists or not.
  *   `normalizedDiscountedCumulativeGain` (*type:* `float()`, *default:* `nil`) - A metric to determine the goodness of a ranking calculated from the
      predicted confidence by comparing it to an ideal rank measured by the
      original ratings.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :averageRank => float(),
          :meanAveragePrecision => float(),
          :meanSquaredError => float(),
          :normalizedDiscountedCumulativeGain => float()
        }

  field(:averageRank)
  field(:meanAveragePrecision)
  field(:meanSquaredError)
  field(:normalizedDiscountedCumulativeGain)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.RankingMetrics do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.RankingMetrics.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.RankingMetrics do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
