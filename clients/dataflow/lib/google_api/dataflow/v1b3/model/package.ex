# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Dataflow.V1b3.Model.Package do
  @moduledoc """
  The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool.  This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user&#39;s code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.

  ## Attributes

  - location (String.t): The resource to read the package from. The supported resource type is:  Google Cloud Storage:    storage.googleapis.com/{bucket}   bucket.storage.googleapis.com/ Defaults to: `null`.
  - name (String.t): The name of the package. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :location => any(),
          :name => any()
        }

  field(:location)
  field(:name)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.Package do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.Package.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.Package do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
