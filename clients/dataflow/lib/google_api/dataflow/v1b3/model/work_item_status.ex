# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Dataflow.V1b3.Model.WorkItemStatus do
  @moduledoc """
  Conveys a worker&#39;s progress through the work described by a WorkItem.

  ## Attributes

  - completed (Boolean): True if the WorkItem was completed (successfully or unsuccessfully). Defaults to: `null`.
  - counterUpdates (List[CounterUpdate]): Worker output counters for this WorkItem. Defaults to: `null`.
  - dynamicSourceSplit (DynamicSourceSplit): See documentation of stop_position. Defaults to: `null`.
  - errors (List[Status]): Specifies errors which occurred during processing.  If errors are provided, and completed &#x3D; true, then the WorkItem is considered to have failed. Defaults to: `null`.
  - metricUpdates (List[MetricUpdate]): DEPRECATED in favor of counter_updates. Defaults to: `null`.
  - progress (ApproximateProgress): DEPRECATED in favor of reported_progress. Defaults to: `null`.
  - reportIndex (String): The report index.  When a WorkItem is leased, the lease will contain an initial report index.  When a WorkItem&#39;s status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report.  Reports received with unexpected index values will be rejected by the service.  In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response.  The worker should not submit a subsequent report until the response for the previous report had been received from the service. Defaults to: `null`.
  - reportedProgress (ApproximateReportedProgress): The worker&#39;s progress through this WorkItem. Defaults to: `null`.
  - requestedLeaseDuration (String): Amount of time the worker requests for its lease. Defaults to: `null`.
  - sourceFork (SourceFork): DEPRECATED in favor of dynamic_source_split. Defaults to: `null`.
  - sourceOperationResponse (SourceOperationResponse): If the work item represented a SourceOperationRequest, and the work is completed, contains the result of the operation. Defaults to: `null`.
  - stopPosition (Position): A worker may split an active map task in two parts, \&quot;primary\&quot; and \&quot;residual\&quot;, continuing to process the primary part and returning the residual part into the pool of available work. This event is called a \&quot;dynamic split\&quot; and is critical to the dynamic work rebalancing feature. The two obtained sub-tasks are called \&quot;parts\&quot; of the split. The parts, if concatenated, must represent the same input as would be read by the current task if the split did not happen. The exact way in which the original task is decomposed into the two parts is specified either as a position demarcating them (stop_position), or explicitly as two DerivedSources, if this task consumes a user-defined source type (dynamic_source_split).  The \&quot;current\&quot; task is adjusted as a result of the split: after a task with range [A, B) sends a stop_position update at C, its range is considered to be [A, C), e.g.: * Progress should be interpreted relative to the new range, e.g.   \&quot;75% completed\&quot; means \&quot;75% of [A, C) completed\&quot; * The worker should interpret proposed_stop_position relative to the   new range, e.g. \&quot;split at 68%\&quot; should be interpreted as   \&quot;split at 68% of [A, C)\&quot;. * If the worker chooses to split again using stop_position, only   stop_positions in [A, C) will be accepted. * Etc. dynamic_source_split has similar semantics: e.g., if a task with source S splits using dynamic_source_split into {P, R} (where P and R must be together equivalent to S), then subsequent progress and proposed_stop_position should be interpreted relative to P, and in a potential subsequent dynamic_source_split into {P&#39;, R&#39;}, P&#39; and R&#39; must be together equivalent to P, etc. Defaults to: `null`.
  - workItemId (String): Identifies the WorkItem. Defaults to: `null`.
  """

  defstruct [
    :"completed",
    :"counterUpdates",
    :"dynamicSourceSplit",
    :"errors",
    :"metricUpdates",
    :"progress",
    :"reportIndex",
    :"reportedProgress",
    :"requestedLeaseDuration",
    :"sourceFork",
    :"sourceOperationResponse",
    :"stopPosition",
    :"workItemId"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.WorkItemStatus do
  import GoogleApi.Dataflow.V1b3.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"counterUpdates", :list, GoogleApi.Dataflow.V1b3.Model.CounterUpdate, options)
    |> deserialize(:"dynamicSourceSplit", :struct, GoogleApi.Dataflow.V1b3.Model.DynamicSourceSplit, options)
    |> deserialize(:"errors", :list, GoogleApi.Dataflow.V1b3.Model.Status, options)
    |> deserialize(:"metricUpdates", :list, GoogleApi.Dataflow.V1b3.Model.MetricUpdate, options)
    |> deserialize(:"progress", :struct, GoogleApi.Dataflow.V1b3.Model.ApproximateProgress, options)
    |> deserialize(:"reportedProgress", :struct, GoogleApi.Dataflow.V1b3.Model.ApproximateReportedProgress, options)
    |> deserialize(:"sourceFork", :struct, GoogleApi.Dataflow.V1b3.Model.SourceFork, options)
    |> deserialize(:"sourceOperationResponse", :struct, GoogleApi.Dataflow.V1b3.Model.SourceOperationResponse, options)
    |> deserialize(:"stopPosition", :struct, GoogleApi.Dataflow.V1b3.Model.Position, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.WorkItemStatus do
  def encode(value, options) do
    GoogleApi.Dataflow.V1b3.Deserializer.serialize_non_nil(value, options)
  end
end

