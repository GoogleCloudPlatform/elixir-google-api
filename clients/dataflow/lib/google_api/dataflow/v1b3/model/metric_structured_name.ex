# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Dataflow.V1b3.Model.MetricStructuredName do
  @moduledoc """
  Identifies a metric, by describing the source which generated the metric.

  ## Attributes

  - context (%{optional(String.t) &#x3D;&gt; String.t}): Zero or more labeled fields which identify the part of the job this metric is associated with, such as the name of a step or collection.  For example, built-in counters associated with steps will have context[&#39;step&#39;] &#x3D; &lt;step-name&gt;. Counters associated with PCollections in the SDK will have context[&#39;pcollection&#39;] &#x3D; &lt;pcollection-name&gt;. Defaults to: `null`.
  - name (String.t): Worker-defined metric name. Defaults to: `null`.
  - origin (String.t): Origin (namespace) of metric name. May be blank for user-define metrics; will be \&quot;dataflow\&quot; for metrics defined by the Dataflow service or SDK. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :context => map(),
          :name => any(),
          :origin => any()
        }

  field(:context, type: :map)
  field(:name)
  field(:origin)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.MetricStructuredName do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.MetricStructuredName.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.MetricStructuredName do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
