# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.Dataflow.V1b3.Model.DistributionUpdate do
  @moduledoc """
  A metric value representing a distribution.

  ## Attributes

  - count (GoogleApi.Dataflow.V1b3.Model.SplitInt64.t): The count of the number of elements present in the distribution. Defaults to `nil`.
  - histogram (GoogleApi.Dataflow.V1b3.Model.Histogram.t): (Optional) Histogram of value counts for the distribution. Defaults to `nil`.
  - max (GoogleApi.Dataflow.V1b3.Model.SplitInt64.t): The maximum value present in the distribution. Defaults to `nil`.
  - min (GoogleApi.Dataflow.V1b3.Model.SplitInt64.t): The minimum value present in the distribution. Defaults to `nil`.
  - sum (GoogleApi.Dataflow.V1b3.Model.SplitInt64.t): Use an int64 since we'd prefer the added precision. If overflow is a common
  problem we can detect it and use an additional int64 or a double. Defaults to `nil`.
  - sumOfSquares (float()): Use a double since the sum of squares is likely to overflow int64. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :count => GoogleApi.Dataflow.V1b3.Model.SplitInt64.t(),
          :histogram => GoogleApi.Dataflow.V1b3.Model.Histogram.t(),
          :max => GoogleApi.Dataflow.V1b3.Model.SplitInt64.t(),
          :min => GoogleApi.Dataflow.V1b3.Model.SplitInt64.t(),
          :sum => GoogleApi.Dataflow.V1b3.Model.SplitInt64.t(),
          :sumOfSquares => float()
        }

  field(:count, as: GoogleApi.Dataflow.V1b3.Model.SplitInt64)
  field(:histogram, as: GoogleApi.Dataflow.V1b3.Model.Histogram)
  field(:max, as: GoogleApi.Dataflow.V1b3.Model.SplitInt64)
  field(:min, as: GoogleApi.Dataflow.V1b3.Model.SplitInt64)
  field(:sum, as: GoogleApi.Dataflow.V1b3.Model.SplitInt64)
  field(:sumOfSquares)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.DistributionUpdate do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.DistributionUpdate.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.DistributionUpdate do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
