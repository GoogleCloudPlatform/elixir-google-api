# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.LaunchFlexTemplateParameter do
  @moduledoc """
  Launch FlexTemplate Parameter.

  ## Attributes

  *   `containerSpec` (*type:* `GoogleApi.Dataflow.V1b3.Model.ContainerSpec.t`, *default:* `nil`) - Spec about the container image to launch.
  *   `containerSpecGcsPath` (*type:* `String.t`, *default:* `nil`) - Gcs path to a file with json serialized ContainerSpec as content.
  *   `environment` (*type:* `GoogleApi.Dataflow.V1b3.Model.FlexTemplateRuntimeEnvironment.t`, *default:* `nil`) - The runtime environment for the FlexTemplate job
  *   `jobName` (*type:* `String.t`, *default:* `nil`) - Required. The job name to use for the created job.
  *   `launchOptions` (*type:* `map()`, *default:* `nil`) - Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.
  *   `parameters` (*type:* `map()`, *default:* `nil`) - The parameters for FlexTemplate. Ex. {"num_workers":"5"}
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :containerSpec => GoogleApi.Dataflow.V1b3.Model.ContainerSpec.t(),
          :containerSpecGcsPath => String.t(),
          :environment => GoogleApi.Dataflow.V1b3.Model.FlexTemplateRuntimeEnvironment.t(),
          :jobName => String.t(),
          :launchOptions => map(),
          :parameters => map()
        }

  field(:containerSpec, as: GoogleApi.Dataflow.V1b3.Model.ContainerSpec)
  field(:containerSpecGcsPath)
  field(:environment, as: GoogleApi.Dataflow.V1b3.Model.FlexTemplateRuntimeEnvironment)
  field(:jobName)
  field(:launchOptions, type: :map)
  field(:parameters, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.LaunchFlexTemplateParameter do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.LaunchFlexTemplateParameter.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.LaunchFlexTemplateParameter do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
