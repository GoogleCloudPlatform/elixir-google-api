# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyUploadAccountRequest do
  @moduledoc """
  Request to upload user account in batch.

  ## Attributes

  - allowOverwrite (boolean()): Whether allow overwrite existing account when user local_id exists. Defaults to `nil`.
  - blockSize (integer()):  Defaults to `nil`.
  - cpuMemCost (integer()): The following 4 fields are for standard scrypt algorithm. Defaults to `nil`.
  - delegatedProjectNumber (String.t): GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration. Defaults to `nil`.
  - dkLen (integer()):  Defaults to `nil`.
  - hashAlgorithm (String.t): The password hash algorithm. Defaults to `nil`.
  - memoryCost (integer()): Memory cost for hash calculation. Used by scrypt similar algorithms. Defaults to `nil`.
  - parallelization (integer()):  Defaults to `nil`.
  - rounds (integer()): Rounds for hash calculation. Used by scrypt and similar algorithms. Defaults to `nil`.
  - saltSeparator (String.t): The salt separator. Defaults to `nil`.
  - sanityCheck (boolean()): If true, backend will do sanity check(including duplicate email and federated id) when uploading account. Defaults to `nil`.
  - signerKey (String.t): The key for to hash the password. Defaults to `nil`.
  - targetProjectId (String.t): Specify which project (field value is actually project id) to operate. Only used when provided credential. Defaults to `nil`.
  - users (list(GoogleApi.IdentityToolkit.V3.Model.UserInfo.t)): The account info to be stored. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowOverwrite => boolean(),
          :blockSize => integer(),
          :cpuMemCost => integer(),
          :delegatedProjectNumber => String.t(),
          :dkLen => integer(),
          :hashAlgorithm => String.t(),
          :memoryCost => integer(),
          :parallelization => integer(),
          :rounds => integer(),
          :saltSeparator => String.t(),
          :sanityCheck => boolean(),
          :signerKey => String.t(),
          :targetProjectId => String.t(),
          :users => list(GoogleApi.IdentityToolkit.V3.Model.UserInfo.t())
        }

  field(:allowOverwrite)
  field(:blockSize)
  field(:cpuMemCost)
  field(:delegatedProjectNumber)
  field(:dkLen)
  field(:hashAlgorithm)
  field(:memoryCost)
  field(:parallelization)
  field(:rounds)
  field(:saltSeparator)
  field(:sanityCheck)
  field(:signerKey)
  field(:targetProjectId)
  field(:users, as: GoogleApi.IdentityToolkit.V3.Model.UserInfo, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyUploadAccountRequest do
  def decode(value, options) do
    GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyUploadAccountRequest.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyUploadAccountRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
