# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse do
  @moduledoc """
  Response of getting the project configuration.

  ## Attributes

  - allowPasswordUser (boolean()): Whether to allow password user sign in or sign up. Defaults to: `null`.
  - apiKey (String.t): Browser API key, needed when making http request to Apiary. Defaults to: `null`.
  - authorizedDomains ([String.t]): Authorized domains. Defaults to: `null`.
  - changeEmailTemplate (EmailTemplate): Change email template. Defaults to: `null`.
  - dynamicLinksDomain (String.t):  Defaults to: `null`.
  - enableAnonymousUser (boolean()): Whether anonymous user is enabled. Defaults to: `null`.
  - idpConfig ([IdpConfig]): OAuth2 provider configuration. Defaults to: `null`.
  - legacyResetPasswordTemplate (EmailTemplate): Legacy reset password email template. Defaults to: `null`.
  - projectId (String.t): Project ID of the relying party. Defaults to: `null`.
  - resetPasswordTemplate (EmailTemplate): Reset password email template. Defaults to: `null`.
  - useEmailSending (boolean()): Whether to use email sending provided by Firebear. Defaults to: `null`.
  - verifyEmailTemplate (EmailTemplate): Verify email template. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowPasswordUser => any(),
          :apiKey => any(),
          :authorizedDomains => list(any()),
          :changeEmailTemplate => GoogleApi.IdentityToolkit.V3.Model.EmailTemplate.t(),
          :dynamicLinksDomain => any(),
          :enableAnonymousUser => any(),
          :idpConfig => list(GoogleApi.IdentityToolkit.V3.Model.IdpConfig.t()),
          :legacyResetPasswordTemplate => GoogleApi.IdentityToolkit.V3.Model.EmailTemplate.t(),
          :projectId => any(),
          :resetPasswordTemplate => GoogleApi.IdentityToolkit.V3.Model.EmailTemplate.t(),
          :useEmailSending => any(),
          :verifyEmailTemplate => GoogleApi.IdentityToolkit.V3.Model.EmailTemplate.t()
        }

  field(:allowPasswordUser)
  field(:apiKey)
  field(:authorizedDomains, type: :list)
  field(:changeEmailTemplate, as: GoogleApi.IdentityToolkit.V3.Model.EmailTemplate)
  field(:dynamicLinksDomain)
  field(:enableAnonymousUser)
  field(:idpConfig, as: GoogleApi.IdentityToolkit.V3.Model.IdpConfig, type: :list)
  field(:legacyResetPasswordTemplate, as: GoogleApi.IdentityToolkit.V3.Model.EmailTemplate)
  field(:projectId)
  field(:resetPasswordTemplate, as: GoogleApi.IdentityToolkit.V3.Model.EmailTemplate)
  field(:useEmailSending)
  field(:verifyEmailTemplate, as: GoogleApi.IdentityToolkit.V3.Model.EmailTemplate)
end

defimpl Poison.Decoder,
  for: GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse do
  def decode(value, options) do
    GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
