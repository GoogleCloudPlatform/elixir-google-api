# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse do
  @moduledoc """
  Response of verifying the IDP assertion.

  ## Attributes

  - action (String.t): The action code. Defaults to: `null`.
  - appInstallationUrl (String.t): URL for OTA app installation. Defaults to: `null`.
  - appScheme (String.t): The custom scheme used by mobile app. Defaults to: `null`.
  - context (String.t): The opaque value used by the client to maintain context info between the authentication request and the IDP callback. Defaults to: `null`.
  - dateOfBirth (String.t): The birth date of the IdP account. Defaults to: `null`.
  - displayName (String.t): The display name of the user. Defaults to: `null`.
  - email (String.t): The email returned by the IdP. NOTE: The federated login user may not own the email. Defaults to: `null`.
  - emailRecycled (boolean()): It&#39;s true if the email is recycled. Defaults to: `null`.
  - emailVerified (boolean()): The value is true if the IDP is also the email provider. It means the user owns the email. Defaults to: `null`.
  - errorMessage (String.t): Client error code. Defaults to: `null`.
  - expiresIn (String.t): If idToken is STS id token, then this field will be expiration time of STS id token in seconds. Defaults to: `null`.
  - federatedId (String.t): The unique ID identifies the IdP account. Defaults to: `null`.
  - firstName (String.t): The first name of the user. Defaults to: `null`.
  - fullName (String.t): The full name of the user. Defaults to: `null`.
  - idToken (String.t): The ID token. Defaults to: `null`.
  - inputEmail (String.t): It&#39;s the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email. Defaults to: `null`.
  - isNewUser (boolean()): True if it&#39;s a new user sign-in, false if it&#39;s a returning user. Defaults to: `null`.
  - kind (String.t): The fixed string \&quot;identitytoolkit#VerifyAssertionResponse\&quot;. Defaults to: `null`.
  - language (String.t): The language preference of the user. Defaults to: `null`.
  - lastName (String.t): The last name of the user. Defaults to: `null`.
  - localId (String.t): The RP local ID if it&#39;s already been mapped to the IdP account identified by the federated ID. Defaults to: `null`.
  - needConfirmation (boolean()): Whether the assertion is from a non-trusted IDP and need account linking confirmation. Defaults to: `null`.
  - needEmail (boolean()): Whether need client to supply email to complete the federated login flow. Defaults to: `null`.
  - nickName (String.t): The nick name of the user. Defaults to: `null`.
  - oauthAccessToken (String.t): The OAuth2 access token. Defaults to: `null`.
  - oauthAuthorizationCode (String.t): The OAuth2 authorization code. Defaults to: `null`.
  - oauthExpireIn (integer()): The lifetime in seconds of the OAuth2 access token. Defaults to: `null`.
  - oauthIdToken (String.t): The OIDC id token. Defaults to: `null`.
  - oauthRequestToken (String.t): The user approved request token for the OpenID OAuth extension. Defaults to: `null`.
  - oauthScope (String.t): The scope for the OpenID OAuth extension. Defaults to: `null`.
  - oauthTokenSecret (String.t): The OAuth1 access token secret. Defaults to: `null`.
  - originalEmail (String.t): The original email stored in the mapping storage. It&#39;s returned when the federated ID is associated to a different email. Defaults to: `null`.
  - photoUrl (String.t): The URI of the public accessible profiel picture. Defaults to: `null`.
  - providerId (String.t): The IdP ID. For white listed IdPs it&#39;s a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \&quot;providerId\&quot; param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \&quot;identifier\&quot; param is federated ID in the createAuthUri request. The domain part of the federated ID is returned. Defaults to: `null`.
  - rawUserInfo (String.t): Raw IDP-returned user info. Defaults to: `null`.
  - refreshToken (String.t): If idToken is STS id token, then this field will be refresh token. Defaults to: `null`.
  - screenName (String.t): The screen_name of a Twitter user or the login name at Github. Defaults to: `null`.
  - timeZone (String.t): The timezone of the user. Defaults to: `null`.
  - verifiedProvider ([String.t]): When action is &#39;map&#39;, contains the idps which can be used for confirmation. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => any(),
          :appInstallationUrl => any(),
          :appScheme => any(),
          :context => any(),
          :dateOfBirth => any(),
          :displayName => any(),
          :email => any(),
          :emailRecycled => any(),
          :emailVerified => any(),
          :errorMessage => any(),
          :expiresIn => any(),
          :federatedId => any(),
          :firstName => any(),
          :fullName => any(),
          :idToken => any(),
          :inputEmail => any(),
          :isNewUser => any(),
          :kind => any(),
          :language => any(),
          :lastName => any(),
          :localId => any(),
          :needConfirmation => any(),
          :needEmail => any(),
          :nickName => any(),
          :oauthAccessToken => any(),
          :oauthAuthorizationCode => any(),
          :oauthExpireIn => any(),
          :oauthIdToken => any(),
          :oauthRequestToken => any(),
          :oauthScope => any(),
          :oauthTokenSecret => any(),
          :originalEmail => any(),
          :photoUrl => any(),
          :providerId => any(),
          :rawUserInfo => any(),
          :refreshToken => any(),
          :screenName => any(),
          :timeZone => any(),
          :verifiedProvider => list(any())
        }

  field(:action)
  field(:appInstallationUrl)
  field(:appScheme)
  field(:context)
  field(:dateOfBirth)
  field(:displayName)
  field(:email)
  field(:emailRecycled)
  field(:emailVerified)
  field(:errorMessage)
  field(:expiresIn)
  field(:federatedId)
  field(:firstName)
  field(:fullName)
  field(:idToken)
  field(:inputEmail)
  field(:isNewUser)
  field(:kind)
  field(:language)
  field(:lastName)
  field(:localId)
  field(:needConfirmation)
  field(:needEmail)
  field(:nickName)
  field(:oauthAccessToken)
  field(:oauthAuthorizationCode)
  field(:oauthExpireIn)
  field(:oauthIdToken)
  field(:oauthRequestToken)
  field(:oauthScope)
  field(:oauthTokenSecret)
  field(:originalEmail)
  field(:photoUrl)
  field(:providerId)
  field(:rawUserInfo)
  field(:refreshToken)
  field(:screenName)
  field(:timeZone)
  field(:verifiedProvider, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse do
  def decode(value, options) do
    GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
