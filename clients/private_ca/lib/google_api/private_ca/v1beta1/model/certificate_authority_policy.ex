# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PrivateCA.V1beta1.Model.CertificateAuthorityPolicy do
  @moduledoc """
  The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.

  ## Attributes

  *   `allowedCommonNames` (*type:* `list(String.t)`, *default:* `nil`) - Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
  *   `allowedConfigList` (*type:* `GoogleApi.PrivateCA.V1beta1.Model.AllowedConfigList.t`, *default:* `nil`) - Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
  *   `allowedIssuanceModes` (*type:* `GoogleApi.PrivateCA.V1beta1.Model.IssuanceModes.t`, *default:* `nil`) - Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
  *   `allowedLocationsAndOrganizations` (*type:* `list(GoogleApi.PrivateCA.V1beta1.Model.Subject.t)`, *default:* `nil`) - Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
  *   `allowedSans` (*type:* `GoogleApi.PrivateCA.V1beta1.Model.AllowedSubjectAltNames.t`, *default:* `nil`) - Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
  *   `maximumLifetime` (*type:* `String.t`, *default:* `nil`) - Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
  *   `overwriteConfigValues` (*type:* `GoogleApi.PrivateCA.V1beta1.Model.ReusableConfigWrapper.t`, *default:* `nil`) - Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowedCommonNames => list(String.t()),
          :allowedConfigList => GoogleApi.PrivateCA.V1beta1.Model.AllowedConfigList.t(),
          :allowedIssuanceModes => GoogleApi.PrivateCA.V1beta1.Model.IssuanceModes.t(),
          :allowedLocationsAndOrganizations =>
            list(GoogleApi.PrivateCA.V1beta1.Model.Subject.t()),
          :allowedSans => GoogleApi.PrivateCA.V1beta1.Model.AllowedSubjectAltNames.t(),
          :maximumLifetime => String.t(),
          :overwriteConfigValues => GoogleApi.PrivateCA.V1beta1.Model.ReusableConfigWrapper.t()
        }

  field(:allowedCommonNames, type: :list)
  field(:allowedConfigList, as: GoogleApi.PrivateCA.V1beta1.Model.AllowedConfigList)
  field(:allowedIssuanceModes, as: GoogleApi.PrivateCA.V1beta1.Model.IssuanceModes)

  field(:allowedLocationsAndOrganizations,
    as: GoogleApi.PrivateCA.V1beta1.Model.Subject,
    type: :list
  )

  field(:allowedSans, as: GoogleApi.PrivateCA.V1beta1.Model.AllowedSubjectAltNames)
  field(:maximumLifetime)
  field(:overwriteConfigValues, as: GoogleApi.PrivateCA.V1beta1.Model.ReusableConfigWrapper)
end

defimpl Poison.Decoder, for: GoogleApi.PrivateCA.V1beta1.Model.CertificateAuthorityPolicy do
  def decode(value, options) do
    GoogleApi.PrivateCA.V1beta1.Model.CertificateAuthorityPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PrivateCA.V1beta1.Model.CertificateAuthorityPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
