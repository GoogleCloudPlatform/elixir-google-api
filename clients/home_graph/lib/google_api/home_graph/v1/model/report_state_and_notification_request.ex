# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.HomeGraph.V1.Model.ReportStateAndNotificationRequest do
  @moduledoc """
  Request type for the
  [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification)
  call. It may include States, Notifications, or both. This request uses
  globally unique flattened state names instead of namespaces based on traits
  to align with the existing QUERY and EXECUTE APIs implemented by 90+ Smart
  Home partners. States and notifications are defined per `device_id` (for example, "123"
  and "456" in the following example). # Example
  ```json
  {
    "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf",
    "agentUserId": "1234",
    "payload": {
      "devices": {
        "states": {
          "123": {
            "on": true
          },
          "456": {
            "on": true,
            "brightness": 10
          }
        },
      }
    }
  }
  ```

  ## Attributes

  *   `agentUserId` (*type:* `String.t`, *default:* `nil`) - Required. Third-party user ID.
  *   `eventId` (*type:* `String.t`, *default:* `nil`) - Unique identifier per event (for example, a doorbell press).
  *   `followUpToken` (*type:* `String.t`, *default:* `nil`) - Token to maintain state in the follow up notification response.
  *   `payload` (*type:* `GoogleApi.HomeGraph.V1.Model.StateAndNotificationPayload.t`, *default:* `nil`) - State of devices to update and notification metadata for devices. For
      example, if a user turns a light on manually, a state update should be
      sent so that the information is always the current status of the device.
      Notifications are independent from the state and its piece of the payload
      should contain everything necessary to notify the user. Although it may be
      related to a state change, it does not need to be. For example, if a
      device can turn on/off and change temperature, the states reported would
      include both "on" and "70 degrees" but the 3p may choose not to send any
      notification for that, or to only say that the "the room is heating up",
      keeping state and notification independent.
  *   `requestId` (*type:* `String.t`, *default:* `nil`) - Request ID used for debugging.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agentUserId => String.t(),
          :eventId => String.t(),
          :followUpToken => String.t(),
          :payload => GoogleApi.HomeGraph.V1.Model.StateAndNotificationPayload.t(),
          :requestId => String.t()
        }

  field(:agentUserId)
  field(:eventId)
  field(:followUpToken)
  field(:payload, as: GoogleApi.HomeGraph.V1.Model.StateAndNotificationPayload)
  field(:requestId)
end

defimpl Poison.Decoder, for: GoogleApi.HomeGraph.V1.Model.ReportStateAndNotificationRequest do
  def decode(value, options) do
    GoogleApi.HomeGraph.V1.Model.ReportStateAndNotificationRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.HomeGraph.V1.Model.ReportStateAndNotificationRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
