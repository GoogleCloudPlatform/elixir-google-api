# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.HomeGraph.V1.Model.Device do
  @moduledoc """
  Third-party partner's device definition.

  ## Attributes

  *   `attributes` (*type:* `map()`, *default:* `nil`) - Attributes for the traits supported by the device.
  *   `customData` (*type:* `map()`, *default:* `nil`) - Custom JSON data provided by the manufacturer and attached to QUERY and
      EXECUTE requests in AoG.
  *   `deviceInfo` (*type:* `GoogleApi.HomeGraph.V1.Model.DeviceInfo.t`, *default:* `nil`) - Device manufacturer, model, hardware version, and software version.
  *   `id` (*type:* `String.t`, *default:* `nil`) - Third-party partner's device ID.
  *   `name` (*type:* `GoogleApi.HomeGraph.V1.Model.DeviceNames.t`, *default:* `nil`) - Name of the device given by the third party. This includes names given to
      the device via third party device manufacturer's app, model names for the
      device, etc.
  *   `notificationSupportedByAgent` (*type:* `boolean()`, *default:* `nil`) - Indicates whether the device is capable of sending notifications. This
      field will be set by the agent (partner) on an incoming SYNC. If a device
      is not capable of generating notifications, the partner should set this
      flag to false. If a partner is not capable of calling
      ReportStateAndNotification to send notifications to Google, the partner
      should set this flag to false. If there is a user setting in the partner
      app to enable notifications and it is turned off, the partner should set
      this flag to false.
  *   `otherDeviceIds` (*type:* `list(GoogleApi.HomeGraph.V1.Model.AgentOtherDeviceId.t)`, *default:* `nil`) - IDs of other devices associated with this device. This is used to
      represent a device group (e.g. bonded zone) or "facets" synced
      through different flows (e.g. Google Nest Hub Max with a Nest Camera).

      This may also be used to pass in alternate IDs used to identify a cloud
      synced device for local execution (i.e. local verification). If used for
      local verification, this field is synced from the cloud.
  *   `roomHint` (*type:* `String.t`, *default:* `nil`) - If the third-party partner's cloud configuration includes placing devices
      in rooms, the name of the room can be provided here.
  *   `structureHint` (*type:* `String.t`, *default:* `nil`) - As in roomHint, for structures that users set up in the partner's system.
  *   `traits` (*type:* `list(String.t)`, *default:* `nil`) - Traits supported by the device.
  *   `type` (*type:* `String.t`, *default:* `nil`) - Hardware type of the device (e.g. light, outlet, etc).
  *   `willReportState` (*type:* `boolean()`, *default:* `nil`) - Indicates whether the state of this device is being reported to Google
      through ReportStateAndNotification call.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :attributes => map(),
          :customData => map(),
          :deviceInfo => GoogleApi.HomeGraph.V1.Model.DeviceInfo.t(),
          :id => String.t(),
          :name => GoogleApi.HomeGraph.V1.Model.DeviceNames.t(),
          :notificationSupportedByAgent => boolean(),
          :otherDeviceIds => list(GoogleApi.HomeGraph.V1.Model.AgentOtherDeviceId.t()),
          :roomHint => String.t(),
          :structureHint => String.t(),
          :traits => list(String.t()),
          :type => String.t(),
          :willReportState => boolean()
        }

  field(:attributes, type: :map)
  field(:customData, type: :map)
  field(:deviceInfo, as: GoogleApi.HomeGraph.V1.Model.DeviceInfo)
  field(:id)
  field(:name, as: GoogleApi.HomeGraph.V1.Model.DeviceNames)
  field(:notificationSupportedByAgent)
  field(:otherDeviceIds, as: GoogleApi.HomeGraph.V1.Model.AgentOtherDeviceId, type: :list)
  field(:roomHint)
  field(:structureHint)
  field(:traits, type: :list)
  field(:type)
  field(:willReportState)
end

defimpl Poison.Decoder, for: GoogleApi.HomeGraph.V1.Model.Device do
  def decode(value, options) do
    GoogleApi.HomeGraph.V1.Model.Device.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.HomeGraph.V1.Model.Device do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
