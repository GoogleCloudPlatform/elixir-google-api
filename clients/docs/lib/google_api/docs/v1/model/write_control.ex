# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Docs.V1.Model.WriteControl do
  @moduledoc """
  Provides control over how write requests are executed.

  ## Attributes

  *   `requiredRevisionId` (*type:* `String.t`, *default:* `nil`) - The revision ID of the
      document that the write request will be applied to. If this is not the
      latest revision of the document, the request will not be processed and
      will return a 400 bad request error.

      When a required revision ID is returned in a response, it indicates the
      revision ID of the document after the request was applied.
  *   `targetRevisionId` (*type:* `String.t`, *default:* `nil`) - The target revision ID of the
      document that the write request will be applied to.

      If collaborator changes have occurred after the document was read using
      the API, the changes produced by this write request will be transformed
      against the collaborator changes. This results in a new revision of the
      document which incorporates both the changes in the request and the
      collaborator changes, and the Docs server will resolve conflicting
      changes. When using `target_revision_id`, the API client can be thought
      of as another collaborator of the document.

      The target revision ID may only be used to write to recent versions of a
      document. If the target revision is too far behind the latest revision,
      the request will not be processed and will return a 400 bad request error
      and the request should be retried after reading the latest version of the
      document. In most cases a `revision_id` will remain valid for use as a
      target revision for several minutes after it is read, but for
      frequently-edited documents this window may be shorter.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :requiredRevisionId => String.t(),
          :targetRevisionId => String.t()
        }

  field(:requiredRevisionId)
  field(:targetRevisionId)
end

defimpl Poison.Decoder, for: GoogleApi.Docs.V1.Model.WriteControl do
  def decode(value, options) do
    GoogleApi.Docs.V1.Model.WriteControl.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Docs.V1.Model.WriteControl do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
