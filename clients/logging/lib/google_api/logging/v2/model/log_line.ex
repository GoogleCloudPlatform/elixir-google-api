# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Logging.V2.Model.LogLine do
  @moduledoc """
  Application log line emitted while processing a request.

  ## Attributes

  - logMessage (String.t): App-provided log message. Defaults to: `null`.
  - severity (String.t): Severity of this log entry. Defaults to: `null`.
    - Enum - one of [DEFAULT, DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL, ALERT, EMERGENCY]
  - sourceLocation (SourceLocation): Where in the source code this log message was written. Defaults to: `null`.
  - time (DateTime.t): Approximate time when this log entry was made. Defaults to: `null`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :logMessage => any(),
          :severity => any(),
          :sourceLocation => GoogleApi.Logging.V2.Model.SourceLocation.t(),
          :time => DateTime.t()
        }

  field(:logMessage)
  field(:severity)
  field(:sourceLocation, as: GoogleApi.Logging.V2.Model.SourceLocation)
  field(:time, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.Logging.V2.Model.LogLine do
  def decode(value, options) do
    GoogleApi.Logging.V2.Model.LogLine.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Logging.V2.Model.LogLine do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
