# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudUserAccounts.Vm_alpha.Model.Rule do
  @moduledoc """
  A rule to be applied in a Policy.

  ## Attributes

  - action (String): Required Defaults to: `null`.
    - Enum - one of [ALLOW, ALLOW_WITH_LOG, DENY, DENY_WITH_LOG, LOG, NO_ACTION]
  - conditions (List[Condition]): Additional restrictions that must be met Defaults to: `null`.
  - description (String): Human-readable description of the rule. Defaults to: `null`.
  - ins (List[String]): The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in this set of entries. Defaults to: `null`.
  - logConfigs (List[LogConfig]): The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action. Defaults to: `null`.
  - notIns (List[String]): The rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is not in this set of entries. Defaults to: `null`.
  - permissions (List[String]): A permission is a string of form &#39;..&#39; (e.g., &#39;storage.buckets.list&#39;). A value of &#39;*&#39; matches all permissions, and a verb part of &#39;*&#39; (e.g., &#39;storage.buckets.*&#39;) matches all verbs. Defaults to: `null`.
  """

  defstruct [
    :"action",
    :"conditions",
    :"description",
    :"ins",
    :"logConfigs",
    :"notIns",
    :"permissions"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.CloudUserAccounts.Vm_alpha.Model.Rule do
  import GoogleApi.CloudUserAccounts.Vm_alpha.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"conditions", :list, GoogleApi.CloudUserAccounts.Vm_alpha.Model.Condition, options)
    |> deserialize(:"logConfigs", :list, GoogleApi.CloudUserAccounts.Vm_alpha.Model.LogConfig, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudUserAccounts.Vm_alpha.Model.Rule do
  def encode(value, options) do
    GoogleApi.CloudUserAccounts.Vm_alpha.Deserializer.serialize_non_nil(value, options)
  end
end

