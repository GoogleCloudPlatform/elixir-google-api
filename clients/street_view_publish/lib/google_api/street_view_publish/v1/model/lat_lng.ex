# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.StreetViewPublish.V1.Model.LatLng do
  @moduledoc """
  An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the &lt;a href&#x3D;\&quot;http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\&quot;&gt;WGS84 standard&lt;/a&gt;. Values must be within normalized ranges.  Example of normalization code in Python:      def NormalizeLongitude(longitude):       \&quot;\&quot;\&quot;Wraps decimal degrees longitude to [-180.0, 180.0].\&quot;\&quot;\&quot;       q, r &#x3D; divmod(longitude, 360.0)       if r &gt; 180.0 or (r &#x3D;&#x3D; 180.0 and q &lt;&#x3D; -1.0):         return r - 360.0       return r      def NormalizeLatLng(latitude, longitude):       \&quot;\&quot;\&quot;Wraps decimal degrees latitude and longitude to       [-90.0, 90.0] and [-180.0, 180.0], respectively.\&quot;\&quot;\&quot;       r &#x3D; latitude % 360.0       if r &lt;&#x3D; 90.0:         return r, NormalizeLongitude(longitude)       elif r &gt;&#x3D; 270.0:         return r - 360, NormalizeLongitude(longitude)       else:         return 180 - r, NormalizeLongitude(longitude + 180.0)      assert 180.0 &#x3D;&#x3D; NormalizeLongitude(180.0)     assert -180.0 &#x3D;&#x3D; NormalizeLongitude(-180.0)     assert -179.0 &#x3D;&#x3D; NormalizeLongitude(181.0)     assert (0.0, 0.0) &#x3D;&#x3D; NormalizeLatLng(360.0, 0.0)     assert (0.0, 0.0) &#x3D;&#x3D; NormalizeLatLng(-360.0, 0.0)     assert (85.0, 180.0) &#x3D;&#x3D; NormalizeLatLng(95.0, 0.0)     assert (-85.0, -170.0) &#x3D;&#x3D; NormalizeLatLng(-95.0, 10.0)     assert (90.0, 10.0) &#x3D;&#x3D; NormalizeLatLng(90.0, 10.0)     assert (-90.0, -10.0) &#x3D;&#x3D; NormalizeLatLng(-90.0, -10.0)     assert (0.0, -170.0) &#x3D;&#x3D; NormalizeLatLng(-180.0, 10.0)     assert (0.0, -170.0) &#x3D;&#x3D; NormalizeLatLng(180.0, 10.0)     assert (-90.0, 10.0) &#x3D;&#x3D; NormalizeLatLng(270.0, 10.0)     assert (90.0, 10.0) &#x3D;&#x3D; NormalizeLatLng(-270.0, 10.0)

  ## Attributes

  - latitude (Float): The latitude in degrees. It must be in the range [-90.0, +90.0]. Defaults to: `null`.
  - longitude (Float): The longitude in degrees. It must be in the range [-180.0, +180.0]. Defaults to: `null`.
  """

  defstruct [
    :"latitude",
    :"longitude"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.StreetViewPublish.V1.Model.LatLng do
  def decode(value, _options) do
    value
  end
end

defimpl Poison.Encoder, for: GoogleApi.StreetViewPublish.V1.Model.LatLng do
  def encode(value, options) do
    GoogleApi.StreetViewPublish.V1.Deserializer.serialize_non_nil(value, options)
  end
end

