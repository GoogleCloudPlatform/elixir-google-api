# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.DFAReporting.V28.Model.Creative do
  @moduledoc """
  Contains properties of a Creative.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"accountId",
    :"active",
    :"adParameters",
    :"adTagKeys",
    :"advertiserId",
    :"allowScriptAccess",
    :"archived",
    :"artworkType",
    :"authoringSource",
    :"authoringTool",
    :"autoAdvanceImages",
    :"backgroundColor",
    :"backupImageClickThroughUrl",
    :"backupImageFeatures",
    :"backupImageReportingLabel",
    :"backupImageTargetWindow",
    :"clickTags",
    :"commercialId",
    :"companionCreatives",
    :"compatibility",
    :"convertFlashToHtml5",
    :"counterCustomEvents",
    :"creativeAssetSelection",
    :"creativeAssets",
    :"creativeFieldAssignments",
    :"customKeyValues",
    :"dynamicAssetSelection",
    :"exitCustomEvents",
    :"fsCommand",
    :"htmlCode",
    :"htmlCodeLocked",
    :"id",
    :"idDimensionValue",
    :"kind",
    :"lastModifiedInfo",
    :"latestTraffickedCreativeId",
    :"name",
    :"overrideCss",
    :"progressOffset",
    :"redirectUrl",
    :"renderingId",
    :"renderingIdDimensionValue",
    :"requiredFlashPluginVersion",
    :"requiredFlashVersion",
    :"size",
    :"skipOffset",
    :"skippable",
    :"sslCompliant",
    :"sslOverride",
    :"studioAdvertiserId",
    :"studioCreativeId",
    :"studioTraffickedCreativeId",
    :"subaccountId",
    :"thirdPartyBackupImageImpressionsUrl",
    :"thirdPartyRichMediaImpressionsUrl",
    :"thirdPartyUrls",
    :"timerCustomEvents",
    :"totalFileSize",
    :"type",
    :"universalAdId",
    :"version",
    :"videoDescription",
    :"videoDuration"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.DFAReporting.V28.Model.Creative do
  import GoogleApi.DFAReporting.V28.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"backupImageTargetWindow", :struct, GoogleApi.DFAReporting.V28.Model.TargetWindow, options)
    |> deserialize(:"clickTags", :list, GoogleApi.DFAReporting.V28.Model.ClickTag, options)
    |> deserialize(:"counterCustomEvents", :list, GoogleApi.DFAReporting.V28.Model.CreativeCustomEvent, options)
    |> deserialize(:"creativeAssetSelection", :struct, GoogleApi.DFAReporting.V28.Model.CreativeAssetSelection, options)
    |> deserialize(:"creativeAssets", :list, GoogleApi.DFAReporting.V28.Model.CreativeAsset, options)
    |> deserialize(:"creativeFieldAssignments", :list, GoogleApi.DFAReporting.V28.Model.CreativeFieldAssignment, options)
    |> deserialize(:"exitCustomEvents", :list, GoogleApi.DFAReporting.V28.Model.CreativeCustomEvent, options)
    |> deserialize(:"fsCommand", :struct, GoogleApi.DFAReporting.V28.Model.FsCommand, options)
    |> deserialize(:"idDimensionValue", :struct, GoogleApi.DFAReporting.V28.Model.DimensionValue, options)
    |> deserialize(:"lastModifiedInfo", :struct, GoogleApi.DFAReporting.V28.Model.LastModifiedInfo, options)
    |> deserialize(:"progressOffset", :struct, GoogleApi.DFAReporting.V28.Model.VideoOffset, options)
    |> deserialize(:"renderingIdDimensionValue", :struct, GoogleApi.DFAReporting.V28.Model.DimensionValue, options)
    |> deserialize(:"size", :struct, GoogleApi.DFAReporting.V28.Model.Size, options)
    |> deserialize(:"skipOffset", :struct, GoogleApi.DFAReporting.V28.Model.VideoOffset, options)
    |> deserialize(:"thirdPartyUrls", :list, GoogleApi.DFAReporting.V28.Model.ThirdPartyTrackingUrl, options)
    |> deserialize(:"timerCustomEvents", :list, GoogleApi.DFAReporting.V28.Model.CreativeCustomEvent, options)
    |> deserialize(:"universalAdId", :struct, GoogleApi.DFAReporting.V28.Model.UniversalAdId, options)
  end
end

