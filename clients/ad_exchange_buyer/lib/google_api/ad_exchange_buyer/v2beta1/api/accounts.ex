# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.AdExchangeBuyer.V2beta1.Api.Accounts do
  @moduledoc """
  API calls for all endpoints tagged `Accounts`.
  """

  alias GoogleApi.AdExchangeBuyer.V2beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Creates a new client buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (Client): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_create(connection, account_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/clients", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{})
  end

  @doc """
  Gets a client buyer with a given client account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer to retrieve. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_get(connection, account_id, client_account_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{})
  end

  @doc """
  Creates and sends out an email invitation to access an Ad Exchange client buyer account.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user should be associated with. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (ClientUserInvitation): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_create(
        connection,
        account_id,
        client_account_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{})
  end

  @doc """
  Retrieves an existing client user invitation.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)
  - invitation_id (String.t): Numerical identifier of the user invitation to retrieve. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_get(
        connection,
        account_id,
        client_account_id,
        invitation_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "clientAccountId" => URI.encode_www_form(client_account_id),
          "invitationId" => URI.encode_www_form(invitation_id)
        }
      )
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUserInvitation{})
  end

  @doc """
  Lists all the client users invitations for a client with a given account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the &#x60;-&#x60; character to list all the invitations for all the clients of a given sponsor buyer.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.
    - :pageSize (integer()): Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_invitations_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_invitations_list(
        connection,
        account_id,
        client_account_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUserInvitationsResponse{}
    )
  end

  @doc """
  Lists all the clients for the current sponsor buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID of the sponsor buyer to list the clients for.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method.
    - :partnerClientId (String.t): Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the response.
    - :pageSize (integer()): Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_list(connection, account_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :pageToken => :query,
      :partnerClientId => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientsResponse{})
  end

  @doc """
  Updates an existing client buyer.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)
  - client_account_id (String.t): Unique numerical account ID of the client to update. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (Client): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Client.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_update(
        connection,
        account_id,
        client_account_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Client{})
  end

  @doc """
  Retrieves an existing client user.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
  - user_id (String.t): Numerical identifier of the user to retrieve. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_get(
        connection,
        account_id,
        client_account_id,
        user_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id),
        "userId" => URI.encode_www_form(user_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{})
  end

  @doc """
  Lists all the known client users for a specified sponsor buyer account ID.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the sponsor buyer of the client to list users for. (required)
  - client_account_id (String.t): The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the &#x60;-&#x60; character to list all the client users for all the clients of a given sponsor buyer.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.
    - :pageSize (integer()): Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_list(
        connection,
        account_id,
        client_account_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListClientUsersResponse{})
  end

  @doc """
  Updates an existing client user. Only the user status can be changed on update.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): Numerical account ID of the client&#39;s sponsor buyer. (required)
  - client_account_id (String.t): Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
  - user_id (String.t): Numerical identifier of the user to retrieve. (required)
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (ClientUser): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_clients_users_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_clients_users_update(
        connection,
        account_id,
        client_account_id,
        user_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "clientAccountId" => URI.encode_www_form(client_account_id),
        "userId" => URI.encode_www_form(user_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ClientUser{})
  end

  @doc """
  Creates a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :duplicateIdMode (String.t): Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).
    - :body (Creative): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_create(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_create(connection, account_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :duplicateIdMode => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{})
  end

  @doc """
  Associate an existing deal with a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative associated with the deal.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (AddDealAssociationRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_add(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_add(
        connection,
        account_id,
        creative_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "creativeId" => URI.encode_www_form(creative_id)
        }
      )
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{})
  end

  @doc """
  List all creative-deal associations.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account to list the associations from. Specify \&quot;-\&quot; to list all creatives the current user has access to.
  - creative_id (String.t): The creative ID to list the associations from. Specify \&quot;-\&quot; to list all creatives under the above account.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to &#39;ListDealAssociations&#39; method.
    - :pageSize (integer()): Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.
    - :query (String.t): An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: &lt;ul&gt; &lt;li&gt;accountId&#x3D;&lt;i&gt;account_id_string&lt;/i&gt; &lt;li&gt;creativeId&#x3D;&lt;i&gt;creative_id_string&lt;/i&gt; &lt;li&gt;dealsId&#x3D;&lt;i&gt;deals_id_string&lt;/i&gt; &lt;li&gt;dealsStatus:{approved, conditionally_approved, disapproved,                   not_checked} &lt;li&gt;openAuctionStatus:{approved, conditionally_approved, disapproved,                          not_checked} &lt;/ul&gt; Example: &#39;dealsId&#x3D;12345 AND dealsStatus:disapproved&#39;

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_list(
        connection,
        account_id,
        creative_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :pageToken => :query,
      :pageSize => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListDealAssociationsResponse{}
    )
  end

  @doc """
  Remove the association between a deal and a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative associated with the deal.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (RemoveDealAssociationRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_deal_associations_remove(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_deal_associations_remove(
        connection,
        account_id,
        creative_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove",
        %{
          "accountId" => URI.encode_www_form(account_id),
          "creativeId" => URI.encode_www_form(creative_id)
        }
      )
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{})
  end

  @doc """
  Gets a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account the creative belongs to.
  - creative_id (String.t): The ID of the creative to retrieve.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_get(connection, account_id, creative_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{})
  end

  @doc """
  Lists creatives.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account to list the creatives from. Specify \&quot;-\&quot; to list all creatives the current user has access to.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to &#39;ListCreatives&#39; method.
    - :pageSize (integer()): Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
    - :query (String.t): An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. &lt;p&gt;Supported queries are: &lt;ul&gt; &lt;li&gt;accountId&#x3D;&lt;i&gt;account_id_string&lt;/i&gt; &lt;li&gt;creativeId&#x3D;&lt;i&gt;creative_id_string&lt;/i&gt; &lt;li&gt;dealsStatus: {approved, conditionally_approved, disapproved,                    not_checked} &lt;li&gt;openAuctionStatus: {approved, conditionally_approved, disapproved,                           not_checked} &lt;li&gt;attribute: {a numeric attribute from the list of attributes} &lt;li&gt;disapprovalReason: {a reason from DisapprovalReason} &lt;/ul&gt; Example: &#39;accountId&#x3D;12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47&#39;

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse.t()}
          | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_list(connection, account_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :pageToken => :query,
      :pageSize => :query,
      :query => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives", %{
        "accountId" => URI.encode_www_form(account_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.ListCreativesResponse{})
  end

  @doc """
  Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account of the creative to stop notifications for.
  - creative_id (String.t): The creative ID of the creative to stop notifications for. Specify \&quot;-\&quot; to specify stopping account level notifications.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (StopWatchingCreativeRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_stop_watching(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_stop_watching(
        connection,
        account_id,
        creative_id,
        opts \\ []
      ) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{})
  end

  @doc """
  Updates a creative.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
  - creative_id (String.t): The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (Creative): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_update(connection, account_id, creative_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Creative{})
  end

  @doc """
  Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.

  ## Parameters

  - connection (GoogleApi.AdExchangeBuyer.V2beta1.Connection): Connection to server
  - account_id (String.t): The account of the creative to watch.
  - creative_id (String.t): The creative ID to watch for status changes. Specify \&quot;-\&quot; to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic.
  - opts (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :$.xgafv (String.t): V1 error format.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :callback (String.t): JSONP
    - :alt (String.t): Data format for response.
    - :body (WatchCreativeRequest): 

  ## Returns

  {:ok, %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec adexchangebuyer2_accounts_creatives_watch(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def adexchangebuyer2_accounts_creatives_watch(connection, account_id, creative_id, opts \\ []) do
    optional_params = %{
      :key => :query,
      :access_token => :query,
      :upload_protocol => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :fields => :query,
      :"$.xgafv" => :query,
      :oauth_token => :query,
      :callback => :query,
      :alt => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch", %{
        "accountId" => URI.encode_www_form(account_id),
        "creativeId" => URI.encode_www_form(creative_id)
      })
      |> Request.add_optional_params(optional_params, opts)

    connection
    |> Connection.execute(request)
    |> Response.decode(struct: %GoogleApi.AdExchangeBuyer.V2beta1.Model.Empty{})
  end
end
