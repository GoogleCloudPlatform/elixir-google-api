# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  @moduledoc """
  Database instance export context.

  ## Attributes

  - csvExportOptions (ExportContextCsvExportOptions):  Defaults to: `null`.
  - databases (List[String]): Databases (for example, guestbook) from which the export is made. If fileType is SQL and no database is specified, all databases are exported. If fileType is CSV, you can optionally specify at most one database to export. If csvExportOptions.selectQuery also specifies the database, this field will be ignored. Defaults to: `null`.
  - fileType (String): The file type for the specified uri. SQL: The file contains SQL statements. CSV: The file contains CSV data. Defaults to: `null`.
  - kind (String): This is always sql#exportContext. Defaults to: `null`.
  - sqlExportOptions (ExportContextSqlExportOptions):  Defaults to: `null`.
  - uri (String): The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form gs://bucketName/fileName. If the file already exists, the operation fails. If fileType is SQL and the filename ends with .gz, the contents are compressed. Defaults to: `null`.
  """

  defstruct [
    :"csvExportOptions",
    :"databases",
    :"fileType",
    :"kind",
    :"sqlExportOptions",
    :"uri"
  ]
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  import GoogleApi.SQLAdmin.V1beta4.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"csvExportOptions", :struct, GoogleApi.SQLAdmin.V1beta4.Model.ExportContextCsvExportOptions, options)
    |> deserialize(:"sqlExportOptions", :struct, GoogleApi.SQLAdmin.V1beta4.Model.ExportContextSqlExportOptions, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  def encode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Deserializer.serialize_non_nil(value, options)
  end
end

