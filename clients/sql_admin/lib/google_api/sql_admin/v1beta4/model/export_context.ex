# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  @moduledoc """
  Database instance export context.

  ## Attributes

  *   `csvExportOptions` (*type:* `GoogleApi.SQLAdmin.V1beta4.Model.ExportContextCsvExportOptions.t`, *default:* `nil`) - Options for exporting data as CSV.
  *   `databases` (*type:* `list(String.t)`, *default:* `nil`) - Databases to be exported. <br /> <b>MySQL instances:</b> If
      <code>fileType</code> is <code>SQL</code> and no database is specified, all
      databases are exported, except for the <code>mysql</code> system database.
      If <code>fileType</code> is <code>CSV</code>, you can specify one database,
      either by using this property or by using the
      <code>csvExportOptions.selectQuery</code> property, which takes precedence
      over this property. <br /> <b>PostgreSQL instances:</b> You must specify
      one database to be exported. If <code>fileType</code> is <code>CSV</code>,
      this database must match the one specified in the
      <code>csvExportOptions.selectQuery</code> property.
  *   `fileType` (*type:* `String.t`, *default:* `nil`) - The file type for the specified uri. <br><code>SQL</code>: The file
      contains SQL statements. <br><code>CSV</code>: The file contains CSV data.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - This is always <code>sql#exportContext</code>.
  *   `sqlExportOptions` (*type:* `GoogleApi.SQLAdmin.V1beta4.Model.ExportContextSqlExportOptions.t`, *default:* `nil`) - Options for exporting data as SQL statements.
  *   `uri` (*type:* `String.t`, *default:* `nil`) - The path to the file in Google Cloud Storage where the export will be
      stored. The URI is in the form <code>gs:
      //bucketName/fileName</code>. If the file already exists, the requests
      // succeeds, but the operation fails. If <code>fileType</code> is
      // <code>SQL</code> and the filename ends with .gz, the contents are
      // compressed.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :csvExportOptions => GoogleApi.SQLAdmin.V1beta4.Model.ExportContextCsvExportOptions.t(),
          :databases => list(String.t()),
          :fileType => String.t(),
          :kind => String.t(),
          :sqlExportOptions => GoogleApi.SQLAdmin.V1beta4.Model.ExportContextSqlExportOptions.t(),
          :uri => String.t()
        }

  field(:csvExportOptions, as: GoogleApi.SQLAdmin.V1beta4.Model.ExportContextCsvExportOptions)
  field(:databases, type: :list)
  field(:fileType)
  field(:kind)
  field(:sqlExportOptions, as: GoogleApi.SQLAdmin.V1beta4.Model.ExportContextSqlExportOptions)
  field(:uri)
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  def decode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Model.ExportContext.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContext do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
