# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  @moduledoc """
  A flag resource.

  ## Attributes

  - allowedStringValues (list(String.t)): For STRING flags, a list of strings that the value can be set to. Defaults to `nil`.
  - appliesTo (list(String.t)): The database version this flag applies to. Can be MYSQL_5_5, MYSQL_5_6, or MYSQL_5_7. MYSQL_5_7 is applicable only to Second Generation instances. Defaults to `nil`.
  - inBeta (boolean()): True if the flag is only released in Beta. Defaults to `nil`.
  - kind (String.t): This is always sql#flag. Defaults to `sql#flag`.
  - maxValue (String.t): For INTEGER flags, the maximum allowed value. Defaults to `nil`.
  - minValue (String.t): For INTEGER flags, the minimum allowed value. Defaults to `nil`.
  - name (String.t): This is the name of the flag. Flag names always use underscores, not hyphens, e.g. max_allowed_packet Defaults to `nil`.
  - requiresRestart (boolean()): Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances. Defaults to `nil`.
  - type (String.t): The type of the flag. Flags are typed to being BOOLEAN, STRING, INTEGER or NONE. NONE is used for flags which do not take a value, such as skip_grant_tables. Defaults to `nil`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowedStringValues => list(String.t()),
          :appliesTo => list(String.t()),
          :inBeta => boolean(),
          :kind => String.t(),
          :maxValue => String.t(),
          :minValue => String.t(),
          :name => String.t(),
          :requiresRestart => boolean(),
          :type => String.t()
        }

  field(:allowedStringValues, type: :list)
  field(:appliesTo, type: :list)
  field(:inBeta)
  field(:kind)
  field(:maxValue)
  field(:minValue)
  field(:name)
  field(:requiresRestart)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  def decode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Model.Flag.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
